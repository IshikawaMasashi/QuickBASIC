{"version":3,"sources":["webpack://QuickBASIC/webpack/universalModuleDefinition","webpack://QuickBASIC/webpack/bootstrap","webpack://QuickBASIC/./src/qb.ts","webpack://QuickBASIC/./src/types/Type.ts","webpack://QuickBASIC/./node_modules/earley/lib/index.js","webpack://QuickBASIC/./src/file/file.ts","webpack://QuickBASIC/./src/ScalarVariable.ts","webpack://QuickBASIC/./node_modules/earley/lib/Token.js","webpack://QuickBASIC/./node_modules/earley/lib/CharMatcher.js","webpack://QuickBASIC/./src/node/AstVariableReference.ts","webpack://QuickBASIC/./src/SystemFunctions.ts","webpack://QuickBASIC/./src/SystemSubroutines.ts","webpack://QuickBASIC/./node_modules/earley/lib/Location.js","webpack://QuickBASIC/./node_modules/earley/lib/EarleyParser.js","webpack://QuickBASIC/./src/node/AstDeclareFunction.ts","webpack://QuickBASIC/./src/node/AstPrintItem.ts","webpack://QuickBASIC/./src/node/AstDoStatement.ts","webpack://QuickBASIC/./src/StackFrame.ts","webpack://QuickBASIC/./src/Variable.ts","webpack://QuickBASIC/./src/UserType.ts","webpack://QuickBASIC/./src/types/NullType.ts","webpack://QuickBASIC/./src/types/ArrayType.ts","webpack://QuickBASIC/./src/index.ts","webpack://QuickBASIC/./node_modules/earley/lib/TreeNode.js","webpack://QuickBASIC/./node_modules/earley/lib/EarleyItem.js","webpack://QuickBASIC/./node_modules/earley/lib/RuleParser.js","webpack://QuickBASIC/./node_modules/earley/lib/RuleSet.js","webpack://QuickBASIC/./node_modules/earley/lib/Tokenizer.js","webpack://QuickBASIC/./node_modules/earley/lib/NfaState.js","webpack://QuickBASIC/./node_modules/earley/lib/Nfa.js","webpack://QuickBASIC/./node_modules/earley/lib/DfaState.js","webpack://QuickBASIC/./node_modules/earley/lib/RangeMatcher.js","webpack://QuickBASIC/./node_modules/earley/lib/Rule.js","webpack://QuickBASIC/./src/node/AstArgument.ts","webpack://QuickBASIC/./src/node/AstEndStatement.ts","webpack://QuickBASIC/./src/node/AstNullStatement.ts","webpack://QuickBASIC/./src/node/AstAssignStatement.ts","webpack://QuickBASIC/./src/node/AstBinaryOp.ts","webpack://QuickBASIC/./src/node/AstCallStatement.ts","webpack://QuickBASIC/./src/node/AstCaseStatement.ts","webpack://QuickBASIC/./src/node/AstConstStatement.ts","webpack://QuickBASIC/./src/node/AstExitStatement.ts","webpack://QuickBASIC/./src/node/AstConstantExpr.ts","webpack://QuickBASIC/./src/node/AstGosubStatement.ts","webpack://QuickBASIC/./src/node/AstGotoStatement.ts","webpack://QuickBASIC/./src/node/AstInputStatement.ts","webpack://QuickBASIC/./src/node/AstLabel.ts","webpack://QuickBASIC/./src/node/AstTypeMember.ts","webpack://QuickBASIC/./src/node/AstNextStatement.ts","webpack://QuickBASIC/./src/node/AstDataStatement.ts","webpack://QuickBASIC/./src/node/AstForLoop.ts","webpack://QuickBASIC/./src/node/AstIfStatement.ts","webpack://QuickBASIC/./src/node/AstMemberDeref.ts","webpack://QuickBASIC/./src/node/AstPrintStatement.ts","webpack://QuickBASIC/./src/node/AstPrintUsingStatement.ts","webpack://QuickBASIC/./src/node/AstReturnStatement.ts","webpack://QuickBASIC/./src/node/AstSelectStatement.ts","webpack://QuickBASIC/./src/node/AstSubroutine.ts","webpack://QuickBASIC/./src/node/AstUnaryOperator.ts","webpack://QuickBASIC/./src/node/AstWhileLoop.ts","webpack://QuickBASIC/./src/node/AstRange.ts","webpack://QuickBASIC/./src/node/AstDimStatement.ts","webpack://QuickBASIC/./src/node/AstProgram.ts","webpack://QuickBASIC/./src/node/AstDefTypeStatement.ts","webpack://QuickBASIC/./src/node/AstRestoreStatement.ts","webpack://QuickBASIC/./src/node/AstUserType.ts","webpack://QuickBASIC/./src/node/AstArrayDeref.ts","webpack://QuickBASIC/./src/CodeGenerator.ts","webpack://QuickBASIC/./src/virtualMachine/instructions/Instructions.ts","webpack://QuickBASIC/./src/ArrayVariable.ts","webpack://QuickBASIC/./src/Dimension.ts","webpack://QuickBASIC/./src/virtualMachine/instructions/instruction.ts","webpack://QuickBASIC/./src/Label.ts","webpack://QuickBASIC/./src/LoopContext.ts","webpack://QuickBASIC/./src/TypeChecker.ts","webpack://QuickBASIC/./src/TypeScope.ts","webpack://QuickBASIC/./src/CheckedLabel.ts","webpack://QuickBASIC/./src/CheckedLoopContext.ts","webpack://QuickBASIC/./src/types/IntegerType.ts","webpack://QuickBASIC/./src/types/SingleType.ts","webpack://QuickBASIC/./src/types/DoubleType.ts","webpack://QuickBASIC/./src/types/StringType.ts","webpack://QuickBASIC/./src/types/AnyType.ts","webpack://QuickBASIC/./src/DebugConsole.ts","webpack://QuickBASIC/./src/node/AstOpenStatement.ts","webpack://QuickBASIC/./src/virtualMachine/VirtualMachine.ts","webpack://QuickBASIC/./src/TraceBuffer.ts","webpack://QuickBASIC/./src/Console.ts","webpack://QuickBASIC/./src/ImageManipulator.ts","webpack://QuickBASIC/./src/CharacterImageGenerator.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","IsNumericType","type","IsArrayType","ArrayType","onProgram","symbols","location","program","AstProgram","AstSubroutine","dbg","printf","subs","statements","length","onNumber","AstConstantExpr","parseFloat","onString","substr","onBinaryOp","AstBinaryOp","onBracketExpr","_location","UseSecond","args","UseFirst","JoinListsLR","push","JoinLists","unshift","EmptyList","_args","Array","output","segments","split","undefined","UserType","NullType","type1","type2","elementType","accept","visitor","this","input","testMode","errors","callMap","Map","breakpoints","toByteCodeLineNumber","toSourceCodeLineNumber","fromSourceCodeLineNumberToProgramCounter","QBasicProgram","parser","rules","RuleParser","addRule","addToken","label","AstLabel","AstConstStatement","AstDeclareFunction","AstNullStatement","AstDefTypeStatement","shared","AstWhileLoop","AstDoStatement","INFINITE","WHILE_AT_END","UNTIL","AstForLoop","AstNextStatement","AstExitStatement","AstEndStatement","AstGosubStatement","AstGotoStatement","AstIfStatement","AstSelectStatement","AstCaseStatement","AstInputStatement","AstPrintStatement","AstOpenStatement","AstPrintUsingStatement","terminator","AstPrintItem","EXPR","TAB","AstRestoreStatement","AstReturnStatement","AstDataStatement","AstUserType","AstAssignStatement","AstCallStatement","AstDimStatement","AstRange","AstTypeMember","AstArgument","locus","AstUnaryOperator","AstMemberDeref","AstArrayDeref","AstVariableReference","buildSet","check","finalize","astProgram","parse","typeChecker","TypeChecker","codeGenerator","CodeGenerator","sourcecode","instructions","types","defaultType","data","lineMap","lineMapping","byteCode","getByteCodeAsString","setBreakpoints","byteCodeBreakpoints","map","getBreakpoints","getByteCode","clear","source","lines","line","instruction","toString","replace","set","join","ScriptSrc","code","cons","virtualMachine","run","canvas","click","focus","reset","print","enableCursor","DebugConsole","document","getElementById","Type","Location_1","Location","default","TreeNode_1","TreeNode","EarleyParser_1","EarleyParser","RuleParser_1","files","openFileFunc","fileNumber","func","buffer","file","position","lineNumber","column","index","getLineContent","lineContent","splits","getValue","result","setValue","copy","ScalarVariable","__importDefault","mod","Token","id","text","NextStateId","getNextStateId","POST_NEWLINE","PRE_NEWLINE","DIGIT_CHAR","ANY_CHAR","CharMatcher","mchar","match","ch","visitVariableReference","SystemFunctions","RND","minArgs","action","vm","stack","pop","lastRandomNumber","Math","random","CHR$","num","String","fromCharCode","INKEY$","getKeyFromBuffer","LEN","MID$","len","start","str","LEFT$","RIGHT$","TIMER","date","Date","getMilliseconds","getSeconds","getMinutes","getHours","PEEK","LCASE$","toLowerCase","UCASE$","toUpperCase","STR$","SPACE$","numSpaces","VAL","INT","floor","ABS","abs","SIN","sin","COS","cos","TAN","tan","ASIN","asin","ACOS","acos","ATN","atan","SQR","sqrt","EOF","getFile","lineCount","getLineCount","counter","seq","getIntegerPart","x","SystemSubroutines","BEEP","_vm","CLS","cls","RANDOMIZE","PLAY","SLEEP","SYSTEM","print_using","argCount","formatString","shift","values","format","splitPositions","end","exponential","includes","toExponential","Number","next","min","splitPosition","substring","integer","digit","parseInt","lastNum","slice","searchValue","integerPart","sign","toFixed","printUsing","spaces","LOCATE","col","row","locate","COLOR","bg","fg","color","READ","trace","dataPtr","createInstance","SCREEN","INPUT","argCountOrFileNumber","variable","suspend","resume","SWAP","lhs","rhs","temp","WIDTH","OPEN","openFile","SEEK","setSeekPosition","EarleyItem_1","Token_1","ruleSet","debug","tokenizer","createTokenizer","EPSILON","computeFirst","first","getNonTerminal","getRegexFromTerminal","terminal","isTerminal","symbol","isNonTerminal","j","states","EarleyItem","setText","token","nextToken","processedTo","predict","complete","scan","printState","EOF_TOKEN","evaluate","items","base","item","rule","pos","nonTerminal","addToState","_base","baseItems","prev","item_in","isFunction","hasBody","used","visitDeclareFunction","expr","visitPrintItem","visitDoStatement","pc","variables","StackFrame","Variable","NextId","members","user","newValue","compile2","setOpenFile","setFileStream","VirtualMachine","_Console","RuleSet_1","_this","nextRuleId","RuleSet","nameOpt","name2","re","Tokenizer_1","Rule_1","terminals","terminalsAdded","eatWhiteSpace","follow","joinExpr","size","ruleName","optimize","changed","replaceRule","innerExpr","newSymbols","splice","k","Rule","self","addFirst","ret","merge","destName","sourceName","computeFollow","name_1","f","name_2","Tokenizer","ignore","NfaState_1","Nfa_1","DfaState_1","CharMatcher_1","RangeMatcher_1","NfaState","listId","dfaCache","lineNumbers","IGNORE_TOKEN","finished","nfa","parseAlternation","eof","matchChar","peek","parseChar","parseRange","include","ranges","last","state","RangeMatcher","NFA","parseBasic","parseKleene","splitter","parseConcat","addState","nfaStateList","accepts","nfaState","lastList","nextState","dfaState","nfaStates","sort","a","b","DfaState","getLine","lineno","nextTokenInternal","rootDfa","startPosition","charMatcher","processed","range","NextRuleId","typeName","isArray","visitArgument","visitEndStatement","visitNullStatement","visitAssignStatement","op","visitBinaryOp","visitCallStatement","exprList","visitCaseStatement","visitConstStatement","what","visitExitStatement","visitConstantExpr","visitGosub","visitGotoStatement","promptExprOrfileNumber","printQuestionMark","identifiersOrReference","isLine","visitInputStatement","visitLabel","visitTypeMember","identifiers","visitNextStatement","visitDataStatement","identifier","startExpr","endExpr","stepExpr","visitForLoop","elseStatements","visitIfStatement","visitMemberDeref","printItems","visitPrintStatement","visitPrintUsingStatement","visitReturnStatement","cases","visitSelectStatement","isStatic","visitSubroutine","visitUnaryOperator","visitWhileLoop","lowerExpr","upperExpr","visitRange","visitDimStatement","mainSub","visitProgram","visitDefTypeStatement","visitRestoreStatement","visitUserType","parameters","visitArrayDeref","labels","labelMap","loopStack","selectStack","functionNames","lastLine","getGotoLabel","link","instr","addrLabel","arg","codeOffset","dataLabel","dataOffset","newLabel","basename","Label","labelid","labelId","write","Instructions","node","skipLabel","sub","_node","newline","reference","wantRef","forLabel","nextLabel","endLabel","LoopContext","ctx","context","where","constStatement","def","top","bottom","elseLabel","endSelect","okayLabel","visitOpenStatement","execute","step","Instruction","numArgs","getVariable","setVariable","frame","callstack","oldvariables","indexes","dimensions","access","deref","numDimensions","upper","lower","Dimension","ArrayVariable","setLineContent","FORLOOP","ForLoop","COPYTOP","CopyTop","RESTORE","Restore","POPVAL","PopVal","POP","Pop","PUSHREF","PushRef","PUSHVALUE","PushValue","PUSHTYPE","PushType","POPVAR","PopVar","NEW","New","END","End","UNARY_OP","UnaryOp","OperatorEquality","OperatorLessThan","OperatorLessThanOrEqual","OperatorGreaterThan","OperatorGreaterThanOrEqual","OperatorNotEquality","AND","And","OR","Or","OperatorPlus","OperatorMinus","OperatorMultiply","OperatorDivide","OperatorCaret","MOD","BZ","BNZ","JMP","CALL","GOSUB","RET","PUSHCONST","ARRAY_DEREF","MEMBER_DEREF","MEMBER_VALUE","ASSIGN","SYSCALL","_values","totalSize","getIndex","mult","assign","declaredSubs","scopes","TypeScope","labelsUsed","labelsDefined","INTEGER","IntegerType","SINGLE","SingleType","DOUBLE","DoubleType","STRING","StringType","ANY","AnyType","error","errorStr","sprintf","removeSuffix","getTypeFromVariableName","names","DeriveTypeNameFromVariable","astNode","nodes","declare","subError","checkCallArguments","AreTypesCompatible","argument","IsStringType","loop","CheckedLoopContext","exit","ref","IsUserType","_argument","returnStatement","restore","CheckedLabel","dim","ifStatement","select","caseStatement","member","userType","gotoStatement","gosub","binary","bad","unary","constructor","round","textarea","getText","resetText","convert","nosign","negative","pad","left","arguments","RegExp","substitution","string","exp","matches","strings","convCount","stringPosStart","stringPosEnd","matchPosEnd","newString","exec","lastIndex","precision","TraceBuffer","asyncronous","suspended","interval","INTERVAL_MS","instructionsPerInterval","printStack","isSuspended","clearInterval","synchronous","asynchronous","runOneInstruction","setInterval","runSome","e","scalar","pushScalar","MAX_LINES","cursorEnabled","cursorShown","cursorBackground","keyBuffer","hasFocus","curX","curY","y","rows","cols","charWidth","charHeight","inputMode","inputStr","inputPos","recorded","Colours","ScreenDimensions","1","width","height","2","3","4","7","8","9","10","11","12","13","tabIndex","getContext","setTransform","globalConsole","onkeydown","event","onKeyDown","preventDefault","onclick","style","borderColor","stopPropagation","_event","borderWidth","borderStyle","characterImageGenerator","fgcolourNum","bgcolourNum","bgcolour","fgcolour","onInputDone","recording","record","printError","setKeyBuffer","charCodeAt","screen","cursor","scale","x1","y1","x2","y2","strokeStyle","moveTo","lineTo","stroke","circle","radius","colour","aspect","save","translate","PI","beginPath","arc","step1","step2","getImageData","put","putImageData","paint","_x","_y","borderColour","_step","image","ImageManipulator","fillStyle","fillRect","scroll","drawImage","backup","keyCode","SpecialChars","37","38","39","40","enabled","toggleCursor","show","font","textBaseline","textAlign","toImage","imageData","clr","createElement","fontFamily","char","backgroundColor","fillText"],"mappings":"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","file":"QuickBASIC.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"QuickBASIC\"] = factory();\n\telse\n\t\troot[\"QuickBASIC\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","import { Location, RuleParser } from 'earley';\r\nimport EarleyParser from 'earley';\r\n\r\nimport { AstDeclareFunction } from './node/AstDeclareFunction';\r\nimport { AstArgument } from './node/AstArgument';\r\nimport { AstEndStatement } from './node/AstEndStatement';\r\nimport { AstNullStatement } from './node/AstNullStatement';\r\nimport { AstAssignStatement } from './node/AstAssignStatement';\r\nimport { AstBinaryOp } from './node/AstBinaryOp';\r\nimport { AstCallStatement } from './node/AstCallStatement';\r\nimport { AstCaseStatement } from './node/AstCaseStatement';\r\nimport { AstConstStatement } from './node/AstConstStatement';\r\nimport { AstExitStatement } from './node/AstExitStatement';\r\nimport { AstConstantExpr } from './node/AstConstantExpr';\r\nimport { AstGosubStatement } from './node/AstGosubStatement';\r\nimport { AstGotoStatement } from './node/AstGotoStatement';\r\nimport { AstInputStatement } from './node/AstInputStatement';\r\nimport { AstPrintItem } from './node/AstPrintItem';\r\nimport { AstLabel } from './node/AstLabel';\r\nimport { AstDoStatement } from './node/AstDoStatement';\r\nimport { AstTypeMember } from './node/AstTypeMember';\r\nimport { AstNextStatement } from './node/AstNextStatement';\r\nimport { AstDataStatement } from './node/AstDataStatement';\r\nimport { AstForLoop } from './node/AstForLoop';\r\nimport { AstIfStatement } from './node/AstIfStatement';\r\nimport { AstMemberDeref } from './node/AstMemberDeref';\r\nimport { AstPrintStatement } from './node/AstPrintStatement';\r\nimport { AstPrintUsingStatement } from './node/AstPrintUsingStatement';\r\nimport { AstReturnStatement } from './node/AstReturnStatement';\r\nimport { AstSelectStatement } from './node/AstSelectStatement';\r\nimport { AstSubroutine } from './node/AstSubroutine';\r\nimport { AstUnaryOperator } from './node/AstUnaryOperator';\r\nimport { AstVariableReference } from './node/AstVariableReference';\r\nimport { AstWhileLoop } from './node/AstWhileLoop';\r\nimport { AstRange } from './node/AstRange';\r\nimport { AstDimStatement } from './node/AstDimStatement';\r\nimport { AstProgram } from './node/AstProgram';\r\nimport { AstDefTypeStatement } from './node/AstDefTypeStatement';\r\nimport { AstRestoreStatement } from './node/AstRestoreStatement';\r\nimport { AstUserType } from './node/AstUserType';\r\nimport { AstArrayDeref } from './node/AstArrayDeref';\r\n\r\nimport { VirtualMachine } from './virtualMachine/VirtualMachine';\r\nimport { Instruction } from './virtualMachine/instructions/instruction';\r\nimport { CodeGenerator } from './CodeGenerator';\r\n\r\n// import { RuleParser } from \"./RuleParser\";\r\nimport { _Console } from './Console';\r\nimport { TypeChecker } from './TypeChecker';\r\n// import { Locus } from \"./Locus\";\r\nimport { UserType } from './UserType';\r\nimport { DebugConsole } from './DebugConsole';\r\n// import { Editor } from \"./Editor\";\r\nimport { Type } from './types/Type';\r\nimport { ArrayType } from './types/ArrayType';\r\nimport { NullType } from './types/NullType';\r\nimport { IStringDictionary } from './base/common/collections';\r\nimport { AstOpenStatement } from './node/AstOpenStatement';\r\n// import { number } from \"prop-types\";\r\n\r\n// import { selectBasicCodeTab } from \"../Tabs/Tabs\";\r\n// import { FileMenu } from \"../Menu/FileMenu\";\r\n// import { EditMenu } from \"../Menu/EditMenu\";\r\n// import { HelpMenu } from \"../Menu/HelpMenu\";\r\n// new FileMenu(document.getElementById(\"file-menu\")!, document.getElementById(\"file-menu-backdrop\")!, document.getElementById(\"file-menu-list\")!);\r\n// new EditMenu(document.getElementById(\"edit-menu\")!, document.getElementById(\"edit-menu-backdrop\")!, document.getElementById(\"edit-menu-list\")!);\r\n// new HelpMenu(document.getElementById(\"help-menu\")!, document.getElementById(\"help-menu-backdrop\")!, document.getElementById(\"help-menu-list\")!);\r\n\r\nexport function sprintf(...args: any[]) {\r\n  // var args = arguments;\r\n  if (args.length == 1 && args[0] instanceof Array) {\r\n    args = args[0];\r\n  }\r\n  const format = args[0];\r\n  let output = '';\r\n\r\n  const segments = format.split(/%[^%]/);\r\n  for (let i = 0; i < segments.length; i++) {\r\n    output += segments[i];\r\n    if (args[i + 1] !== undefined) {\r\n      output += args[i + 1];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// export var globalConsole: _Console;\r\n\r\n/**\r\n    Copyright 2010 Steve Hanov\r\n\r\n    This file is part of qb.js\r\n\r\n    qb.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    qb.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with qb.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n//#include <debug.js>\r\n\r\nexport function DeriveTypeNameFromVariable(name: string) {\r\n  switch (name[name.length - 1]) {\r\n    case '$':\r\n      return 'STRING';\r\n    case '%':\r\n      return 'INTEGER';\r\n    case '&':\r\n      return 'LONG';\r\n    case '#':\r\n      return 'DOUBLE';\r\n    case '!':\r\n      return 'SINGLE';\r\n  }\r\n  return null; // Must use default type from DEFINT or single.\r\n}\r\n\r\nexport function IsNumericType(type: Type) {\r\n  return (\r\n    type.name == 'INTEGER' || type.name == 'SINGLE' || type.name == 'DOUBLE'\r\n  );\r\n}\r\n\r\nexport function IsStringType(type: Type) {\r\n  return type.name == 'STRING';\r\n}\r\n\r\nexport function IsArrayType(type: Type) {\r\n  return type instanceof ArrayType;\r\n}\r\n\r\nexport function IsUserType(type: Type) {\r\n  return type instanceof UserType;\r\n}\r\n\r\nexport function IsNullType(type: Type) {\r\n  return type instanceof NullType;\r\n}\r\n\r\nexport function AreTypesCompatible(type1: Type, type2: Type) {\r\n  return (\r\n    type1.name == type2.name ||\r\n    (IsNumericType(type1) && IsNumericType(type2)) ||\r\n    (IsArrayType(type1) &&\r\n      IsArrayType(type2) &&\r\n      ((<any>type1).elementType.name == 'ANY' ||\r\n        (<any>type2).elementType.name == 'ANY')) ||\r\n    (!IsArrayType(type1) &&\r\n      !IsArrayType(type2) &&\r\n      (type1.name == 'ANY' || type2.name == 'ANY'))\r\n  );\r\n}\r\n\r\n/**\r\n    Copyright 2010 Steve Hanov\r\n\r\n    This file is part of qb.js\r\n\r\n    qb.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    qb.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with qb.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n//#include <debug.js>\r\n//#include <RuleParser.js>\r\n//#include <TypeChecker.js>\r\n//#include <CodeGenerator.js>\r\n//#include <EarleyParser.js>\r\n(<any>Array.prototype).accept = function(\r\n  visitor: any // You didn't see that.\r\n) {\r\n  for (let i = 0; i < this.length; i++) {\r\n    if (!this[i]) {\r\n      continue;\r\n    }\r\n    this[i].accept(visitor);\r\n  }\r\n};\r\n\r\nfunction onProgram(symbols: any, location: Location) {\r\n  const program = new AstProgram(\r\n    location,\r\n    new AstSubroutine(location, '_main', [], symbols[0], false)\r\n  );\r\n  dbg.printf(\r\n    'Program successfully parsed. %d statements.\\n',\r\n    program.subs[0].statements.length\r\n  );\r\n  return program;\r\n}\r\n\r\nfunction onNumber(symbols: any, location: Location) {\r\n  return new AstConstantExpr(location, parseFloat(symbols[0]));\r\n}\r\n\r\nfunction onString(symbols: any, location: Location) {\r\n  return new AstConstantExpr(\r\n    location,\r\n    symbols[0].substr(1, symbols[0].length - 2)\r\n  );\r\n}\r\n\r\nfunction onBinaryOp(symbols: any, location: Location) {\r\n  return new AstBinaryOp(location, symbols[0], symbols[1], symbols[2]);\r\n}\r\n\r\n//function onParamListInBrackets(symbols: any, _locus: Locus) {\r\n//    return symbols[1];\r\n//}\r\n\r\nfunction onBracketExpr(symbols: any, _location: Location) {\r\n  return symbols[1];\r\n}\r\n\r\nfunction UseSecond<T>(args: T[]) {\r\n  return args[1];\r\n}\r\n\r\nfunction UseFirst(args: string[]) {\r\n  return args[0];\r\n}\r\n\r\nfunction JoinListsLR(args: any) {\r\n  args[0].push(args[1]);\r\n  return args[0];\r\n}\r\n\r\nfunction JoinLists<T>(args: [T, T[]]) {\r\n  args[1].unshift(args[0]);\r\n  return args[1];\r\n}\r\n\r\nfunction EmptyList<T>(_args: T[]): T[] {\r\n  return [];\r\n}\r\n\r\n/** @constructor */\r\nexport class QBasicProgram {\r\n  public data: any;\r\n  public defaultType: Type;\r\n  public errors: string[] = [];\r\n  public instructions: Instruction[];\r\n  public lineMap: Location[];\r\n  public shared: any;\r\n  public sourcecode: string;\r\n  public types: IStringDictionary<Type>;\r\n  readonly callMap = new Map<number, { name: string; location: Location }>();\r\n  readonly codeGenerator: CodeGenerator;\r\n  static parser: EarleyParser; // = null;\r\n  private breakpoints: number[] = [];\r\n  private byteCode: string;\r\n  constructor(input: any, public testMode?: any) {\r\n    // this.errors = [];\r\n    // this.testMode = testMode;\r\n\r\n    // Create the parser if one doesn't already exist.\r\n    if (QBasicProgram.parser === undefined) {\r\n      const rules = new RuleParser(dbg);\r\n      rules.addRule('start: program');\r\n      rules.addToken('AND', 'AND');\r\n      rules.addToken('AS', 'AS');\r\n      rules.addToken('CASE', 'CASE');\r\n      rules.addToken('CONST', 'CONST');\r\n      rules.addToken('DATA', 'DATA');\r\n      rules.addToken('DECLARE', 'DECLARE');\r\n      rules.addToken('DEF', 'DEF');\r\n      rules.addToken('DEFINT', 'DEFINT');\r\n      rules.addToken('DIM', 'DIM');\r\n      rules.addToken('DO', 'DO');\r\n      rules.addToken('ELSE', 'ELSE');\r\n      rules.addToken('END', 'END');\r\n      rules.addToken('EXIT', 'EXIT');\r\n      rules.addToken('FOR', 'FOR');\r\n      rules.addToken('FUNCTION', 'FUNCTION');\r\n      rules.addToken('GOSUB', 'GOSUB');\r\n      rules.addToken('GOTO', 'GOTO');\r\n      rules.addToken('IF', 'IF');\r\n      rules.addToken('INPUT', 'INPUT');\r\n      rules.addToken('LINE', 'LINE');\r\n      rules.addToken('LOOP', 'LOOP');\r\n      rules.addToken('MOD', 'MOD');\r\n      rules.addToken('NEXT', 'NEXT');\r\n      rules.addToken('NOT', 'NOT');\r\n      rules.addToken('OR', 'OR');\r\n      rules.addToken('POKE', 'POKE');\r\n      rules.addToken('PRINT', 'PRINT');\r\n      rules.addToken('RESTORE', 'RESTORE');\r\n      rules.addToken('RETURN', 'RETURN');\r\n      rules.addToken('SEG', 'SEG');\r\n      rules.addToken('SELECT', 'SELECT');\r\n      rules.addToken('SHARED', 'SHARED');\r\n      rules.addToken('STATIC', 'STATIC');\r\n      rules.addToken('STEP', 'STEP');\r\n      rules.addToken('SUB', 'SUB');\r\n      rules.addToken('TAB', 'TAB');\r\n      rules.addToken('THEN', 'THEN');\r\n      rules.addToken('TO', 'TO');\r\n      rules.addToken('TYPE', 'TYPE');\r\n      rules.addToken('UNTIL', 'UNTIL');\r\n      rules.addToken('USING', 'USING');\r\n      rules.addToken('VIEW', 'VIEW');\r\n      rules.addToken('WEND', 'WEND');\r\n      rules.addToken('WHILE', 'WHILE');\r\n\r\n      rules.addToken('OPEN', 'OPEN');\r\n      rules.addToken('OUTPUT', 'OUTPUT');\r\n\r\n      rules.addToken('minus', '\\\\-');\r\n      rules.addToken('endl', '\\\\n');\r\n      rules.addToken('comment', \"'.*$\");\r\n      // rules.addToken(\"comment\", \"REM .*$\");\r\n      rules.addToken('hexconstant', '\\\\&H\\\\d+');\r\n      rules.addToken('floatconstant', '\\\\d*\\\\.\\\\d+');\r\n      // rules.addToken(\"intconstant\", \"-?\\\\d+\");\r\n      rules.addToken('intconstant', '\\\\d+');\r\n      rules.addToken('stringconstant', '\"[^\"]*\"');\r\n      rules.addToken('label', '^([a-zA-Z][a-zA-Z0-9_]*:|\\\\d+)');\r\n      rules.addToken('identifier', '[a-zA-Z_][a-zA-Z0-9_]*(\\\\$|%|#|&|!)?');\r\n\r\n      rules.addToken('filenumber', '\\\\#\\\\d+');\r\n      // rules.addToken(\"space\", \"\\\\s\");\r\n\r\n      rules.addRule('program: statements', onProgram);\r\n      rules.addRule('statements: statement*');\r\n      //rules.addRule( \"statement: intconstant istatement separator\" );\r\n      rules.addRule('statement: label istatement separator', function(\r\n        args: string[],\r\n        location: Location\r\n      ) {\r\n        let label = args[0];\r\n        if (label.substr(-1) == ':') {\r\n          label = label.substr(0, label.length - 1);\r\n        }\r\n        return [new AstLabel(location, label), args[1]];\r\n      });\r\n      rules.addRule('statement: label', function(\r\n        args: string[],\r\n        location: Location\r\n      ) {\r\n        let label = args[0];\r\n        if (label.substr(-1) == ':') {\r\n          label = label.substr(0, label.length - 1);\r\n        }\r\n        return new AstLabel(location, label);\r\n      });\r\n\r\n      rules.addRule('statement: istatement ? separator');\r\n      rules.addRule(\"istatement: CONST identifier '=' expr\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstConstStatement(location, args[1], args[3]);\r\n      });\r\n      rules.addRule('istatement: DECLARE FUNCTION identifier ArgList', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDeclareFunction(location, args[2], args[3], true);\r\n      });\r\n      rules.addRule('istatement: DECLARE SUB identifier ArgList', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDeclareFunction(location, args[2], args[3], false);\r\n      });\r\n      rules.addRule(\r\n        'istatement: SUB identifier ArgList STATIC? statements END SUB',\r\n        function(args: any, location: Location) {\r\n          return new AstSubroutine(\r\n            location,\r\n            args[1],\r\n            args[2],\r\n            args[4],\r\n            false,\r\n            args[3] !== null\r\n          );\r\n        }\r\n      );\r\n      rules.addRule(\r\n        'istatement: FUNCTION identifier ArgList statements END FUNCTION',\r\n        function(symbols: any, location: Location) {\r\n          return new AstSubroutine(\r\n            location,\r\n            symbols[1],\r\n            symbols[2],\r\n            symbols[3],\r\n            true\r\n          );\r\n        }\r\n      );\r\n      rules.addRule(\"istatement: DEF SEG ('=' expr)?\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstNullStatement(location);\r\n      });\r\n      rules.addRule(\"istatement: DEF identifier ArgList '=' expr\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstNullStatement(location);\r\n      });\r\n      rules.addRule('istatement: DEFINT identifier minus identifier', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        // TODO: Implement completely\r\n        return new AstDefTypeStatement(location, 'INTEGER');\r\n      });\r\n      rules.addRule('istatement: VIEW PRINT', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstNullStatement(location);\r\n      });\r\n      rules.addRule('istatement: DIM DimList', UseSecond);\r\n      rules.addRule('istatement: DIM SHARED DimList', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        for (let i = 0; i < args[2].length; i++) {\r\n          args[2][i].shared = true;\r\n        }\r\n        return args[2];\r\n      });\r\n      rules.addRule(\r\n        'istatement: WHILE expr separator statements WEND',\r\n        function(args: string[], location: Location) {\r\n          return new AstWhileLoop(location, args[1], args[3]);\r\n        }\r\n      );\r\n      rules.addRule('istatement: DO separator statements LOOP', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDoStatement(\r\n          location,\r\n          args[2],\r\n          null,\r\n          AstDoStatement.INFINITE\r\n        );\r\n      });\r\n      rules.addRule(\r\n        'istatement: DO separator statements LOOP WHILE expr',\r\n        function(args: any, location: Location) {\r\n          return new AstDoStatement(\r\n            location,\r\n            args[2],\r\n            args[5],\r\n            AstDoStatement.WHILE_AT_END\r\n          );\r\n        }\r\n      );\r\n      rules.addRule(\r\n        'istatement: DO separator statements LOOP UNTIL expr',\r\n        function(args: any, location: Location) {\r\n          return new AstDoStatement(\r\n            location,\r\n            args[2],\r\n            args[5],\r\n            AstDoStatement.UNTIL\r\n          );\r\n        }\r\n      );\r\n      rules.addRule(\r\n        'istatement: DO WHILE expr separator statements LOOP',\r\n        function(args: any, location: Location) {\r\n          return new AstWhileLoop(location, args[2], args[4]);\r\n        }\r\n      );\r\n      rules.addRule(\"istatement: FOR identifier '=' expr TO expr\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstForLoop(\r\n          location,\r\n          args[1],\r\n          args[3],\r\n          args[5],\r\n          new AstConstantExpr(location, 1)\r\n        );\r\n      });\r\n      rules.addRule(\r\n        \"istatement: FOR identifier '=' expr TO expr STEP expr\",\r\n        function(args: any, location: Location) {\r\n          return new AstForLoop(location, args[1], args[3], args[5], args[7]);\r\n        }\r\n      );\r\n      rules.addRule('istatement: NEXT identifiers?', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        if (args[1] === null) {\r\n          args[1] = [];\r\n        }\r\n        return new AstNextStatement(location, args[1]);\r\n      });\r\n      rules.addRule('istatement: EXIT (FOR|DO)', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstExitStatement(location, args[1]);\r\n      });\r\n      rules.addRule('identifiers: MoreIdentifiers* identifier', JoinListsLR);\r\n      rules.addRule(\"MoreIdentifiers: identifier ','\", UseFirst);\r\n      rules.addRule('istatement: END', function(\r\n        _args: string[],\r\n        location: Location\r\n      ) {\r\n        return new AstEndStatement(location);\r\n      });\r\n      rules.addRule('istatement: GOSUB identifier', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstGosubStatement(location, args[1]);\r\n      });\r\n      rules.addRule('istatement: GOTO identifier', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstGotoStatement(location, args[1]);\r\n      });\r\n      rules.addRule('istatement: IF expr THEN istatement', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstIfStatement(location, args[1], args[3], null);\r\n      });\r\n      rules.addRule(\r\n        'istatement: IF expr THEN separator statements ElseClause END IF',\r\n        function(args: any, location: Location) {\r\n          return new AstIfStatement(location, args[1], args[4], args[5]);\r\n        }\r\n      );\r\n      rules.addRule(\r\n        'ElseClause: ELSE IF expr THEN separator statements ElseClause',\r\n        function(args: any, location: Location) {\r\n          return new AstIfStatement(location, args[2], args[5], args[6]);\r\n        }\r\n      );\r\n\r\n      rules.addRule('ElseClause: ELSE statements', UseSecond);\r\n\r\n      rules.addRule('ElseClause:', function(args: any, location: Location) {\r\n        return new AstNullStatement(location);\r\n      });\r\n      rules.addRule(\r\n        'istatement: SELECT CASE expr separator case* END SELECT',\r\n        function(args: any, location: Location) {\r\n          return new AstSelectStatement(location, args[2], args[4]);\r\n        }\r\n      );\r\n\r\n      rules.addRule('case: CASE exprList separator statements', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstCaseStatement(location, args[1], args[3]);\r\n      });\r\n\r\n      rules.addRule('case: CASE ELSE separator statements', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstCaseStatement(location, [], args[3]);\r\n      });\r\n\r\n      rules.addRule('exprList: moreExpr* expr', JoinListsLR);\r\n\r\n      rules.addRule(\"moreExpr: expr ','\", UseFirst);\r\n\r\n      rules.addRule(\r\n        \"istatement: INPUT constant? (';'|',') identifiers\",\r\n        function(args: any, location: Location) {\r\n          return new AstInputStatement(\r\n            location,\r\n            args[1],\r\n            args[2] == ';',\r\n            args[3]\r\n          );\r\n        }\r\n      );\r\n\r\n      rules.addRule(\r\n        \"istatement: LINE? INPUT filenumber (';'|',') Reference\",\r\n        // (args: any, locus: Locus) => new AstInputStatement(locus, args[1], args[2] == ';', args[3])\r\n        (args: any, location: Location) =>\r\n          new AstInputStatement(\r\n            location,\r\n            args[2],\r\n            args[3] == ';',\r\n            args[4],\r\n            !!args[0]\r\n          )\r\n      );\r\n\r\n      rules.addRule(\r\n        \"istatement: PRINT filenumber (';'|',') PrintItems\",\r\n        (args: any, location: Location) =>\r\n          new AstPrintStatement(location, args[3], args[1])\r\n      );\r\n\r\n      rules.addRule('istatement: LINE? INPUT identifiers', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstInputStatement(location, null, false, args[2]);\r\n      });\r\n      rules.addRule(\"istatement: POKE expr ',' expr\", function(\r\n        _args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstNullStatement(location);\r\n      });\r\n\r\n      rules.addRule(\r\n        \"istatement: OPEN expr FOR ('INPUT'|'OUTPUT') AS filenumber\",\r\n        (args: any, location: Location) =>\r\n          new AstOpenStatement(location, args[1], args[3], args[5])\r\n      );\r\n\r\n      rules.addRule('istatement: PRINT', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstPrintStatement(location, []);\r\n      });\r\n      rules.addRule('istatement: PRINT PrintItems', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstPrintStatement(location, args[1]);\r\n      });\r\n      rules.addRule(\"istatement: PRINT USING [expr,';'] (';'|',')?\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstPrintUsingStatement(location, args[2], args[3]);\r\n      });\r\n      rules.addRule('PrintItems: PrintItem', function(\r\n        args: any,\r\n        _location: Location\r\n      ) {\r\n        return args;\r\n      });\r\n      rules.addRule(\r\n        \"PrintItems: MorePrintItems* PrintItem (';'|',')?\",\r\n        function(args: any, _location: Location) {\r\n          args[1].terminator = args[2];\r\n          args[0].push(args[1]);\r\n          return args[0];\r\n        }\r\n      );\r\n      rules.addRule(\"MorePrintItems: PrintItem (';'|',')\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        args[0].terminator = args[1];\r\n        return args[0];\r\n      });\r\n\r\n      rules.addRule('PrintItem: expr', function(args: any, location: Location) {\r\n        return new AstPrintItem(location, AstPrintItem.EXPR, args[0], null);\r\n      });\r\n\r\n      rules.addRule(\"PrintItem: TAB '\\\\(' expr '\\\\)'\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstPrintItem(location, AstPrintItem.TAB, args[2], null);\r\n      });\r\n\r\n      rules.addRule('PrintItem:', function(args: any, location: Location) {\r\n        return new AstPrintItem(location, AstPrintItem.EXPR, null, null);\r\n      });\r\n\r\n      // rules.addRule(\r\n      //   \"PrintItem: filenumber\",\r\n      //   (args: any, locus: Locus) =>\r\n      //     new AstPrintItem(locus, AstPrintItem.EXPR, args[0], null)\r\n      // );\r\n\r\n      rules.addRule('istatement: RESTORE identifier?', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstRestoreStatement(location, args[1]);\r\n      });\r\n      rules.addRule('istatement: RETURN', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstReturnStatement(location);\r\n      });\r\n      rules.addRule(\"istatement: DATA [DataConstant,',']\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDataStatement(location, args[1]);\r\n      });\r\n      rules.addRule('DataConstant: identifier', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstConstantExpr(location, args[0]);\r\n      });\r\n      rules.addRule('DataConstant: constant');\r\n      rules.addRule('DataConstant:', function(args: any, location: Location) {\r\n        return new AstConstantExpr(location, null);\r\n      });\r\n      rules.addRule(\r\n        'istatement: TYPE identifier separator TypeMembers END TYPE',\r\n        function(args: any, location: Location) {\r\n          return new AstUserType(location, args[1], args[3]);\r\n        }\r\n      );\r\n      rules.addRule('istatement: AssignStatement');\r\n      rules.addRule(\"AssignStatement: ReferenceList '=' expr2\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstAssignStatement(location, args[0], args[2]);\r\n      });\r\n      rules.addRule('istatement: identifier Parameters', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstCallStatement(location, args[0], args[1]);\r\n      });\r\n      rules.addRule('Parameters: ', EmptyList);\r\n      rules.addRule(\"Parameters: '\\\\(' ParameterList '\\\\)'\", UseSecond);\r\n      rules.addRule('Parameters: ParameterList');\r\n      rules.addRule(\"ParameterList: [Parameter,',']\");\r\n      rules.addRule('Parameter: expr');\r\n      rules.addRule('Parameter:', function(args: any, location: Location) {\r\n        return new AstConstantExpr(location, null);\r\n      });\r\n\r\n      rules.addRule(\r\n        'Parameter: filenumber',\r\n        (args: any, location: Location) =>\r\n          new AstConstantExpr(location, args[0])\r\n      );\r\n\r\n      rules.addRule('DimList: Dim MoreDims*', JoinLists);\r\n      rules.addRule(\"MoreDims: ',' Dim\", UseSecond);\r\n      rules.addRule('Dim: identifier AsType?', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDimStatement(location, args[0], [], args[1]);\r\n      });\r\n      rules.addRule(\"Dim: identifier '\\\\(' RangeList '\\\\)' AsType?\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstDimStatement(location, args[0], args[2], args[4]);\r\n      });\r\n      rules.addRule('AsType: AS identifier', UseSecond);\r\n      rules.addRule('RangeList:', function(\r\n        args: any,\r\n        _location: Location\r\n      ): any {\r\n        return null;\r\n      });\r\n      rules.addRule('RangeList: Range MoreRanges*', JoinLists);\r\n      rules.addRule(\"MoreRanges: ',' Range\", UseSecond);\r\n      rules.addRule('Range: expr EndRange?', function(\r\n        symbols: any,\r\n        location: Location\r\n      ) {\r\n        if (symbols[1]) {\r\n          return new AstRange(location, symbols[0], symbols[1]);\r\n        } else {\r\n          return new AstRange(\r\n            location,\r\n            new AstConstantExpr(location, 0),\r\n            symbols[0]\r\n          );\r\n        }\r\n      });\r\n      rules.addRule('EndRange: TO expr', UseSecond);\r\n      rules.addRule('TypeMembers: TypeMember*');\r\n      rules.addRule('TypeMember: identifier AS identifier separator', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstTypeMember(location, args[0], args[2]);\r\n      });\r\n      rules.addRule('ArgList:', function(_args: any, _location: Location): any {\r\n        return [];\r\n      });\r\n      rules.addRule(\"ArgList: '\\\\(' [ Argument , ',' ] '\\\\)'\", function(\r\n        args: any,\r\n        _location: Location\r\n      ) {\r\n        return args[1];\r\n      });\r\n      rules.addRule('Argument: identifier OptParen? AS identifier', function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstArgument(location, args[0], args[3], args[1] !== null);\r\n      });\r\n      rules.addRule('Argument: identifier OptParen?', function(\r\n        args: any,\r\n        locus: any\r\n      ) {\r\n        return new AstArgument(locus, args[0], null, args[1] !== null);\r\n      });\r\n      rules.addRule(\"OptParen: '\\\\(' '\\\\)'\");\r\n      rules.addRule('expr: expr2');\r\n      rules.addRule('expr2: expr2 OR expr3', onBinaryOp);\r\n      rules.addRule('expr2: expr3');\r\n      rules.addRule('expr3: expr3 AND expr4', onBinaryOp);\r\n      rules.addRule('expr3: expr4');\r\n      rules.addRule(\"expr4: expr4 '=' expr5\", onBinaryOp);\r\n      rules.addRule(\"expr4: expr4 '<>' expr5\", onBinaryOp);\r\n      rules.addRule(\"expr4: expr4 '>' expr5\", onBinaryOp);\r\n      rules.addRule(\"expr4: expr4 '<' expr5\", onBinaryOp);\r\n      rules.addRule(\"expr4: expr4 '<=' expr5\", onBinaryOp);\r\n      rules.addRule(\"expr4: expr4 '>=' expr5\", onBinaryOp);\r\n      rules.addRule('expr4: expr5');\r\n      rules.addRule('expr5: expr5 MOD expr6', onBinaryOp);\r\n      rules.addRule('expr5: expr6');\r\n      rules.addRule(\"expr6: expr6 '\\\\+' expr7\", onBinaryOp);\r\n      rules.addRule(\"expr6: expr6 '\\\\-' expr7\", onBinaryOp);\r\n      rules.addRule('expr6: expr7');\r\n      rules.addRule(\"expr7: expr7 '\\\\*' expr8\", onBinaryOp);\r\n      rules.addRule(\"expr7: expr7 '\\\\/' expr8\", onBinaryOp);\r\n      rules.addRule(\"expr7: expr7 '\\\\^' expr8\", onBinaryOp);\r\n      rules.addRule('expr7: expr8');\r\n      rules.addRule(\"expr8: '\\\\(' expr '\\\\)'\", onBracketExpr);\r\n      //rules.addRule( \"expr8: expr8 '\\\\.' expr10\", onBinaryOp );\r\n      rules.addRule('expr8: NOT expr9', function(\r\n        args: string[],\r\n        location: Location\r\n      ) {\r\n        return new AstUnaryOperator(location, 'NOT', args[1]);\r\n      });\r\n      rules.addRule(\"expr8: '\\\\-' expr9\", function(\r\n        args: string[],\r\n        location: Location\r\n      ) {\r\n        return new AstUnaryOperator(location, '-', args[1]);\r\n      });\r\n      rules.addRule('expr8: expr9');\r\n      rules.addRule('expr9: constant');\r\n      rules.addRule('expr9: expr10');\r\n      rules.addRule('expr10: ReferenceList');\r\n      rules.addRule('constant: hexconstant', onNumber);\r\n      rules.addRule('constant: intconstant', onNumber);\r\n      rules.addRule('constant: floatconstant', onNumber);\r\n      rules.addRule('constant: stringconstant', onString);\r\n      rules.addRule(\"ReferenceList: ReferenceList '\\\\.' identifier\", function(\r\n        args: any,\r\n        location: Location\r\n      ) {\r\n        return new AstMemberDeref(location, args[0], args[2]);\r\n      });\r\n\r\n      rules.addRule(\r\n        \"ReferenceList: ReferenceList '\\\\(' ParameterList '\\\\)'\",\r\n        function(args: any, locus: any) {\r\n          return new AstArrayDeref(locus, args[0], args[2]);\r\n        }\r\n      );\r\n      rules.addRule('ReferenceList: Reference');\r\n      rules.addRule('Reference: identifier', function(args: any, locus: any) {\r\n        return new AstVariableReference(locus, args[0]);\r\n      });\r\n\r\n      rules.addRule('separator: endl+');\r\n      rules.addRule('separator: comment endl');\r\n      rules.addRule(\"separator: ':'\");\r\n\r\n      rules.buildSet.check(this.errors);\r\n      for (let i = 0; i < this.errors.length; i++) {\r\n        dbg.printf('%s\\n', this.errors[i]);\r\n      }\r\n\r\n      rules.buildSet.finalize();\r\n\r\n      QBasicProgram.parser = new EarleyParser(rules.buildSet, dbg);\r\n      //QBasicProgram.parser.debug = true;\r\n    }\r\n\r\n    input += '\\n'; // parse doesn't handle no newline at end of input.\r\n\r\n    // Parse the program into abstract syntax tree.\r\n    const astProgram = QBasicProgram.parser.parse(input);\r\n    if (astProgram === null) {\r\n      this.errors = QBasicProgram.parser.errors;\r\n      dbg.printf('Parse failed.\\n');\r\n      return;\r\n    }\r\n\r\n    // Perform type checking.\r\n    const typeChecker = new TypeChecker(this.errors);\r\n    astProgram.accept(typeChecker);\r\n\r\n    if (this.errors.length > 0) {\r\n      dbg.printf('There were errors.\\n');\r\n      return;\r\n    }\r\n\r\n    // Perform code generation.\r\n    const codeGenerator = new CodeGenerator();\r\n    this.codeGenerator = codeGenerator;\r\n    astProgram.accept(codeGenerator);\r\n\r\n    this.sourcecode = input;\r\n    this.instructions = codeGenerator.instructions;\r\n    this.types = typeChecker.types;\r\n    this.defaultType = typeChecker.defaultType;\r\n    this.data = codeGenerator.data;\r\n    this.shared = codeGenerator.shared;\r\n    this.lineMap = codeGenerator.lineMapping;\r\n    this.callMap = codeGenerator.callMap;\r\n\r\n    this.byteCode = this.getByteCodeAsString();\r\n  }\r\n\r\n  public setBreakpoints(breakpoints: number[]) {\r\n    const byteCodeBreakpoints = breakpoints.map(value =>\r\n      this.fromSourceCodeLineNumberToProgramCounter.get(value - 1)\r\n    );\r\n    this.breakpoints = byteCodeBreakpoints;\r\n  }\r\n\r\n  public getBreakpoints() {\r\n    return this.breakpoints;\r\n  }\r\n\r\n  public getByteCode() {\r\n    return this.byteCode;\r\n  }\r\n  // QBasicProgram.parser = null;\r\n\r\n  readonly toByteCodeLineNumber = new Map<number, number>();\r\n  readonly toSourceCodeLineNumber = new Map<number, number>();\r\n  readonly fromSourceCodeLineNumberToProgramCounter = new Map<number, number>();\r\n  // public fromPC(pc: number) {\r\n  //   return {\r\n  //     toLineNumber: () => {\r\n  //       return this.toLineNumber.get(pc);\r\n  //     }\r\n  //   };\r\n  // }\r\n  private getByteCodeAsString() {\r\n    this.toByteCodeLineNumber.clear();\r\n    this.toSourceCodeLineNumber.clear();\r\n    this.fromSourceCodeLineNumberToProgramCounter.clear();\r\n\r\n    if (!this.instructions) {\r\n      return '';\r\n    }\r\n    const source = this.sourcecode.split('\\n');\r\n    const lines: string[] = [];\r\n    let location: Location;\r\n    for (let i = 0; i < this.instructions.length; i++) {\r\n      location = this.lineMap[i] ? this.lineMap[i] : location;\r\n      if (this.lineMap[i]) {\r\n        lines.push(\r\n          \"   ' L\" + (location.line + 1) + ' ' + source[location.line]\r\n        );\r\n      }\r\n\r\n      const instruction = this.instructions[i].toString().replace('\\n', '↵');\r\n      lines.push('[' + i + '] ' + instruction);\r\n      this.toByteCodeLineNumber.set(i, lines.length - 1);\r\n      this.toSourceCodeLineNumber.set(i, location.line);\r\n      this.fromSourceCodeLineNumberToProgramCounter.set(location.line, i);\r\n    }\r\n\r\n    return lines.join('\\n');\r\n  }\r\n}\r\n\r\nexport const ScriptSrc = (function(/*scripts*/) {\r\n  // const scripts = document.getElementsByTagName(\"script\"),\r\n  //   script = scripts[scripts.length - 1];\r\n  // if (script.getAttribute.length !== undefined) {\r\n  //   var src = script.src;\r\n  // } else {\r\n  //   var src = <string>script.getAttribute(\"src\" /*, -1*/);\r\n  // }\r\n  // const i = src.lastIndexOf(\"/\");\r\n  // if (i >= 0) {\r\n  //   src = src.substr(0, i + 1);\r\n  // } else {\r\n  //   src = \"\";\r\n  // }\r\n  // return src;\r\n})();\r\n\r\n// var tabs = new TabView();\r\n//var cons = new _Console();\r\n//var virtualMachine = new VirtualMachine(cons);\r\n\r\n//function getFile(strUrl: string) {\r\n//    var xmlHttpReq = new XMLHttpRequest();\r\n\r\n//    xmlHttpReq.open('GET', strUrl, false);\r\n//    xmlHttpReq.send(\"\");\r\n//    return xmlHttpReq.responseText;\r\n//}\r\n\r\n//function codes(str: string) {\r\n//    var c: any;\r\n//    for (var i = 0; i < str.length; i++) {\r\n//        c += \" \" + str.charCodeAt(i);\r\n//    }\r\n//    return c;\r\n//}\r\n\r\n//function tests() {\r\n//    var passed = [];\r\n//    var failed = [];\r\n\r\n//    function separateTests(testfile: any) {\r\n//        var tests = [];\r\n//        var lines = testfile.split(\"\\n\");\r\n\r\n//        var test: { name?: string, expected?: string, input?: string, inkeys?: string, errors?: string } = null;\r\n\r\n//        // for each line,\r\n//        for (var i = 0; i < lines.length; i++) {\r\n\r\n//            // if line begins with 'NAME:\r\n//            if (lines[i].indexOf(\"'ERROR:\") == 0) {\r\n//                test.errors += lines[i].substr(7) + \"\\n\";\r\n//            } else if (lines[i].indexOf(\"'NAME:\") == 0) {\r\n\r\n//                // if we have a test,\r\n//                if (test) {\r\n//                    // save current test.\r\n//                    tests.push(test);\r\n//                }\r\n//                // set test name.\r\n//                test = {};\r\n//                test.name = lines[i].substr(6);\r\n//                test.expected = \"\";\r\n//                test.input = \"\";\r\n//                test.inkeys = \"\";\r\n//                test.errors = \"\";\r\n\r\n//                // if line begins with \"'#\"\r\n//            } else if (lines[i].indexOf(\"'INKEYS:\") == 0) {\r\n//                // add to expected output.\r\n//                test.inkeys += lines[i].substr(8);\r\n\r\n//            } else if (lines[i].indexOf(\"'#\") == 0) {\r\n//                // add to expected output.\r\n//                test.expected += lines[i].substr(2) + \"\\n\";\r\n\r\n//            } else {\r\n//                // add to test input file.\r\n//                test.input += lines[i] + \"\\n\";\r\n//            }\r\n//        }\r\n\r\n//        if (test) {\r\n//            tests.push(test);\r\n//        }\r\n\r\n//        // return results.\r\n//        return tests;\r\n//    }\r\n//    var tests = separateTests(getFile(\"tests.bas\"));\r\n//    for (var i = 0; i < tests.length; i++) {\r\n//        cons.print(\"Run test \" + tests[i].name + \"\\n\");\r\n//        dbg.printf(\"----------------------------------------------\\n\");\r\n//        dbg.printf(\"Run test \" + tests[i].name + \"\\n\");\r\n//        if (tests[i].errors == \"\") {\r\n//            cons.recording = true;\r\n//            cons.recorded = \"\";\r\n//            cons.setKeyBuffer(tests[i].inkeys);\r\n//            var program = new QBasicProgram(tests[i].input, true);\r\n//            if (program.errors.length) {\r\n//                dbg.printf(\"Program failed to parse.\\n%s\",\r\n//                    program.errors.join(\"\\n\"));\r\n//            } else {\r\n//                virtualMachine.run(program, true);\r\n//            }\r\n//            if (cons.recorded === tests[i].expected) {\r\n//                passed.push(tests[i].name);\r\n//            } else {\r\n//                dbg.printf(\"Expected: '%s'\\n\", tests[i].expected);\r\n//                dbg.printf(\"Got: '%s'\\n\", cons.recorded);\r\n//                failed.push(tests[i].name);\r\n//            }\r\n//        } else {\r\n//            // just syntax check.\r\n//            var program = new QBasicProgram(tests[i].input, true);\r\n\r\n//            var errorStr = program.errors.join(\"\\n\") + \"\\n\";\r\n//            cons.print(errorStr);\r\n//            if (errorStr == tests[i].errors) {\r\n//                passed.push(tests[i].name);\r\n//            } else {\r\n//                dbg.printf(\"Failed! Expected error '%s'\\n\",\r\n//                    tests[i].errors);\r\n//                dbg.printf(\".........But got......:'%s'\\n\",\r\n//                    errorStr);\r\n\r\n//                failed.push(tests[i].name);\r\n//            }\r\n//        }\r\n//    }\r\n\r\n//    cons.print(\"Done running tests.\\n\");\r\n//    for (var i = 0; i < failed.length; i++) {\r\n//        dbg.printf(\"Failed: %s\\n\", failed[i]);\r\n//    }\r\n//}\r\n\r\nexport function compile(\r\n  code: string,\r\n  cons: _Console,\r\n  virtualMachine: VirtualMachine\r\n) {\r\n  // var text = editor.getValue();//(<HTMLTextAreaElement>document.getElementById(\"sourcecode\")).value;\r\n  const program = new QBasicProgram(code);\r\n\r\n  if (program.errors.length === 0) {\r\n    // (<HTMLTextAreaElement>document.getElementById(\"bytecode\")).value = program.getByteCodeAsString();\r\n    // bytecode.setValue(program.getByteCodeAsString());\r\n    virtualMachine.run(program, false);\r\n\r\n    cons.canvas.click();\r\n    cons.canvas.focus();\r\n    return true;\r\n  }\r\n\r\n  virtualMachine.reset(null);\r\n  for (let i = 0; i < program.errors.length; i++) {\r\n    cons.print(program.errors[i] + '\\n');\r\n    dbg.print(program.errors[i] + '\\n');\r\n  }\r\n  cons.enableCursor(true);\r\n\r\n  // tabs.selectTab(0);\r\n  // $(cons.canvas).click();\r\n  cons.canvas.click();\r\n  // $(cons.canvas).focus();\r\n  cons.canvas.focus();\r\n}\r\n\r\nexport function compile2(code: string) {\r\n  const program = new QBasicProgram(code);\r\n  return program;\r\n}\r\n\r\n// tabs.selectTab(1);\r\n// var input = getFile(\"test.txt\");\r\n//(<HTMLTextAreaElement>document.getElementById(\"sourcecode\")).value = input;\r\n\r\n// create debug area\r\n// document.write(\"<div id='debug'></div>\");\r\nexport const dbg = new DebugConsole(<HTMLTextAreaElement>(\r\n  document.getElementById('footer')\r\n));\r\n//var editor = (<any>window).monaco.editor.create(document.getElementById(\"sourcecode\"), {\r\n//    value: input\r\n//});\r\n\r\n// export var editor = new Editor(document.getElementById(\"editor\"), { value: input, theme: \"vs-dark\", });\r\n// var bytecode = new Editor(document.getElementById(\"bytecode\"), { readOnly: true, theme: \"vs-dark\", });\r\n\r\n// GUI\r\n//let canvas = document.getElementById(\"canvas\");\r\n//let screenElement = document.getElementById(\"screen\");\r\n//export function onResize() {\r\n//    // editor.layout();\r\n//    // bytecode.layout();\r\n\r\n//    let rect = screenElement.getBoundingClientRect();\r\n//    if (rect.width < rect.height * (640 / 400)) {\r\n//        canvas.style.width = rect.width + \"px\";\r\n//        canvas.style.height = rect.width * (400 / 640) + \"px\";\r\n//        return;\r\n//    }\r\n//    canvas.style.height = rect.height + \"px\";\r\n//    canvas.style.width = rect.height * (640 / 400) + \"px\";\r\n//}\r\n\r\n//window.addEventListener(\"resize\", () => {\r\n//    onResize();\r\n//});\r\n\r\n//setTimeout(() => {\r\n//    selectBasicCodeTab();\r\n//}, 200);\r\n","export abstract class Type {\r\n  name: string;\r\n}\r\n","\"use strict\";\r\n// export { default as VirtualList } from \"./components/VirtualList\";\r\n// export { ItemStyle } from \"./components/VirtualList\";\r\n// export { ALIGNMENT } from \"./components/constants\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Location_1 = require(\"./Location\");\r\nexports.Location = Location_1.default;\r\nvar TreeNode_1 = require(\"./TreeNode\");\r\nexports.TreeNode = TreeNode_1.default;\r\nvar EarleyParser_1 = require(\"./EarleyParser\");\r\nexports.default = EarleyParser_1.EarleyParser;\r\nvar RuleParser_1 = require(\"./RuleParser\");\r\nexports.RuleParser = RuleParser_1.RuleParser;\r\n//# sourceMappingURL=index.js.map","import { IStringDictionary } from '../base/common/collections';\r\n\r\ninterface Position {\r\n  lineNumber: number;\r\n  column: number;\r\n}\r\n\r\ninterface Buffer {\r\n  getValue: () => string;\r\n  setValue: (value: string) => void;\r\n  getLineContent: (lineNumber: number) => string;\r\n  getLineCount: () => number;\r\n}\r\n\r\ninterface FileStream {\r\n  // view: View;\r\n  buffer: Buffer;\r\n  position: Position;\r\n}\r\n\r\nconst files: IStringDictionary<FileStream> = {};\r\n\r\n// let tabGroups: Group[];\r\n// export function setTabGroups(grougps: Group[]) {\r\n//   tabGroups = grougps;\r\n// }\r\n\r\nlet openFileFunc = (name: string, fileNumber: string) => {};\r\n\r\nexport function openFile(name: string, fileNumber: string) {\r\n  openFileFunc(name, fileNumber);\r\n}\r\nexport function setOpenFile(func: (name: string, fileNumber: string) => void) {\r\n  openFileFunc = func;\r\n}\r\n\r\nexport function setFileStream(buffer: Buffer, fileNumber: string) {\r\n  const file: FileStream = {\r\n    buffer: buffer,\r\n    position: { lineNumber: 1, column: 0 }\r\n  };\r\n  files[fileNumber] = file;\r\n}\r\n// export function openFile(name: string, fileNumber: string) {\r\n//   // let tabGroups = appStore.getTabGroups();\r\n//   for (const group of tabGroups) {\r\n//     for (const view of group.views) {\r\n//       if (view.getName() === name) {\r\n//         const file: FileStream = {\r\n//           view: view,\r\n//           position: { lineNumber: 1, column: 0 }\r\n//         };\r\n//         files[fileNumber] = file;\r\n//         return;\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\nexport function getFile(fileNumber: string) {\r\n  return files[fileNumber];\r\n}\r\n\r\nexport function getLineContent(index: string, lineNumber: number) {\r\n  const file = files[index];\r\n  const buffer = file.buffer;\r\n  const lineContent = buffer.getLineContent(lineNumber);\r\n  return lineContent;\r\n}\r\n\r\nexport function setLineContent(index: string, lineContent: string) {\r\n  const file = files[index];\r\n  const lineNumber = file.position.lineNumber;\r\n  // const buffer = file.view.file.getBuffer();\r\n  // const lineContent = buffer.getLineContent(lineNumber);\r\n  const value = file.buffer.getValue();\r\n  const splits = value.split(/\\n/);\r\n\r\n  if (splits.length < lineNumber) {\r\n    for (let i = 0; i < lineNumber - splits.length; ++i) splits.push('');\r\n  }\r\n  splits[lineNumber - 1] = lineContent;\r\n  // ToDo : もっとシンプルに！\r\n  const result = splits.join('\\n');\r\n  // buffer.setValue(result);\r\n  file.buffer.setValue(result);\r\n  file.position.lineNumber++;\r\n}\r\n\r\nexport function setSeekPosition(index: string, position: Position) {\r\n  const fileStream = files[index];\r\n  fileStream.position = position;\r\n}\r\n","import { Type } from './types/Type';\r\nimport { NullType } from './types/NullType';\r\nimport Variable from './Variable';\r\n\r\nexport class ScalarVariable extends Variable {\r\n  /** @constructor */\r\n  public constructor(\r\n    public type: Type,\r\n    public value: number | string | NullType | null\r\n  ) {\r\n    super();\r\n    // this.type = type;\r\n    // this.value = value;\r\n  }\r\n\r\n  copy() {\r\n    return new ScalarVariable(this.type, (<any>this.type).copy(this.value));\r\n  }\r\n}\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Location_1 = __importDefault(require(\"./Location\"));\r\nvar Token = /** @class */ (function () {\r\n    /** @constructor */\r\n    function Token(id, text, line, position) {\r\n        this.id = id;\r\n        this.text = text;\r\n        this.location = new Location_1.default(line, position);\r\n    }\r\n    Token.prototype.toString = function () {\r\n        return 'Token(' + this.text + ')';\r\n    };\r\n    return Token;\r\n}());\r\nexports.Token = Token;\r\n//# sourceMappingURL=Token.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NextStateId = 0;\r\nfunction getNextStateId() {\r\n    return NextStateId++;\r\n}\r\nexports.getNextStateId = getNextStateId;\r\nexports.POST_NEWLINE = -1;\r\nexports.PRE_NEWLINE = -2;\r\nexports.DIGIT_CHAR = -3;\r\nexports.ANY_CHAR = -4;\r\n/**\r\n  When the match function is called, it will return true if the argument\r\n  matches a particular character.\r\n\r\n  @constructor\r\n */\r\nvar CharMatcher = /** @class */ (function () {\r\n    function CharMatcher(mchar) {\r\n        this.mchar = mchar;\r\n    }\r\n    CharMatcher.prototype.match = function (ch) {\r\n        //dbg.printf(\"Compare %s with %s\\n\", this.mchar, ch );\r\n        if (this.mchar == exports.DIGIT_CHAR) {\r\n            return ch >= '0' && ch <= '9';\r\n        }\r\n        else if (this.mchar == exports.ANY_CHAR) {\r\n            return ch !== exports.POST_NEWLINE && ch !== exports.PRE_NEWLINE && ch != '\\n';\r\n        }\r\n        else {\r\n            return ch == this.mchar;\r\n        }\r\n    };\r\n    CharMatcher.prototype.toString = function () {\r\n        if (this.mchar == exports.DIGIT_CHAR) {\r\n            return '\\\\d';\r\n        }\r\n        else {\r\n            return this.mchar;\r\n        }\r\n    };\r\n    return CharMatcher;\r\n}());\r\nexports.CharMatcher = CharMatcher;\r\n//# sourceMappingURL=CharMatcher.js.map","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstVariableReference {\r\n  type?: Type;\r\n  wantRef?: boolean;\r\n  constructor(public location: Location, public name: string) {\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitVariableReference(this);\r\n  }\r\n}\r\n","import { VirtualMachine } from './virtualMachine/VirtualMachine';\r\nimport { IStringDictionary } from './base/common/collections';\r\n\r\nimport { getFile } from './file/file';\r\n\r\n/**\r\n    Defines the functions that can be called from a basic program. Functions\r\n    must return a value. System subs, which do not return a value, are defined\r\n    elsewhere. Some BASIC keywords, such as SCREEN, are both a function and a\r\n    sub, and may do different things in the two contexts.\r\n\r\n    Each entry is indexed by function name. The record contains:\r\n\r\n    type: The name of the type of the return value of the function.\r\n\r\n    args: An array of names of types of each argument.\r\n\r\n    minArgs: the number of arguments required.\r\n\r\n    action: A function taking the virtual machine as an argument. To implement\r\n    the function, it should pop its arguments off the stack, and push its\r\n    return value onto the stack. If minArgs <> args.length, then the top of the\r\n    stack is an integer variable that indicates how many arguments were passed\r\n    to the function.\r\n */\r\n\r\nexport interface ISystemFunction {\r\n  type: string;\r\n  args: string[];\r\n  minArgs: number;\r\n  action(vm: VirtualMachine): void;\r\n  name?: string;\r\n}\r\nexport const SystemFunctions: IStringDictionary<ISystemFunction> = {\r\n  RND: {\r\n    type: 'SINGLE',\r\n    args: ['INTEGER'],\r\n    minArgs: 0,\r\n    action: function(vm: VirtualMachine) {\r\n      const numArgs = vm.stack.pop();\r\n      let n = 1;\r\n      if (numArgs == 1) {\r\n        n = <number>vm.stack.pop();\r\n      }\r\n      if (n === 0) {\r\n        vm.stack.push(vm.lastRandomNumber);\r\n      } else {\r\n        vm.stack.push(Math.random());\r\n      }\r\n    }\r\n  },\r\n\r\n  CHR$: {\r\n    type: 'STRING',\r\n    args: ['INTEGER'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const num = <number>vm.stack.pop();\r\n      vm.stack.push(String.fromCharCode(num));\r\n    }\r\n  },\r\n\r\n  INKEY$: {\r\n    type: 'STRING',\r\n    args: [],\r\n    minArgs: 0,\r\n    action: function(vm: VirtualMachine) {\r\n      const code = vm.cons.getKeyFromBuffer();\r\n      let result = '';\r\n\r\n      if (code != -1) {\r\n        result = String.fromCharCode(code);\r\n        if (code === 0) {\r\n          result += String.fromCharCode(vm.cons.getKeyFromBuffer());\r\n        }\r\n      }\r\n\r\n      vm.stack.push(result);\r\n    }\r\n  },\r\n\r\n  LEN: {\r\n    type: 'INTEGER',\r\n    args: ['STRING'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      vm.stack.push((<string>vm.stack.pop()).length);\r\n    }\r\n  },\r\n\r\n  MID$: {\r\n    type: 'STRING',\r\n    args: ['STRING', 'INTEGER', 'INTEGER'],\r\n    minArgs: 2,\r\n    action: function(vm: VirtualMachine) {\r\n      const numArgs = vm.stack.pop();\r\n      let len: any;\r\n      if (numArgs == 3) {\r\n        len = vm.stack.pop();\r\n      }\r\n      const start = <number>vm.stack.pop();\r\n      const str = <string>vm.stack.pop();\r\n      vm.stack.push(str.substr(start - 1, len));\r\n    }\r\n  },\r\n\r\n  LEFT$: {\r\n    type: 'STRING',\r\n    args: ['STRING', 'INTEGER'],\r\n    minArgs: 2,\r\n    action: function(vm: VirtualMachine) {\r\n      const num = <number>vm.stack.pop();\r\n      const str = <string>vm.stack.pop();\r\n      vm.stack.push(str.substr(0, num));\r\n    }\r\n  },\r\n\r\n  RIGHT$: {\r\n    type: 'STRING',\r\n    args: ['STRING', 'INTEGER'],\r\n    minArgs: 2,\r\n    action: function(vm: VirtualMachine) {\r\n      const num = <number>vm.stack.pop();\r\n      const str = <string>vm.stack.pop();\r\n      vm.stack.push(str.substr(str.length - num));\r\n    }\r\n  },\r\n\r\n  TIMER: {\r\n    type: 'INTEGER',\r\n    args: [],\r\n    minArgs: 0,\r\n    action: function(vm: VirtualMachine) {\r\n      // return number of seconds since midnight. DEVIATION: We return a\r\n      // floating point value rather than an integer, so that nibbles\r\n      // will work properly when its timing loop returns a value less\r\n      // than one second.\r\n      const date = new Date();\r\n\r\n      const result =\r\n        date.getMilliseconds() / 1000 +\r\n        date.getSeconds() +\r\n        date.getMinutes() * 60 +\r\n        date.getHours() * 60 * 60;\r\n\r\n      vm.stack.push(result);\r\n    }\r\n  },\r\n\r\n  PEEK: {\r\n    type: 'INTEGER',\r\n    args: ['INTEGER'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      // pop one argument off the stack and replace it with 0.\r\n      vm.stack.pop();\r\n      vm.stack.push(0);\r\n    }\r\n  },\r\n\r\n  LCASE$: {\r\n    type: 'STRING',\r\n    args: ['STRING'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const str = <string>vm.stack.pop();\r\n      vm.stack.push(str.toLowerCase());\r\n    }\r\n  },\r\n\r\n  UCASE$: {\r\n    type: 'STRING',\r\n    args: ['STRING'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      vm.stack.push((<string>vm.stack.pop()).toUpperCase());\r\n    }\r\n  },\r\n\r\n  STR$: {\r\n    type: 'STRING',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const num = vm.stack.pop();\r\n      vm.stack.push('' + num);\r\n    }\r\n  },\r\n\r\n  SPACE$: {\r\n    type: 'STRING',\r\n    args: ['INTEGER'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const numSpaces = vm.stack.pop();\r\n      let str = '';\r\n      for (let i = 0; i < numSpaces; i++) {\r\n        str += ' ';\r\n      }\r\n      vm.stack.push(str);\r\n    }\r\n  },\r\n\r\n  VAL: {\r\n    type: 'SINGLE',\r\n    args: ['STRING'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      vm.stack.push(parseFloat(<string>vm.stack.pop()));\r\n    }\r\n  },\r\n  INT: {\r\n    type: 'INTEGER',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      vm.stack.push(Math.floor(<number>vm.stack.pop()));\r\n    }\r\n  },\r\n  ABS: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.abs(value));\r\n    }\r\n  },\r\n  SIN: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.sin(value));\r\n    }\r\n  },\r\n  COS: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.cos(value));\r\n    }\r\n  },\r\n  TAN: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.tan(value));\r\n    }\r\n  },\r\n  ASIN: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.asin(value));\r\n    }\r\n  },\r\n  ACOS: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.acos(value));\r\n    }\r\n  },\r\n  ATN: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      vm.stack.push(Math.atan(value));\r\n    }\r\n  },\r\n\r\n  SQR: {\r\n    type: 'SINGLE',\r\n    args: ['SINGLE'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const value = vm.stack.pop() as number;\r\n      // Returns the square root of a numeric expression.\r\n      vm.stack.push(Math.sqrt(value));\r\n    }\r\n  },\r\n\r\n  EOF: {\r\n    type: 'INTEGER',\r\n    args: ['STRING'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const fileNumber = vm.stack.pop() as string;\r\n      // Returns the square root of a numeric expression.\r\n      // vm.stack.push(Math.sqrt(value));\r\n      const file = getFile(fileNumber);\r\n      // const lineCount = file.view.file.getBuffer().getLineCount();\r\n      const lineCount = file.buffer.getLineCount();\r\n      if (file.position.lineNumber > lineCount) {\r\n        vm.stack.push(1);\r\n        return;\r\n      }\r\n      vm.stack.push(0);\r\n    }\r\n  }\r\n};\r\n","import { VirtualMachine } from './virtualMachine/VirtualMachine';\r\n// import { dbg, IsNumericType } from \"./qb\";\r\nimport { ScalarVariable } from './ScalarVariable';\r\nimport { IStringDictionary } from './base/common/collections';\r\nimport { openFile, getFile, setSeekPosition } from './file/file';\r\n\r\n// 文字列中に含まれるある文字の個数を返す\r\nconst counter = (str: string, seq: string) => str.split(seq).length - 1;\r\nconst getIntegerPart = (x: number) => String(x).split('.')[0];\r\n// const getFractionalPart = (x: number) => String(x).split(\".\")[(1];\r\nfunction printUsing(format: string, values: number[]) {\r\n  const splitPositions: ([number, number])[] = [];\r\n  let start = 0;\r\n  let end = 0;\r\n  let exponential = '';\r\n\r\n  if (format.includes('^^^^')) {\r\n    const str = values[0].toExponential();\r\n    const splits = str.split('e');\r\n    values[0] = Number(splits[0]);\r\n    exponential = 'E' + splits[1];\r\n    format = format.replace('^^^^', '');\r\n  }\r\n\r\n  for (let i = 0; i < format.length; ++i) {\r\n    let ch = format[i];\r\n    let next = format[i + 1];\r\n    if (ch === '#' || (ch === '+' && next === '#')) {\r\n      start = i;\r\n      for (++i; i < format.length; ++i) {\r\n        ch = format[i];\r\n        if (ch === '#') {\r\n          continue;\r\n        }\r\n\r\n        if (ch === '.') {\r\n          for (++i; i < format.length; ++i) {\r\n            ch = format[i];\r\n            if (ch === '#') {\r\n              continue;\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n        end = i;\r\n        break;\r\n      }\r\n\r\n      for (; i < format.length; ++i) {\r\n        ch = format[i];\r\n        next = format[i + 1];\r\n        if (ch === '#') {\r\n          continue;\r\n        }\r\n\r\n        if (ch === ',' && next == '#') {\r\n          continue;\r\n        }\r\n\r\n        break;\r\n      }\r\n      end = Math.min(i, format.length);\r\n    } else {\r\n      continue;\r\n    }\r\n    splitPositions.push([start, end]);\r\n  }\r\n\r\n  for (const splitPosition of splitPositions) {\r\n    const value = values.shift();\r\n\r\n    let str = format.substring(splitPosition[0], splitPosition[1]);\r\n    // ##,###,###\r\n    if (value && str.includes(',')) {\r\n      let integer = getIntegerPart(value);\r\n      const digit = counter(str, '#');\r\n\r\n      if (digit > parseInt(integer, 10).toString().length) {\r\n        for (\r\n          let i = 0;\r\n          i < digit - parseInt(integer, 10).toString().length;\r\n          ++i\r\n        ) {\r\n          integer = ' ' + integer;\r\n        }\r\n      } else if (parseInt(integer, 10) > digit) {\r\n        for (\r\n          let i = 0;\r\n          i < parseInt(integer, 10).toString().length - digit;\r\n          ++i\r\n        ) {\r\n          str = '#' + str;\r\n        }\r\n      }\r\n\r\n      let result = '';\r\n      let lastNum = ' ';\r\n      for (let i = 0; i < str.length; ++i) {\r\n        const ch = str[i];\r\n\r\n        if (ch === '#') {\r\n          const num = integer[0];\r\n          result += num;\r\n          lastNum = num;\r\n          integer = integer.slice(1);\r\n          continue;\r\n        }\r\n        if (ch === ',') {\r\n          if (lastNum === ' ') {\r\n            result += ' ';\r\n            continue;\r\n          }\r\n\r\n          result += ','; // + result;\r\n        }\r\n      }\r\n      const searchValue = format.substring(splitPosition[0], splitPosition[1]);\r\n      format = format.replace(searchValue, result);\r\n      continue;\r\n    }\r\n\r\n    // ##.###\r\n    if (value) {\r\n      let str = format.substring(splitPosition[0], splitPosition[1]);\r\n      const integerPart = getIntegerPart(value);\r\n      // const fractionalPart = getFractionalPart(x);\r\n\r\n      const digit = integerPart.length;\r\n      let sign = '';\r\n      if (str[0] === '+') {\r\n        if (Number(integerPart) >= 0) {\r\n          sign = '+';\r\n        } else {\r\n          sign = '-';\r\n        }\r\n        str = str.substring(1);\r\n      }\r\n\r\n      const splits = str.split('.');\r\n\r\n      let result = '';\r\n      if (digit > splits[0].length) {\r\n        result = '%' + integerPart;\r\n      } else {\r\n        for (let i = 0; i < splits[0].length - digit; ++i) {\r\n          result += ' ';\r\n        }\r\n        result += integerPart;\r\n      }\r\n      if (splits.length > 1) {\r\n        result += '.';\r\n        result += value.toFixed(splits[1].length).split('.')[1];\r\n      }\r\n\r\n      result = sign + result;\r\n      const searchValue = format.substring(splitPosition[0], splitPosition[1]);\r\n      format = format.replace(searchValue, result) + exponential;\r\n    }\r\n  }\r\n\r\n  return format;\r\n}\r\n/**\r\n    Defines the system subroutines that can be called from a basic program.\r\n    Functions must return a value. System functions, which return a value, are\r\n    defined elsewhere.\r\n\r\n    Each entry is indexed by the name of the subroutine. The record contains:\r\n\r\n    args: An array of names of types of each argument.\r\n\r\n    minArgs: (optional) the number of arguments required.\r\n\r\n    action: A function taking the virtual machine as an argument. To implement\r\n    the function, it should pop its arguments off the stack, and push its\r\n    return value onto the stack. If minArgs is present, and not equal to \r\n    args.length, then the top of the stack is an integer variable that\r\n    indicates how many arguments were passed to the function.\r\n */\r\nexport interface ISystemSubroutine {\r\n  args?: string[];\r\n  minArgs?: number;\r\n\r\n  action(vm: VirtualMachine): void;\r\n}\r\n\r\nexport const SystemSubroutines: IStringDictionary<ISystemSubroutine> = {\r\n  BEEP: {\r\n    action: function(_vm: VirtualMachine) {\r\n      // NOT IMPLEMENTED\r\n    }\r\n  },\r\n\r\n  CLS: {\r\n    action: function(vm: VirtualMachine) {\r\n      // clears the console screen.\r\n      vm.cons.cls();\r\n    }\r\n  },\r\n\r\n  RANDOMIZE: {\r\n    action: function(vm: VirtualMachine) {\r\n      // NOT IMPLEMENTED. Seeding the random number generator\r\n      // is not possible using the built-in Javascript functions.\r\n      vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  PLAY: {\r\n    action: function(vm: VirtualMachine) {\r\n      // NOT IMPLEMENTED\r\n      vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  SLEEP: {\r\n    action: function(vm: VirtualMachine) {\r\n      // NOT IMPLEMENTED\r\n      vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  SYSTEM: {\r\n    action: function(_vm: VirtualMachine) {\r\n      // NOT IMPLEMENTED\r\n      //vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  print_using: {\r\n    action: function(vm: VirtualMachine) {\r\n      // pop # args\r\n      const argCount = vm.stack.pop() as number;\r\n\r\n      // pop terminator\r\n      const terminator = vm.stack.pop();\r\n\r\n      const args: any[] = [];\r\n      for (let i = 0; i < argCount - 1; i++) {\r\n        args.unshift(vm.stack.pop());\r\n      }\r\n\r\n      const formatString = args.shift().value;\r\n\r\n      // var curArg = 0;\r\n\r\n      //const getIntegerPart = (x: number) => (x > 0) ? Math.floor(x) : Math.ceil();\r\n      //const getFractionalPart = (n: number) => { }\r\n\r\n      const values: number[] = [];\r\n      for (let i = 0; i < args.length; ++i) {\r\n        if (typeof args[i] === 'number') {\r\n          values.push(args[i]);\r\n          continue;\r\n        }\r\n        values.push(args[i].value);\r\n      }\r\n      //for (let i = 0; i < args.length; ++i) {\r\n      //  result.push(printUsing(formatString, values));\r\n      //  // console.log(test);\r\n      //}\r\n\r\n      const output = printUsing(formatString, values);\r\n      // for each character in the string,\r\n      //for (var pos = 0; pos < formatString.length; pos++) {\r\n      //  var ch = formatString.charAt(pos);\r\n\r\n      //  // if the character is '#',\r\n      //  if (ch === '#') {\r\n      //    // if out of arguments, then type mismatch error.\r\n      //    if (curArg === args.length ||\r\n      //      !IsNumericType(args[curArg].type)) {\r\n      //      // TODO: errors.\r\n      //      dbg.printf(\"Type mismatch error.\\n\");\r\n      //      break;\r\n      //    }\r\n\r\n      //    // store character position\r\n      //    var backup_pos = pos;\r\n      //    var digitCount = 0;\r\n      //    // for each character of the string,\r\n      //    for (; pos < formatString.length; pos++) {\r\n      //      ch = formatString.charAt(pos);\r\n      //      // if the character is '#',\r\n      //      if (ch === '#') {\r\n      //        // increase digit count\r\n      //        digitCount++;\r\n\r\n      //        // if the character is ','\r\n      //      } else if (ch === ',') {\r\n      //        // do nothing\r\n      //      } else {\r\n      //        // break out of loop\r\n      //        break;\r\n      //      }\r\n      //    }\r\n\r\n      //    // convert current arg to a string. Truncate or pad to\r\n      //    // appropriate number of digits.\r\n      //    var argAsString = \"\" + args[curArg].value;\r\n      //    if (argAsString.length > digitCount) {\r\n      //      argAsString = argAsString.substr(argAsString.length -\r\n      //        digitCount);\r\n      //    } else {\r\n      //      while (argAsString.length < digitCount) {\r\n      //        argAsString = \" \" + argAsString;\r\n      //      }\r\n      //    }\r\n\r\n      //    var curDigit = 0;\r\n\r\n      //    // go back to old character position.\r\n      //    // for each character of the string,\r\n      //    for (pos = backup_pos; pos < formatString.length; pos++) {\r\n      //      ch = formatString.charAt(pos);\r\n      //      // if the character is a '#'\r\n      //      if (ch === '#') {\r\n      //        // output the next digit.\r\n      //        output += argAsString[curDigit++];\r\n      //        // if the character is a ',',\r\n      //      } else if (ch === ',') {\r\n      //        // output a comma.\r\n      //        output += ch;\r\n      //      } else {\r\n      //        // break out.\r\n      //        break;\r\n      //      }\r\n      //    }\r\n\r\n      //    // increment current argument.\r\n      //    curArg += 1;\r\n      //    pos -= 1;\r\n      //  } else {\r\n      //    // character was not #. output it verbatim.\r\n      //    output += ch;\r\n      //  }\r\n      //}\r\n\r\n      vm.cons.print(output);\r\n      if (terminator === ',') {\r\n        let x = vm.cons.x;\r\n        let spaces = '';\r\n        while (++x % 14) {\r\n          spaces += ' ';\r\n        }\r\n        vm.cons.print(spaces);\r\n      } else if (terminator !== ';') {\r\n        vm.cons.print('\\n');\r\n      }\r\n    }\r\n  },\r\n\r\n  LOCATE: {\r\n    args: ['INTEGER', 'INTEGER'],\r\n    action: function(vm: VirtualMachine) {\r\n      const col = (<ScalarVariable>vm.stack.pop()).value;\r\n      const row = (<ScalarVariable>vm.stack.pop()).value;\r\n      vm.cons.locate(<number>row, <number>col);\r\n    }\r\n  },\r\n\r\n  COLOR: {\r\n    args: ['ANY', 'ANY'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const argCount = vm.stack.pop();\r\n\r\n      let bg;\r\n      if (argCount == 2) {\r\n        bg = (<ScalarVariable>vm.stack.pop()).value;\r\n      }\r\n      const fg = (<ScalarVariable>vm.stack.pop()).value;\r\n      vm.cons.color(<number>fg, <any>bg);\r\n    }\r\n  },\r\n\r\n  READ: {\r\n    // Actually, arguments must be STRING or NUMBER, but there is no way to\r\n    // indicate that to the type checker at the moment.\r\n    args: ['ANY', 'ANY'],\r\n    minArgs: 1,\r\n    action: function(vm: VirtualMachine) {\r\n      const argCount = vm.stack.pop();\r\n      const args: any[] = [];\r\n      let i;\r\n\r\n      for (i = 0; i < argCount; i++) {\r\n        args.unshift(vm.stack.pop());\r\n      }\r\n\r\n      // TODO: out of data error.\r\n      for (i = 0; i < argCount; i++) {\r\n        vm.trace.printf('READ %s\\n', vm.data[vm.dataPtr]);\r\n        args[i].value = vm.data[vm.dataPtr++];\r\n        if (args[i].value === null) {\r\n          // user specified ,, in a data statement\r\n          args[i].value = args[i].type.createInstance();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  SCREEN: {\r\n    action: function(vm: VirtualMachine) {\r\n      // TODO: NOT IMPLEMENTED\r\n      vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  INPUT: {\r\n    action: function(vm: VirtualMachine) {\r\n      // TODO: Support multiple arguments. Convert strings input by the\r\n      // user to numbers.\r\n      const argCountOrFileNumber = vm.stack.pop();\r\n\r\n      if (typeof argCountOrFileNumber === 'string') {\r\n        const fileNumber = argCountOrFileNumber as string;\r\n        const variable = vm.stack.pop() as ScalarVariable;\r\n        const file = getFile(fileNumber);\r\n\r\n        // const buffer = file.view.file.getBuffer();\r\n        const isLine = vm.stack.pop() as number;\r\n        if (isLine) {\r\n          // variable.value =  splits[file.seekPosition.lineNumber++];\r\n          variable.value = file.buffer.getLineContent(\r\n            file.position.lineNumber++\r\n          );\r\n          return;\r\n        }\r\n        const value = file.buffer.getValue();\r\n        const splits = value.split(/\\n/);\r\n        // ToDo : もっとシンプルに！\r\n        const result = splits.slice(file.position.lineNumber);\r\n        variable.value = result.join('\\n');\r\n        file.position.lineNumber += result.length;\r\n        return;\r\n      }\r\n\r\n      const argCount = argCountOrFileNumber as number;\r\n      const args: any[] = [];\r\n\r\n      vm.trace.printf('Argcount=%s\\n', argCount);\r\n\r\n      for (let i = 0; i < argCount; i++) {\r\n        args.unshift(vm.stack.pop());\r\n      }\r\n\r\n      vm.suspend();\r\n\r\n      vm.cons.input(function(result: any) {\r\n        vm.resume();\r\n        args[0].value = result;\r\n      });\r\n    }\r\n  },\r\n\r\n  SWAP: {\r\n    action: function(vm: VirtualMachine) {\r\n      const lhs = <ScalarVariable>vm.stack.pop();\r\n      const rhs = <ScalarVariable>vm.stack.pop();\r\n      const temp = lhs.value;\r\n      lhs.value = rhs.value;\r\n      rhs.value = temp;\r\n      // TODO: Type checking.\r\n    }\r\n  },\r\n\r\n  WIDTH: {\r\n    action: function(vm: VirtualMachine) {\r\n      // TODO: NOT IMPLEMENTED\r\n      vm.stack.pop();\r\n      vm.stack.pop();\r\n    }\r\n  },\r\n\r\n  OPEN: {\r\n    action: function(vm: VirtualMachine) {\r\n      const fileNumber = vm.stack.pop() as string;\r\n      const mode = vm.stack.pop() as string;\r\n      const file = vm.stack.pop() as string;\r\n\r\n      openFile(file, fileNumber);\r\n    }\r\n  },\r\n  SEEK: {\r\n    action: function(vm: VirtualMachine) {\r\n      const column = vm.stack.pop() as ScalarVariable;\r\n      const lineNumber = vm.stack.pop() as ScalarVariable;\r\n      const fileNumber = vm.stack.pop() as ScalarVariable;\r\n\r\n      setSeekPosition(fileNumber.value as string, {\r\n        lineNumber: lineNumber.value as number,\r\n        column: column.value as number\r\n      });\r\n    }\r\n  }\r\n};\r\n","\"use strict\";\r\n/**\r\n  Represents a location in the source file. (The name \"location\" cannot be used\r\n  because it has a special meaning in browsers.) This is used throughout the\r\n  compiler to map program statements to token positions.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Location = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param line\r\n     * @param position\r\n     */\r\n    function Location(line, position) {\r\n        this.line = line;\r\n        this.position = position;\r\n    }\r\n    Location.prototype.toString = function () {\r\n        var line = this.line;\r\n        var position = this.position;\r\n        return line + 1 + \":\" + (position + 1);\r\n    };\r\n    return Location;\r\n}());\r\nexports.default = Location;\r\n//# sourceMappingURL=Location.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EarleyItem_1 = require(\"./EarleyItem\");\r\nvar Token_1 = require(\"./Token\");\r\n/**\r\n  The Earley parser is like the proverbial tortoise. Its simplicity lets slowly\r\n  but surely it chug through any grammar you throw its way.\r\n\r\n  @constructor\r\n */\r\nvar EarleyParser = /** @class */ (function () {\r\n    // dbg: IDebugConsole;\r\n    function EarleyParser(ruleSet, dbg) {\r\n        this.dbg = dbg;\r\n        this.errors = [];\r\n        this.debug = false; //true;\r\n        // Map from rule name to NFA.\r\n        this.tokenizer = ruleSet.createTokenizer(dbg);\r\n        this.EPSILON = ruleSet.EPSILON;\r\n        ruleSet.computeFirst();\r\n        this.rules = ruleSet.rules;\r\n        this.first = ruleSet.first;\r\n        //this.debug = true;\r\n    }\r\n    EarleyParser.prototype.getNonTerminal = function (name) {\r\n        return this.rules[name];\r\n    };\r\n    EarleyParser.prototype.getRegexFromTerminal = function (terminal) {\r\n        return terminal.substr(1, terminal.length - 2);\r\n    };\r\n    EarleyParser.prototype.isTerminal = function (symbol) {\r\n        return symbol !== undefined && symbol[0] == \"'\";\r\n    };\r\n    EarleyParser.prototype.isNonTerminal = function (symbol) {\r\n        return symbol !== undefined && symbol[0] != \"'\";\r\n    };\r\n    EarleyParser.prototype.parse = function (text) {\r\n        var dbg = this.dbg;\r\n        var states = [[new EarleyItem_1.EarleyItem(this.rules['_start'][0], 0, 0)]];\r\n        var line = 0;\r\n        var position = 0;\r\n        var j;\r\n        this.tokenizer.setText(text);\r\n        this.errors = [];\r\n        for (var i = 0;; i++) {\r\n            var token = this.tokenizer.nextToken(line, position);\r\n            if (token === null) {\r\n                this.errors.push(\"Bad token at \" + line + \":\" + position + \"\\n\");\r\n                dbg.printf('Bad token!\\n');\r\n                return null;\r\n            }\r\n            else if (this.debug) {\r\n                dbg.printf('Got token %s at %s\\n', token, token.location);\r\n            }\r\n            this.location = token.location;\r\n            states.push([]);\r\n            var processedTo = 0;\r\n            while (processedTo < states[i].length) {\r\n                // remain calm\r\n                this.predict(states[i], processedTo, i, token);\r\n                this.complete(states, i, processedTo, i);\r\n                processedTo++;\r\n            }\r\n            this.scan(states, i, token);\r\n            if (states[i].length === 0) {\r\n                this.errors.push(\"Syntax error at \" + this.location + \": \" + token);\r\n                for (j = 0; j < states[i - 1].length; j++) {\r\n                    this.errors.push(\"    \" + states[i - 1][j] + \"\\n\");\r\n                }\r\n                break;\r\n            }\r\n            if (this.debug) {\r\n                this.printState(states, i);\r\n            }\r\n            line = token.location.line;\r\n            position = token.location.position + token.text.length;\r\n            if (token.id === this.tokenizer.EOF_TOKEN) {\r\n                //dbg.printf(\"Reached end of input.\\n\");\r\n                i++;\r\n                break;\r\n            }\r\n        }\r\n        if (this.debug) {\r\n            this.printState(states, i);\r\n        }\r\n        if (states[i].length) {\r\n            return this.evaluate(states[i][0]);\r\n        }\r\n        this.errors.push(\"Syntax error at \" + this.location);\r\n        for (j = 0; j < states[i - 1].length; j++) {\r\n            this.errors.push(\"    \" + states[i - 1][j] + \"\\n\");\r\n        }\r\n        return null;\r\n    };\r\n    EarleyParser.prototype.predict = function (items, index, base, token) {\r\n        var item = items[index];\r\n        if (this.isNonTerminal(item.rule.symbols[item.pos])) {\r\n            var nonTerminal = this.getNonTerminal(item.rule.symbols[item.pos]);\r\n            for (var i = 0; i < nonTerminal.length; i++) {\r\n                var rule = nonTerminal[i];\r\n                if (rule.symbols.length === 0 ||\r\n                    rule.symbols[0][0] === \"'\" ||\r\n                    this.first[rule.symbols[0]][token.id] ||\r\n                    this.first[rule.symbols[0]][this.EPSILON]) {\r\n                    this.addToState(items, rule, 0, base, undefined, undefined);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    EarleyParser.prototype.complete = function (states, i, index, _base) {\r\n        var item = states[i][index];\r\n        if (item.pos == item.rule.symbols.length) {\r\n            var baseItems = states[item.base];\r\n            for (var j = 0; j < baseItems.length; j++) {\r\n                if (baseItems[j].rule.symbols[baseItems[j].pos] == item.rule.name) {\r\n                    this.addToState(states[i], baseItems[j].rule, baseItems[j].pos + 1, baseItems[j].base, item, baseItems[j]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    EarleyParser.prototype.scan = function (states, i, token) {\r\n        var items = states[i];\r\n        for (var j = 0; j < items.length; j++) {\r\n            if (items[j].rule.symbols[items[j].pos] == token.id) {\r\n                states[i + 1].push(new EarleyItem_1.EarleyItem(items[j].rule, items[j].pos + 1, items[j].base, token, items[j], this.location));\r\n            }\r\n        }\r\n    };\r\n    EarleyParser.prototype.addToState = function (items, rule, pos, base, token, prev) {\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].rule === rule &&\r\n                items[i].pos === pos &&\r\n                items[i].base === base) {\r\n                return;\r\n            }\r\n        }\r\n        items.push(new EarleyItem_1.EarleyItem(rule, pos, base, token, prev, this.location));\r\n    };\r\n    EarleyParser.prototype.printState = function (states, index) {\r\n        var dbg = this.dbg;\r\n        if (!this.debug) {\r\n            return;\r\n        }\r\n        var items = states[index];\r\n        dbg.printf('State [%d]\\n', index);\r\n        for (var i = 0; i < items.length; i++) {\r\n            dbg.printf('%s\\n', items[i]);\r\n        }\r\n        dbg.printf('\\n');\r\n    };\r\n    // ----------------------------------------------------------------------\r\n    // Given an earley item, reconstruct the dervation and invoke any associated\r\n    // actions.\r\n    // ----------------------------------------------------------------------\r\n    EarleyParser.prototype.evaluate = function (item_in) {\r\n        if (!item_in) {\r\n            return null;\r\n        }\r\n        var args = [];\r\n        var item = item_in;\r\n        var location = item_in.location;\r\n        while (item) {\r\n            if (item.token instanceof Token_1.Token) {\r\n                args.unshift(item.token.text);\r\n            }\r\n            else if (item.token) {\r\n                args.unshift(this.evaluate(item.token));\r\n            }\r\n            location = item.location;\r\n            item = item.prev;\r\n        }\r\n        var result;\r\n        if (item_in.rule.action) {\r\n            result = item_in.rule.action(args, location);\r\n        }\r\n        else {\r\n            result = args[0];\r\n        }\r\n        return result;\r\n    };\r\n    return EarleyParser;\r\n}());\r\nexports.EarleyParser = EarleyParser;\r\n//# sourceMappingURL=EarleyParser.js.map","import { Location } from 'earley';\r\nimport { AstArgument } from './AstArgument';\r\n/** @constructor */\r\nexport class AstDeclareFunction {\r\n  type: any = null; // calculated later\r\n  hasBody = false; // Set to true during type checking if sub is later\r\n  used = false;\r\n  constructor(\r\n    public location: Location,\r\n    public name: string,\r\n    public args: AstArgument[],\r\n    public isFunction: boolean\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n    // this.args = args; // array of AstArgument\r\n    // this.isFunction = isFunction;\r\n    this.type = null; // calculated later\r\n    this.hasBody = false; // Set to true during type checking if sub is later\r\n    // implemented.\r\n    this.used = false;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitDeclareFunction(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstPrintItem {\r\n  static readonly EXPR = 0;\r\n  static readonly TAB = 1;\r\n  constructor(\r\n    public location: Location,\r\n    public type: number,\r\n    public expr: any,\r\n    public terminator: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // Type: 0 for expr, 1 for tab, in which case expr is the argument.\r\n    // this.type = type;\r\n    // this.expr = expr; // can be null!\r\n    // this.terminator = terminator; // comma, semicolon, or nothing.\r\n  }\r\n\r\n  // AstPrintItem.EXPR = 0;\r\n  // AstPrintItem.TAB = 1;\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitPrintItem(this);\r\n  }\r\n}\r\n","import { IDoStatementVisitor } from '../IVisitor';\r\nimport { Location } from 'earley';\r\n\r\n//enum DoType {\r\n//}\r\n\r\n/** @constructor */\r\nexport class AstDoStatement {\r\n  static readonly INFINITE = 1;\r\n  static readonly UNTIL = 2;\r\n  static readonly WHILE_AT_END = 3;\r\n  constructor(\r\n    public location: Location,\r\n    public statements: any,\r\n    public expr: any,\r\n    public type: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.statements = statements;\r\n    // this.expr = expr;\r\n    // this.type = type;\r\n  }\r\n\r\n  //AstDoStatement.INFINITE = 1;\r\n  //AstDoStatement.UNTIL = 2;\r\n  //AstDoStatement.WHILE_AT_END = 3;\r\n\r\n  accept(visitor: IDoStatementVisitor) {\r\n    visitor.visitDoStatement(this);\r\n  }\r\n}\r\n","import { IStringDictionary } from './base/common/collections';\r\nimport { ScalarVariable } from './ScalarVariable';\r\nimport { ArrayVariable } from './ArrayVariable';\r\n\r\nexport interface IStackFrame {\r\n  pc: number;\r\n}\r\n\r\n/** @constructor */\r\nexport class StackFrame {\r\n  public variables: IStringDictionary<ScalarVariable | ArrayVariable> = {};\r\n  constructor(readonly pc: number) {\r\n    // Address to return to when the subroutine has ended.\r\n    // this.pc = pc;\r\n    // map from name to the Scalar or Array variable.\r\n    // this.variables = {};\r\n  }\r\n}\r\n","export default class Variable {\r\n  static NextId = 0;\r\n  readonly id = 'Variable-' + Variable.NextId++;\r\n}\r\n","import { ScalarVariable } from './ScalarVariable';\r\n\r\n/** @constructor */\r\nexport class UserType {\r\n  constructor(public name: string, public members: any) {\r\n    // this.name = name;\r\n    // Members: A mapping of names to types.\r\n    // this.members = members;\r\n  }\r\n\r\n  createInstance() {\r\n    var user: any = {};\r\n\r\n    for (var name in this.members) {\r\n      user[name] = new ScalarVariable(\r\n        this.members[name],\r\n        this.members[name].createInstance()\r\n      );\r\n    }\r\n\r\n    return user;\r\n  }\r\n\r\n  copy(value: any) {\r\n    var newValue: any = {};\r\n    for (var key in value) {\r\n      newValue[key] = value[key].copy();\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n/** @constructor */\r\n\r\nexport class NullType extends Type {\r\n  constructor() {\r\n    super();\r\n    // used to denote the absense of a parameter in system calls.\r\n    this.name = ':NULL';\r\n  }\r\n  createInstance(): any {\r\n    return null;\r\n  }\r\n  copy(value: NullType) {\r\n    return value;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n\r\n/** @constructor */\r\nexport class ArrayType extends Type {\r\n  constructor(public elementType: Type) {\r\n    super();\r\n    //this.elementType = elementType;\r\n    this.name = 'ARRAY OF ' + elementType.name;\r\n  }\r\n}\r\n","export { QBasicProgram, dbg, compile2 } from './qb';\r\nexport { setOpenFile, setFileStream } from './file/file';\r\nexport { VirtualMachine } from './virtualMachine/VirtualMachine';\r\nexport { _Console } from './Console';\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode(location) {\r\n        this.location = location;\r\n    }\r\n    return TreeNode;\r\n}());\r\nexports.default = TreeNode;\r\n//# sourceMappingURL=TreeNode.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Token_1 = require(\"./Token\");\r\nvar NextId = 0;\r\n/** @constructor */\r\nvar EarleyItem = /** @class */ (function () {\r\n    function EarleyItem(rule, pos, base, token, prev, location) {\r\n        this.rule = rule;\r\n        this.pos = pos;\r\n        this.base = base;\r\n        this.token = token;\r\n        this.prev = prev;\r\n        this.location = location;\r\n        this.id = NextId++;\r\n    }\r\n    EarleyItem.prototype.toString = function () {\r\n        var str = '[' + this.id + '] ' + this.rule.name + ':';\r\n        for (var i = 0; i < this.rule.symbols.length; i++) {\r\n            if (i == this.pos) {\r\n                str += ' .';\r\n            }\r\n            str += ' ' + this.rule.symbols[i];\r\n        }\r\n        if (i == this.pos) {\r\n            str += ' .';\r\n        }\r\n        str += ', ' + this.base;\r\n        if (this.token instanceof Token_1.Token) {\r\n            str += ', token=' + this.token.text;\r\n        }\r\n        else if (this.token) {\r\n            str += ', rule=' + this.token.rule;\r\n        }\r\n        if (this.prev) {\r\n            str += ', prev=' + this.prev.id;\r\n        }\r\n        return str;\r\n    };\r\n    return EarleyItem;\r\n}());\r\nexports.EarleyItem = EarleyItem;\r\n//# sourceMappingURL=EarleyItem.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RuleSet_1 = require(\"./RuleSet\");\r\nvar EarleyParser_1 = require(\"./EarleyParser\");\r\n// --------------------------------------------------------------------------\r\n// The ruleparser uses the parser to parse your rules from a string\r\n// into a RuleSet. It extends the grammar to handle *, +, ?, and | operators\r\n// in the grammar.\r\n// --------------------------------------------------------------------------\r\nvar RuleParser = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     */\r\n    function RuleParser(dbg) {\r\n        var _this = this;\r\n        // a unique number to let us make up rule names.\r\n        this.nextRuleId = 0;\r\n        // The buildset is the rules that we are building.\r\n        this.buildSet = new RuleSet_1.RuleSet();\r\n        // The rules are the grammar of the rules themselves.\r\n        var rules = new RuleSet_1.RuleSet();\r\n        // Lets us access this from local functions inside this function.\r\n        // var self = this;\r\n        rules.addRule('start', ['rule']);\r\n        rules.addRule('identifier', [\"'[A-Za-z0-9_]+'\"]);\r\n        rules.addRule('terminal', [\"''([^'\\\\\\\\]|\\\\\\\\.)*''\"]);\r\n        rules.addRule('expr', ['or_expr']);\r\n        rules.addRule('rule', ['identifier', \"':'\", 'expr'], function (args) {\r\n            _this.buildSet.addRule(args[0], args[2], _this.action);\r\n            return args[0];\r\n        });\r\n        rules.addRule('rule', ['identifier', \"':'\"], function (args) {\r\n            _this.buildSet.addRule(args[0], [], _this.action);\r\n            return args[0];\r\n        });\r\n        rules.addRule('or_expr', ['or_expr', \"'\\\\|'\", 'cat_expr'], function (args) {\r\n            // Implement the or operator by making two new rules.\r\n            var name = '_' + _this.nextRuleId++;\r\n            _this.buildSet.addRule(name, args[0]);\r\n            _this.buildSet.addRule(name, args[2]);\r\n            return [name];\r\n        });\r\n        rules.addRule('or_expr', ['cat_expr']);\r\n        rules.addRule('cat_expr', ['cat_expr', 'list_expr'], function (args) {\r\n            args[0].push(args[1]);\r\n            return args[0];\r\n        });\r\n        rules.addRule('cat_expr', ['list_expr'], function (args) { return [args[0]]; });\r\n        rules.addRule('list_expr', ['kleene_expr']);\r\n        rules.addRule('list_expr', [\"'\\\\['\", 'kleene_expr', \"','\", 'kleene_expr', \"'\\\\]'\"], function (args) {\r\n            var nameOpt = '_' + _this.nextRuleId++;\r\n            var name = '_' + _this.nextRuleId++;\r\n            _this.buildSet.addRule(nameOpt, [name]);\r\n            _this.buildSet.addRule(nameOpt, [], function (_args) { return []; });\r\n            _this.buildSet.addRule(name, [args[1]], function (args) { return args; }); // list of one element.)\r\n            _this.buildSet.addRule(name, [name, args[3], args[1]], function (args) {\r\n                // join the lists and return the result.\r\n                args[0].push(args[2]);\r\n                return args[0];\r\n            });\r\n            return nameOpt;\r\n        });\r\n        rules.addRule('kleene_expr', ['basic_expr', \"'[\\\\+\\\\*\\\\?]'\"], function (args) {\r\n            var name = '_' + _this.nextRuleId++;\r\n            // Simulates kleene-star operations by adding more rules.\r\n            if (args[1] == '*') {\r\n                _this.buildSet.addRule(name, [name, args[0]], function (args) {\r\n                    args[0].push(args[1]);\r\n                    return args[0];\r\n                });\r\n                _this.buildSet.addRule(name, [], function (_args) { return []; });\r\n            }\r\n            else if (args[1] == '?') {\r\n                _this.buildSet.addRule(name, [args[0]]);\r\n                _this.buildSet.addRule(name, [], function (args) { return null; });\r\n            }\r\n            else if (args[1] == '+') {\r\n                var name2 = '_' + _this.nextRuleId++;\r\n                _this.buildSet.addRule(name, [name2, args[0]]);\r\n                _this.buildSet.addRule(name2, [name2, args[0]]);\r\n                _this.buildSet.addRule(name2, []);\r\n            }\r\n            return name;\r\n        });\r\n        rules.addRule('kleene_expr', ['basic_expr']);\r\n        rules.addRule('basic_expr', ['identifier']);\r\n        rules.addRule('basic_expr', [\"'\\\\('\", 'expr', \"'\\\\)'\"], function (args) {\r\n            var name = '_' + _this.nextRuleId++;\r\n            _this.buildSet.addRule(name, args[1]);\r\n            return name;\r\n        });\r\n        rules.addRule('basic_expr', ['terminal']);\r\n        rules.finalize();\r\n        //dbg.printf(\"%s\", rules);\r\n        this.parser = new EarleyParser_1.EarleyParser(rules, dbg);\r\n    }\r\n    // ----------------------------------------------------------------------\r\n    // Add a token to the rules. See RuleSet.addToken().\r\n    // ----------------------------------------------------------------------\r\n    RuleParser.prototype.addToken = function (name, re) {\r\n        this.buildSet.addToken(name, re);\r\n    };\r\n    // ----------------------------------------------------------------------\r\n    // Add a rule to the grammar. The rule will be parsed and can include\r\n    // regular-expression-like syntax.\r\n    // ----------------------------------------------------------------------\r\n    RuleParser.prototype.addRule = function (str, action) {\r\n        this.action = action;\r\n        this.parser.parse(str);\r\n    };\r\n    return RuleParser;\r\n}());\r\nexports.RuleParser = RuleParser;\r\n//# sourceMappingURL=RuleParser.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Tokenizer_1 = require(\"./Tokenizer\");\r\nvar Rule_1 = require(\"./Rule\");\r\nvar RuleSet = /** @class */ (function () {\r\n    // ----------------------------------------------------------------------------\r\n    // Construct a ruleset object.\r\n    // ----------------------------------------------------------------------------\r\n    /** @constructor */\r\n    function RuleSet() {\r\n        // Each entry is an array of rules that have the same name.\r\n        this.rules = {};\r\n        // list of terminals in the grammar, from highest priority to lowest.\r\n        this.terminals = [];\r\n        // Keep track of which terminals have been added already.\r\n        this.terminalsAdded = {};\r\n        // map from rule name to map of symbols of FIRST set.\r\n        this.first = {};\r\n        // Whitespace can be significant in some languages. For now, we ignore it.\r\n        this.eatWhiteSpace = true;\r\n        // should be calculated later to be something not in the grammar.\r\n        this.EOF_TOKEN = \"'!EOF'\";\r\n        this.follow = {};\r\n        // A constant representing nothing in the FIRST set.\r\n        //EPSILON = {\r\n        //    toString: function () {\r\n        //        return \"EPSILON\";\r\n        //    }\r\n        //};\r\n        this.EPSILON = 'EPSILON';\r\n        if (this.eatWhiteSpace) {\r\n            this.joinExpr = ' *';\r\n        }\r\n        else {\r\n            this.joinExpr = '';\r\n        }\r\n        this.addRule('_start', ['start', this.EOF_TOKEN]);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Return string representation for debugging.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.toString = function () {\r\n        var str = '';\r\n        for (var name in this.rules) {\r\n            var rules = this.rules[name];\r\n            for (var i = 0; i < rules.length; i++) {\r\n                str += rules[i].toString() + '\\n';\r\n            }\r\n        }\r\n        return str;\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Verify consistency of the rules.\r\n    //\r\n    // errors - an array. Text describing the errors will be added to the end of this array.\r\n    //\r\n    // Returns: Number of errors found.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.check = function (errors) {\r\n        var size = errors.length;\r\n        // for each rule name,\r\n        for (var ruleName in this.rules) {\r\n            // for each rule by that name,\r\n            var rules = this.rules[ruleName];\r\n            for (var i = 0; i < rules.length; i++) {\r\n                var rule = rules[i];\r\n                for (var j = 0; j < rule.symbols.length; j++) {\r\n                    var symbol = rule.symbols[j];\r\n                    if (symbol.length === 0) {\r\n                        errors.push(\"Error: Rule '\" +\r\n                            ruleName +\r\n                            \"' contains a zero length symbol: \" +\r\n                            symbol);\r\n                        // Verify that all non-terminals in the rule exist.\r\n                    }\r\n                    else if (symbol[0] != \"'\") {\r\n                        if (this.rules[symbol] === undefined) {\r\n                            errors.push(\"Error: Rule'\" +\r\n                                ruleName +\r\n                                \"' contains an undefined symbol: \" +\r\n                                symbol);\r\n                        }\r\n                        // 2. Verify that all terminals are valid regular expressions.\r\n                    }\r\n                    else {\r\n                        // not easily done....\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return errors.length - size;\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Transform the grammar to try to reduce the number of rules.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.optimize = function () {\r\n        var changed = 1;\r\n        // loop until no change.\r\n        while (changed) {\r\n            changed = 0;\r\n            // for each rule name,\r\n            for (var name in this.rules) {\r\n                var rules = this.rules[name];\r\n                // inline the rule if it has no alternatives, one symbol, and\r\n                // no associated actions.\r\n                if (rules.length == 1 &&\r\n                    rules[0].name != '_start' &&\r\n                    !rules[0].action) {\r\n                    this.replaceRule(rules[0].name, rules[0].symbols);\r\n                    changed |= 1;\r\n                }\r\n            }\r\n            //dbg.printf(\"Iteration---------------------------\\n\");\r\n            //dbg.print(this.toString());\r\n        }\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Remove quotes from a string.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.innerExpr = function (symbol) {\r\n        return symbol.substr(1, symbol.length - 2);\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Delete the rule, and replace all references to the rule with the\r\n    // given symbols.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.replaceRule = function (name, newSymbols) {\r\n        delete this.rules[name];\r\n        for (var ruleName in this.rules) {\r\n            var rules = this.rules[ruleName];\r\n            for (var i = 0; i < rules.length; i++) {\r\n                for (var j = 0; j < rules[i].symbols.length; j++) {\r\n                    if (rules[i].symbols[j] == name) {\r\n                        rules[i].symbols.splice(j, 1);\r\n                        for (var k = 0; k < newSymbols.length; k++) {\r\n                            rules[i].symbols.splice(j + k, 0, newSymbols[k]);\r\n                        }\r\n                        j += newSymbols.length - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Add the rule to the set.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.addRule = function (name, symbols, action) {\r\n        if (this.rules[name] === undefined) {\r\n            this.rules[name] = [];\r\n        }\r\n        this.rules[name].push(new Rule_1.Rule(name, symbols, action));\r\n        for (var i = 0; i < symbols.length; i++) {\r\n            if (symbols.length > 0 &&\r\n                symbols[i][0] == \"'\" &&\r\n                !this.terminalsAdded[symbols[i]]) {\r\n                this.terminalsAdded[symbols[i]] = 1;\r\n                this.terminals.push(symbols[i]);\r\n            }\r\n        }\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Add a token. This simply creates a new rule.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.addToken = function (name, re) {\r\n        this.addRule(name, [\"'\" + re + \"'\"]);\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Compute rules that are nullable (non-terminal leads to nothing)\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.computeFirst = function () {\r\n        this.first = {};\r\n        var name;\r\n        for (name in this.rules) {\r\n            this.first[name] = {};\r\n        }\r\n        var changed = true;\r\n        var self = this;\r\n        function addFirst(name, token) {\r\n            var ret = !(token in self.first[name]);\r\n            self.first[name][token] = 1;\r\n            return ret;\r\n        }\r\n        function merge(destName, sourceName) {\r\n            var ret = false; //0;\r\n            for (var token in self.first[sourceName]) {\r\n                //ret |= addFirst(destName, token);\r\n                ret = ret || addFirst(destName, token);\r\n            }\r\n            return ret;\r\n        }\r\n        // loop until no change.\r\n        while (changed) {\r\n            changed = false;\r\n            // for each rule name,\r\n            for (name in this.rules) {\r\n                var rules = this.rules[name];\r\n                // for each RHS of the rule,\r\n                for (var i = 0; i < rules.length; i++) {\r\n                    // If the rule has no symbols,\r\n                    if (rules[i].symbols.length === 0) {\r\n                        // add EPSILON to first set\r\n                        changed = changed || addFirst(name, this.EPSILON);\r\n                    }\r\n                    // for each symbol of the rule,\r\n                    for (var j = 0; j < rules[i].symbols.length; j++) {\r\n                        // if it is a terminal\r\n                        if (rules[i].symbols[j][0] == \"'\") {\r\n                            changed = changed || addFirst(name, rules[i].symbols[j]);\r\n                            break;\r\n                            // if it's a terminal,\r\n                        }\r\n                        else {\r\n                            changed = changed || merge(name, rules[i].symbols[j]);\r\n                            if (this.first[rules[i].symbols[j]][this.EPSILON] !== 1) {\r\n                                // continue only if it contains the epsilon\r\n                                // symbol.\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // ------------------------------------------------------------------------\r\n    // Compute follow set of all non-terminals.\r\n    // ------------------------------------------------------------------------\r\n    RuleSet.prototype.computeFollow = function () {\r\n        // var name;\r\n        this.follow = {};\r\n        for (var name_1 in this.rules) {\r\n            this.follow[name_1] = {};\r\n        }\r\n        var changed = true; //1;\r\n        while (changed) {\r\n            changed = false; //0;\r\n            var f;\r\n            for (var name_2 in this.rules) {\r\n                var rules = this.rules[name_2];\r\n                for (var i = 0; i < rules.length; i++) {\r\n                    var rule = rules[i];\r\n                    for (var j = 0; j < rule.symbols.length; j++) {\r\n                        if (rule.symbols[j][0] === \"'\") {\r\n                            continue;\r\n                        }\r\n                        var follow = this.follow[rule.symbols[j]];\r\n                        if (j == rule.symbols.length - 1) {\r\n                            if (rule.symbols[j][0] != \"'\" && rule.symbols[j] != name_2) {\r\n                                for (f in this.follow[name_2]) {\r\n                                    if (f !== this.EPSILON) {\r\n                                        //dbg.printf(\"%s follows %s cause it's last of %s\\n\", f, rule.symbols[j], name );\r\n                                        //changed |= follow[f] === undefined;\r\n                                        changed = changed || follow[f] === undefined;\r\n                                        follow[f] = 1;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (rule.symbols[j + 1][0] == \"'\" ||\r\n                            rule.symbols[j + 1] === this.EOF_TOKEN) {\r\n                            //changed |= follow[rule.symbols[j + 1]] === undefined;\r\n                            changed = changed || follow[rule.symbols[j + 1]] === undefined;\r\n                            follow[rule.symbols[j + 1]] = 1;\r\n                            //dbg.printf(\"%s follows %s\\n\", rule.symbols[j+1],\r\n                            //    rule.symbols[j]);\r\n                        }\r\n                        else {\r\n                            for (f in this.first[rule.symbols[j + 1]]) {\r\n                                if (f !== this.EPSILON) {\r\n                                    //dbg.printf(\"%s follows %s via %s\\n\",\r\n                                    //    f, name, rule.symbols[j+1] );\r\n                                    //changed |= follow[f] === undefined;\r\n                                    changed = changed || follow[f] === undefined;\r\n                                    follow[f] = 1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    RuleSet.prototype.finalize = function () {\r\n        this.optimize();\r\n        this.computeFirst();\r\n        this.computeFollow();\r\n    };\r\n    RuleSet.prototype.createTokenizer = function (dbg) {\r\n        var tokenizer = new Tokenizer_1.Tokenizer(dbg);\r\n        tokenizer.ignore('[ \\t\\r\\u001a]+');\r\n        for (var i = 0; i < this.terminals.length; i++) {\r\n            //dbg.printf(\"Add token %s='%s'\\n\",\r\n            //    this.terminals[i],\r\n            //    this.innerExpr( this.terminals[i] ) );\r\n            tokenizer.addToken(this.terminals[i], this.innerExpr(this.terminals[i]));\r\n        }\r\n        tokenizer.EOF_TOKEN = this.EOF_TOKEN;\r\n        return tokenizer;\r\n    };\r\n    return RuleSet;\r\n}());\r\nexports.RuleSet = RuleSet;\r\n//# sourceMappingURL=RuleSet.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NfaState_1 = require(\"./NfaState\");\r\nvar Nfa_1 = require(\"./Nfa\");\r\nvar DfaState_1 = require(\"./DfaState\");\r\nvar CharMatcher_1 = require(\"./CharMatcher\");\r\nvar RangeMatcher_1 = require(\"./RangeMatcher\");\r\nvar Token_1 = require(\"./Token\");\r\n/** @constructor */\r\nvar Tokenizer = /** @class */ (function () {\r\n    //   dbg: IDebugConsole;\r\n    function Tokenizer(dbg) {\r\n        this.dbg = dbg;\r\n        this.root = new NfaState_1.NfaState();\r\n        this.index = 0;\r\n        this.listId = 1;\r\n        this.dfaCache = {};\r\n        // text to tokenize.\r\n        this.text = '';\r\n        // for each line, the character position of that line in the text.\r\n        this.lineNumbers = [];\r\n        // users can redefine these if they want.\r\n        this.EOF_TOKEN = {};\r\n        this.IGNORE_TOKEN = {};\r\n        // check this to determine if we have reached the end of the text.\r\n        this.finished = true;\r\n    }\r\n    Tokenizer.prototype.addToken = function (id, expr) {\r\n        this.expr = expr;\r\n        this.index = 0;\r\n        var nfa = this.parseAlternation();\r\n        this.root.next.push(nfa.start);\r\n        nfa.end.accept = id;\r\n    };\r\n    Tokenizer.prototype.ignore = function (expr) {\r\n        this.addToken(this.IGNORE_TOKEN, expr);\r\n    };\r\n    Tokenizer.prototype.eof = function () {\r\n        return this.index == this.expr.length;\r\n    };\r\n    Tokenizer.prototype.matchChar = function (ch) {\r\n        if (this.expr[this.index] == ch) {\r\n            this.index++;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Tokenizer.prototype.peek = function (ch) {\r\n        return this.expr[this.index] == ch;\r\n    };\r\n    Tokenizer.prototype.parseChar = function () {\r\n        if (this.matchChar('\\\\')) {\r\n            if (this.matchChar('n')) {\r\n                return '\\n';\r\n            }\r\n            else if (this.matchChar('r')) {\r\n                return '\\r';\r\n            }\r\n            else if (this.matchChar('t')) {\r\n                return '\\t';\r\n            }\r\n            else if (this.matchChar('d')) {\r\n                return CharMatcher_1.DIGIT_CHAR;\r\n            }\r\n            else {\r\n                return this.expr[this.index++];\r\n            }\r\n        }\r\n        else if (this.matchChar('.')) {\r\n            return CharMatcher_1.ANY_CHAR;\r\n        }\r\n        else if (this.matchChar('$')) {\r\n            return CharMatcher_1.PRE_NEWLINE;\r\n        }\r\n        else if (this.matchChar('^')) {\r\n            return CharMatcher_1.POST_NEWLINE;\r\n        }\r\n        else {\r\n            return this.expr[this.index++];\r\n        }\r\n    };\r\n    Tokenizer.prototype.parseRange = function () {\r\n        var include = true;\r\n        var ranges = [];\r\n        while (!this.eof() && !this.peek(']')) {\r\n            if (this.matchChar('^')) {\r\n                include = false;\r\n            }\r\n            var first = this.parseChar();\r\n            var last = first;\r\n            if (this.matchChar('-')) {\r\n                last = this.parseChar();\r\n            }\r\n            if (first == CharMatcher_1.DIGIT_CHAR) {\r\n                first = '0';\r\n                last = '9';\r\n            }\r\n            //dbg.printf(\"Pushing range %s..%s\\n\", first, last );\r\n            ranges.push([first, last]);\r\n        }\r\n        var state = new NfaState_1.NfaState(new RangeMatcher_1.RangeMatcher(ranges, include));\r\n        return new Nfa_1.NFA(state, state);\r\n    };\r\n    Tokenizer.prototype.parseBasic = function () {\r\n        var nfa;\r\n        if (this.matchChar('(')) {\r\n            nfa = this.parseAlternation();\r\n            if (!this.matchChar(')')) {\r\n                throw \"Expected ')'\";\r\n            }\r\n        }\r\n        else if (this.matchChar('[')) {\r\n            //dbg.printf(\"Encountered RANGE!\\n\");\r\n            nfa = this.parseRange();\r\n            if (!this.matchChar(']')) {\r\n                throw \"Expected ']'\";\r\n            }\r\n        }\r\n        else {\r\n            var state = new NfaState_1.NfaState(new CharMatcher_1.CharMatcher(this.parseChar()));\r\n            nfa = new Nfa_1.NFA(state, state);\r\n        }\r\n        return nfa;\r\n    };\r\n    Tokenizer.prototype.parseKleene = function () {\r\n        var nfa = this.parseBasic();\r\n        // var splitter;\r\n        if (this.matchChar('+')) {\r\n            var splitter = new NfaState_1.NfaState();\r\n            nfa.end.next.push(splitter);\r\n            splitter.next.push(nfa.start);\r\n            nfa.end = splitter;\r\n        }\r\n        else if (this.matchChar('*')) {\r\n            var splitter = new NfaState_1.NfaState();\r\n            splitter.next.push(nfa.start);\r\n            nfa.end.next.push(splitter);\r\n            nfa.start = splitter;\r\n            nfa.end = splitter;\r\n        }\r\n        else if (this.matchChar('?')) {\r\n            var start = new NfaState_1.NfaState();\r\n            var end = new NfaState_1.NfaState();\r\n            start.next.push(nfa.start);\r\n            start.next.push(end);\r\n            nfa.end.next.push(end);\r\n            nfa.start = start;\r\n            nfa.end = end;\r\n        }\r\n        return nfa;\r\n    };\r\n    Tokenizer.prototype.parseConcat = function () {\r\n        var start = new NfaState_1.NfaState();\r\n        var end = start;\r\n        for (;;) {\r\n            if (this.peek('|') || this.peek(')') || this.eof()) {\r\n                break;\r\n            }\r\n            var nfa = this.parseKleene();\r\n            end.next.push(nfa.start);\r\n            end = nfa.end;\r\n        }\r\n        return new Nfa_1.NFA(start, end);\r\n    };\r\n    Tokenizer.prototype.parseAlternation = function () {\r\n        var start = new NfaState_1.NfaState();\r\n        var end = new NfaState_1.NfaState();\r\n        do {\r\n            var nfa = this.parseConcat();\r\n            start.next.push(nfa.start);\r\n            nfa.end.next.push(end);\r\n        } while (this.matchChar('|'));\r\n        return new Nfa_1.NFA(start, end);\r\n    };\r\n    Tokenizer.prototype.addState = function (nfaStateList, accepts, nfaState) {\r\n        if (nfaState.lastList == this.listId) {\r\n            //dbg.printf(\"Skip adding nfa State [%d]\\n\", nfaState.id );\r\n            return;\r\n        }\r\n        //dbg.printf(\"Add NFA state [%d]\\n\", nfaState.id );\r\n        if (nfaState.accept !== undefined) {\r\n            accepts.push(nfaState.accept);\r\n        }\r\n        nfaState.lastList = this.listId;\r\n        nfaStateList.push(nfaState);\r\n        if (nfaState.mchar === undefined) {\r\n            for (var i = 0; i < nfaState.next.length; i++) {\r\n                this.addState(nfaStateList, accepts, nfaState.next[i]);\r\n            }\r\n        }\r\n    };\r\n    Tokenizer.prototype.nextState = function (dfaState, ch) {\r\n        var nfaStateList = [];\r\n        var accepts = [];\r\n        var i;\r\n        //dbg.printf(\"Transition from DFA[%d] on ch=%s\\n\", dfaState.id, ch );\r\n        this.listId++;\r\n        for (i = 0; i < dfaState.nfaStates.length; i++) {\r\n            var nfaState = dfaState.nfaStates[i];\r\n            if (nfaState.mchar !== undefined) {\r\n                if (nfaState.mchar.match(ch)) {\r\n                    this.addState(nfaStateList, accepts, nfaState.next[0]);\r\n                }\r\n                else if (ch == CharMatcher_1.PRE_NEWLINE || ch == CharMatcher_1.POST_NEWLINE) {\r\n                    this.addState(nfaStateList, accepts, nfaState);\r\n                }\r\n            }\r\n        }\r\n        nfaStateList.sort(function (a, b) {\r\n            return a.id - b.id;\r\n        });\r\n        var key = '';\r\n        for (i = 0; i < nfaStateList.length; i++) {\r\n            key += nfaStateList[i].id + '.';\r\n        }\r\n        if (this.dfaCache[key] === undefined) {\r\n            dfaState = new DfaState_1.DfaState();\r\n            //dbg.printf(\"Created DFA state [%d] accepts=%s\\n\", dfaState.id, accepts );\r\n            dfaState.nfaStates = nfaStateList;\r\n            dfaState.accepts = accepts;\r\n            this.dfaCache[key] = dfaState;\r\n        }\r\n        else {\r\n            //dbg.printf(\"Returning cached DFA state [%d] accepts=%s\\n\",\r\n            //        this.dfaCache[key].id, this.dfaCache[key].accepts );\r\n        }\r\n        return this.dfaCache[key];\r\n    };\r\n    Tokenizer.prototype.setText = function (text) {\r\n        this.text = text;\r\n        this.lineNumbers.length = 0;\r\n        this.lineNumbers.push(0);\r\n        this.finished = false;\r\n        for (var i = 0; i < this.text.length; i++) {\r\n            if (this.text[i] == '\\n') {\r\n                this.lineNumbers.push(i + 1);\r\n            }\r\n        }\r\n    };\r\n    Tokenizer.prototype.getLine = function (lineno) {\r\n        return this.text.substr(this.lineNumbers[lineno], this.lineNumbers[lineno + 1] - this.lineNumbers[lineno]);\r\n    };\r\n    /**\r\n          Retrieve a list of tokens that match at a given position. The list is\r\n          returned sorted in order of length.\r\n  \r\n          @param text Text to match.\r\n          @param line Line number to begin matching, starting from 0\r\n          @param position Character position on the line to begin matching.\r\n      */\r\n    Tokenizer.prototype.nextTokenInternal = function (line, position) {\r\n        var dbg = this.dbg;\r\n        //var last = 0;\r\n        var last = 0;\r\n        var i;\r\n        var accept = null;\r\n        if (this.rootDfa === undefined) {\r\n            this.rootDfa = new DfaState_1.DfaState();\r\n            this.addState(this.rootDfa.nfaStates, this.rootDfa.accepts, this.root);\r\n        }\r\n        var dfaState = this.rootDfa;\r\n        var startPosition = this.lineNumbers[line] + position;\r\n        //dbg.printf(\"Start match from %d:%d\\n\", line, position );\r\n        if (startPosition == this.text.length) {\r\n            this.finished = true;\r\n            return new Token_1.Token(this.EOF_TOKEN, '!EOF', line, position);\r\n        }\r\n        if (startPosition > 0) {\r\n            last = this.text[startPosition - 1];\r\n        }\r\n        for (i = startPosition; i < this.text.length; i++) {\r\n            //dbg.printf(\"Enter DFA state %d\\n\", dfaState.id );\r\n            var ch = this.text[i];\r\n            if (ch === '\\n' && last != CharMatcher_1.PRE_NEWLINE) {\r\n                ch = CharMatcher_1.PRE_NEWLINE;\r\n                i--;\r\n            }\r\n            else if (last === '\\n' || last === 0) {\r\n                ch = CharMatcher_1.POST_NEWLINE;\r\n                i--;\r\n            }\r\n            if (last === '\\n') {\r\n                line++;\r\n            }\r\n            last = ch;\r\n            if (dfaState.next[ch] === undefined) {\r\n                dfaState.next[ch] = this.nextState(dfaState, ch);\r\n            }\r\n            dfaState = dfaState.next[ch];\r\n            if (dfaState.accepts.length) {\r\n                //dbg.printf(\"Would accept %s\\n\", dfaState.accepts[0] );\r\n                //dbg.printf(\"i:%d line:%d lineNumbers=%d\\n\",\r\n                //    i, line, this.lineNumbers[line] );\r\n                accept = new Token_1.Token(dfaState.accepts[0], this.text.substr(startPosition, i - startPosition + 1), line, startPosition - this.lineNumbers[line]);\r\n            }\r\n            if (dfaState.nfaStates.length === 0) {\r\n                break;\r\n            }\r\n        }\r\n        if (accept) {\r\n            //dbg.printf(\"Returning match id=%s at %d:%d text=%s\\n\", accept.id,\r\n            //    accept.locus.line, accept.locus.position, accept.text );\r\n        }\r\n        else if (0) {\r\n            dbg.printf(\"Bad token at '%s'\\n\", this.text.substr(startPosition, 10));\r\n            dbg.printf('ascii %d\\n', this.text.charCodeAt(startPosition));\r\n        }\r\n        return accept;\r\n    };\r\n    Tokenizer.prototype.nextToken = function (line, position) {\r\n        for (;;) {\r\n            var token = this.nextTokenInternal(line, position);\r\n            if (token === null || token.id !== this.IGNORE_TOKEN) {\r\n                return token;\r\n            }\r\n            line = token.location.line;\r\n            position = token.location.position + token.text.length;\r\n        }\r\n    };\r\n    return Tokenizer;\r\n}());\r\nexports.Tokenizer = Tokenizer;\r\n//# sourceMappingURL=Tokenizer.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CharMatcher_1 = require(\"./CharMatcher\");\r\nvar NfaState = /** @class */ (function () {\r\n    /** @constructor */\r\n    function NfaState(charMatcher) {\r\n        this.next = [];\r\n        this.id = CharMatcher_1.getNextStateId(); //NextStateId++;\r\n        this.lastList = 0;\r\n        this.accept = undefined;\r\n        this.mchar = charMatcher;\r\n    }\r\n    NfaState.prototype.toString = function () {\r\n        var str = '\\nState [' + this.id + '] ch=' + this.mchar + '\\n';\r\n        if (this.accept !== undefined) {\r\n            str += '    Accept ' + this.accept + '\\n';\r\n        }\r\n        for (var i = 0; i < this.next.length; i++) {\r\n            str +=\r\n                '    ch=' + this.next[i].mchar + ' goto [' + this.next[i].id + ']\\n';\r\n        }\r\n        return str;\r\n    };\r\n    return NfaState;\r\n}());\r\nexports.NfaState = NfaState;\r\n//# sourceMappingURL=NfaState.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NFA = /** @class */ (function () {\r\n    /** @constructor */\r\n    function NFA(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n    NFA.prototype.toString = function () {\r\n        var processed = {};\r\n        var stack = [this.start];\r\n        var str = '';\r\n        while (stack.length > 0) {\r\n            var state = stack.pop();\r\n            if (processed[state]) {\r\n                continue;\r\n            }\r\n            processed[state] = 1;\r\n            for (var i = 0; i < state.next.length; i++) {\r\n                stack.push(state.next[i]);\r\n            }\r\n            str += state.toString();\r\n        }\r\n        return str;\r\n    };\r\n    return NFA;\r\n}());\r\nexports.NFA = NFA;\r\n//# sourceMappingURL=Nfa.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CharMatcher_1 = require(\"./CharMatcher\");\r\n/** @constructor */\r\nvar DfaState = /** @class */ (function () {\r\n    function DfaState() {\r\n        this.nfaStates = [];\r\n        this.next = {};\r\n        this.accepts = [];\r\n        this.id = CharMatcher_1.getNextStateId(); //NextStateId++;\r\n    }\r\n    return DfaState;\r\n}());\r\nexports.DfaState = DfaState;\r\n//# sourceMappingURL=DfaState.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n  When the match function is called, it will return true if the argument\r\n  matches a particular character range.\r\n\r\n  */\r\nvar RangeMatcher = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @constructor\r\n     * @param ranges\r\n     * @param include\r\n     */\r\n    function RangeMatcher(ranges, include) {\r\n        this.ranges = ranges;\r\n        this.include = include;\r\n        // list of [ start, end ]\r\n        // this.ranges = ranges;\r\n        // this.include = include; // boolean\r\n    }\r\n    RangeMatcher.prototype.match = function (ch) {\r\n        for (var i = 0; i < this.ranges.length; i++) {\r\n            var range = this.ranges[i];\r\n            if (ch >= range[0] && ch <= range[1]) {\r\n                return this.include;\r\n            }\r\n        }\r\n        return !this.include;\r\n    };\r\n    RangeMatcher.prototype.toString = function () {\r\n        var str = '[';\r\n        if (!this.include) {\r\n            str += '^';\r\n        }\r\n        for (var i = 0; i < this.ranges.length; i++) {\r\n            if (this.ranges[i][0] == this.ranges[i][1]) {\r\n                str += this.ranges[i][0];\r\n            }\r\n            else {\r\n                str += this.ranges[i][0] + '-' + this.ranges[i][1];\r\n            }\r\n        }\r\n        return str + ']';\r\n    };\r\n    return RangeMatcher;\r\n}());\r\nexports.RangeMatcher = RangeMatcher;\r\n//# sourceMappingURL=RangeMatcher.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NextRuleId = 0;\r\n// ----------------------------------------------------------------------------\r\n// Construct a rule object.\r\n// ----------------------------------------------------------------------------\r\n/** @constructor */\r\nvar Rule = /** @class */ (function () {\r\n    function Rule(name, symbols, action) {\r\n        this.name = name;\r\n        this.symbols = symbols;\r\n        this.action = action;\r\n        this.id = NextRuleId++;\r\n        // this.id = NextRuleId++;\r\n        // Name of the rule.\r\n        // this.name = name;\r\n        // array of symbols. If the symbol begins with ' then it is a regular\r\n        // expression. Otherwise, it is the name of another rule. The array\r\n        // may not be null. For an empty rule, use a zero-length array.\r\n        // this.symbols = symbols;\r\n        // The action. May be undefined.\r\n        // this.action = action;\r\n    }\r\n    // ----------------------------------------------------------------------------\r\n    // Returns string representation of a rule for debugging.\r\n    // ----------------------------------------------------------------------------\r\n    Rule.prototype.toString = function () {\r\n        var str = this.name + ':';\r\n        for (var i = 0; i < this.symbols.length; i++) {\r\n            str += ' ' + this.symbols[i];\r\n        }\r\n        if (0 && this.action) {\r\n            // this prints out the whole function which can be undesirable.\r\n            str += ' action=' + this.action;\r\n        }\r\n        return str;\r\n    };\r\n    return Rule;\r\n}());\r\nexports.Rule = Rule;\r\n//# sourceMappingURL=Rule.js.map","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstArgument {\r\n  type: Type = null;\r\n  constructor(\r\n    public location: Location,\r\n    public name: string,\r\n    public typeName: string,\r\n    public isArray: boolean\r\n  ) {\r\n    // this.locus = locus;\r\n    // name of declared subroutine argument.\r\n    // this.name = name;\r\n    // null, or the typename in AS type\r\n    // this.typeName = typeName;\r\n    // is this an open-ended array?\r\n    // this.isArray = isArray;\r\n    // this.type = null; // filled in during type checking.\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitArgument(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstEndStatement {\r\n  constructor(public location: Location) {\r\n    //this.locus = locus;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitEndStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstNullStatement {\r\n  constructor(public location: Location) {\r\n    // this.locus = locus;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitNullStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { AstVariableReference } from './AstVariableReference';\r\n\r\n/** @constructor */\r\nexport class AstAssignStatement {\r\n  constructor(\r\n    public location: Location,\r\n    public lhs: AstVariableReference,\r\n    public expr: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.lhs = lhs; // could be a referenceList\r\n    // this.expr = expr;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitAssignStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n/** @constructor */\r\nexport class AstBinaryOp {\r\n  type?: Type;\r\n  wantRef?: boolean;\r\n  constructor(\r\n    public location: Location,\r\n    public lhs: any,\r\n    public op: any,\r\n    public rhs: any\r\n  ) {\r\n    // this.locus = locus;\r\n    //this.lhs = lhs;\r\n    //this.op = op;\r\n    //this.rhs = rhs;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitBinaryOp(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstCallStatement {\r\n  constructor(\r\n    public location: Location,\r\n    public name: string,\r\n    public args: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n    // this.args = args;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitCallStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstCaseStatement {\r\n  constructor(\r\n    public location: Location,\r\n    public exprList: any,\r\n    public statements: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // if exprList is empty, this is case Else\r\n    // this.exprList = exprList;\r\n    // this.statements = statements;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitCaseStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstConstStatement {\r\n  constructor(\r\n    public location: Location,\r\n    /*identifier*/ public name: string,\r\n    public expr: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = identifier;\r\n    // this.expr = expr;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitConstStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstExitStatement {\r\n  constructor(public location: Location, public what: 'FOR' | 'DO') {\r\n    // this.locus = locus;\r\n    // this.what = what; // \"FOR\" or \"DO\"\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitExitStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstConstantExpr {\r\n  type: Type;\r\n  wantRef: boolean;\r\n  constructor(public location: Location, public value: any) {\r\n    // this.locus = locus;\r\n    // value is possibly null, eg. for first parameter of \"COLOR , 7\"\r\n    // this.value = value;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitConstantExpr(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstGosubStatement {\r\n  constructor(public location: Location, public label: string) {\r\n    // this.locus = locus;\r\n    // this.label = label;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitGosub(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstGotoStatement {\r\n  constructor(public location: Location, public label: string) {\r\n    // this.locus = locus;\r\n    // this.label = label;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitGotoStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstInputStatement {\r\n  constructor(\r\n    readonly location: Location,\r\n    public promptExprOrfileNumber: any,\r\n    public printQuestionMark: any,\r\n    public identifiersOrReference: any,\r\n    readonly isLine = false\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.promptExpr = promptExpr; // can be null.\r\n    // this.printQuestionMark = printQuestionMark;\r\n    // this.identifiers = identifiers; // actually we will only use the first one.\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitInputStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstLabel {\r\n  constructor(public location: Location, public label: string) {\r\n    // this.locus = locus;\r\n    // this.label = label;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitLabel(this);\r\n  }\r\n}\r\n","import { TreeNode, Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstTypeMember extends TreeNode {\r\n  type?: Type;\r\n  constructor(location: Location, public name: any, public typeName: any) {\r\n    super(location);\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n    // this.typeName = typeName;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitTypeMember(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstNextStatement {\r\n  constructor(\r\n    public location: Location,\r\n    /*identifierList*/ public identifiers: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.identifiers = identifierList;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitNextStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { AstConstantExpr } from './AstConstantExpr';\r\n\r\n/** @constructor */\r\nexport class AstDataStatement {\r\n  constructor(public location: Location, public data: AstConstantExpr[]) {\r\n    // this.locus = locus;\r\n    // this.data = data;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitDataStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { AstConstantExpr } from './AstConstantExpr';\r\n\r\n/** @constructor */\r\nexport class AstForLoop {\r\n  constructor(\r\n    public location: Location,\r\n    public identifier: any,\r\n    public startExpr: any,\r\n    public endExpr: AstConstantExpr,\r\n    public stepExpr: AstConstantExpr\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.identifier = identifier;\r\n    // this.startExpr = startExpr;\r\n    // this.endExpr = endExpr;\r\n    // this.stepExpr = stepExpr;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitForLoop(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstIfStatement {\r\n  constructor(\r\n    readonly location: Location,\r\n    readonly expr: any,\r\n    readonly statements: any,\r\n    readonly elseStatements: any\r\n  ) {\r\n    //this.locus = locus;\r\n    //this.expr = expr;\r\n    //this.statements = statements;\r\n    //this.elseStatements = elseStatements;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitIfStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstMemberDeref {\r\n  type: Type;\r\n  wantRef?: boolean;\r\n  constructor(\r\n    public location: Location,\r\n    public lhs: any,\r\n    public identifier: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.lhs = lhs;\r\n    // this.identifier = identifier;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitMemberDeref(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n// import { AstVariableReference } from \"./AstVariableReference\";\r\nimport { AstPrintItem } from './AstPrintItem';\r\n\r\nexport class AstPrintStatement {\r\n  /** @constructor */\r\n  constructor(\r\n    public location: Location,\r\n    public printItems: AstPrintItem[],\r\n    readonly fileNumber?: string\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.printItems = printItems;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitPrintStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstPrintUsingStatement {\r\n  constructor(\r\n    public location: Location,\r\n    public exprList: any,\r\n    public terminator: ';' | ','\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.exprList = exprList; // array of expressions. The first is used as the\r\n    // format string.\r\n    // this.terminator = terminator; // literal ';', ',', or null\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitPrintUsingStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstReturnStatement {\r\n  constructor(public location: Location, public value?: any) {\r\n    // this.locus = locus;\r\n    // this.value = value;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitReturnStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstSelectStatement {\r\n  constructor(public location: Location, public expr: any, public cases: any) {\r\n    // this.locus = locus;\r\n    // this.expr = expr;\r\n    // this.cases = cases;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitSelectStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { AstArgument } from './AstArgument';\r\n/** @constructor */\r\nexport class AstSubroutine {\r\n  constructor(\r\n    public location: Location,\r\n    public name: string,\r\n    public args: AstArgument[],\r\n    public /*statementList*/ statements: any,\r\n    public isFunction: any,\r\n    public isStatic?: boolean\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n    // this.args = args;\r\n    // this.statements = statementList;\r\n    // this.isFunction = isFunction;\r\n    // this.isStatic = isStatic;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitSubroutine(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstUnaryOperator {\r\n  type?: Type;\r\n  wantRef?: boolean;\r\n  constructor(public location: Location, public op: string, public expr: any) {\r\n    // this.locus = locus;\r\n    // this.op = op;\r\n    // this.expr = expr;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitUnaryOperator(this);\r\n  }\r\n}\r\n","import { TreeNode, Location } from 'earley';\r\n// import { Type } from \"../types/Type\";\r\n\r\nexport class AstWhileLoop extends TreeNode {\r\n  /** @constructor */\r\n  constructor(location: Location, public expr: any, public statements: any) {\r\n    super(location);\r\n    // this.locus = locus;\r\n    // this.expr = expr;\r\n    // this.statements = statements;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitWhileLoop(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { IRangeVisitor } from '../IVisitor';\r\n\r\n/** @constructor */\r\nexport class AstRange {\r\n  constructor(\r\n    public location: Location,\r\n    public lowerExpr: any,\r\n    public upperExpr: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // lower and upper are possibly equal. in this case, we should avoid\r\n    // evaluating the expression twice.\r\n    // this.lowerExpr = lowerExpr;\r\n    // this.upperExpr = upperExpr;\r\n  }\r\n\r\n  accept(visitor: IRangeVisitor) {\r\n    visitor.visitRange(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n/** @constructor */\r\nexport class AstDimStatement {\r\n  shared = false; // changed to true during parsing.\r\n  constructor(\r\n    public location: Location,\r\n    /*identifier*/ public name: any,\r\n    public ranges: any,\r\n    public typeName: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = identifier;\r\n    // this.ranges = ranges; // list of AstRange\r\n    // this.typeName = typeName; // possibly null\r\n    // this.shared = false; // changed to true during parsing.\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitDimStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { AstSubroutine } from './AstSubroutine';\r\n\r\n/** @constructor */\r\nexport class AstProgram {\r\n  subs: AstSubroutine[];\r\n  constructor(public location: Location, mainSub: AstSubroutine) {\r\n    // this.locus = locus;\r\n    this.subs = [mainSub];\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitProgram(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstDefTypeStatement {\r\n  constructor(public location: Location, public typeName: string) {\r\n    // this.locus = locus;\r\n    // this.typeName = typeName;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitDefTypeStatement(this);\r\n  }\r\n}\r\n","import { TreeNode, Location } from 'earley';\r\n/** @constructor */\r\nexport class AstRestoreStatement extends TreeNode {\r\n  constructor(location: Location, public label: string) {\r\n    super(location);\r\n    // this.locus = locus;\r\n    // label can be null\r\n    //this.label = label;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitRestoreStatement(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\n/** @constructor */\r\nexport class AstUserType {\r\n  constructor(\r\n    public location: Location,\r\n    public name: any,\r\n    public members: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.name = name;\r\n    // this.members = members;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitUserType(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\nimport { Type } from '../types/Type';\r\n\r\n/** @constructor */\r\nexport class AstArrayDeref {\r\n  type: Type | null = null; // calculated during type checking.\r\n  constructor(\r\n    public location: Location,\r\n    public expr: any,\r\n    public parameters: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.expr = expr;\r\n    // this.parameters = parameters;\r\n    // this.type = null; // calculated during type checking.\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitArrayDeref(this);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n\r\nimport { AstDeclareFunction } from './node/AstDeclareFunction';\r\nimport { AstArgument } from './node/AstArgument';\r\nimport { AstEndStatement } from './node/AstEndStatement';\r\nimport { AstNullStatement } from './node/AstNullStatement';\r\nimport { AstAssignStatement } from './node/AstAssignStatement';\r\nimport { AstBinaryOp } from './node/AstBinaryOp';\r\nimport { AstCallStatement } from './node/AstCallStatement';\r\nimport { AstCaseStatement } from './node/AstCaseStatement';\r\nimport { AstConstStatement } from './node/AstConstStatement';\r\n// import { AstExitStatement } from \"./node/AstExitStatement\";\r\nimport { AstConstantExpr } from './node/AstConstantExpr';\r\nimport { AstGosubStatement } from './node/AstGosubStatement';\r\nimport { AstGotoStatement } from './node/AstGotoStatement';\r\nimport { AstInputStatement } from './node/AstInputStatement';\r\nimport { AstPrintItem } from './node/AstPrintItem';\r\n// import { AstLabel } from \"./node/AstLabel\";\r\nimport { AstDoStatement } from './node/AstDoStatement';\r\n// import { AstTypeMember } from \"./node/AstTypeMember\";\r\nimport { AstNextStatement } from './node/AstNextStatement';\r\nimport { AstDataStatement } from './node/AstDataStatement';\r\nimport { AstForLoop } from './node/AstForLoop';\r\nimport { AstIfStatement } from './node/AstIfStatement';\r\nimport { AstMemberDeref } from './node/AstMemberDeref';\r\nimport { AstPrintStatement } from './node/AstPrintStatement';\r\nimport { AstPrintUsingStatement } from './node/AstPrintUsingStatement';\r\nimport { AstReturnStatement } from './node/AstReturnStatement';\r\nimport { AstSelectStatement } from './node/AstSelectStatement';\r\nimport { AstSubroutine } from './node/AstSubroutine';\r\nimport { AstUnaryOperator } from './node/AstUnaryOperator';\r\nimport { AstVariableReference } from './node/AstVariableReference';\r\nimport { AstWhileLoop } from './node/AstWhileLoop';\r\nimport { AstRange } from './node/AstRange';\r\nimport { AstProgram } from './node/AstProgram';\r\n\r\nimport { Instruction } from './virtualMachine/instructions/instruction';\r\nimport { Instructions } from './virtualMachine/instructions/Instructions';\r\nimport { IsArrayType } from './qb';\r\nimport { SystemFunctions } from './SystemFunctions';\r\nimport { SystemSubroutines } from './SystemSubroutines';\r\nimport { IDoStatementVisitor } from './IVisitor';\r\nimport { Label } from './Label';\r\n// import { Locus } from \"./Locus\";\r\nimport { LoopContext } from './LoopContext';\r\nimport { UserType } from './UserType';\r\n\r\nimport { IStringDictionary } from './base/common/collections';\r\nimport { AstOpenStatement } from './node/AstOpenStatement';\r\nimport { AstDimStatement } from './node/AstDimStatement';\r\n// import { AstArrayDeref } from \"./node/AstArrayDeref\";\r\n// import { number } from \"prop-types\";\r\n\r\n/** @constructor */\r\nexport class CodeGenerator implements IDoStatementVisitor {\r\n  // Array of Instruction objects\r\n  instructions: Instruction[] = [];\r\n\r\n  // Array of data from DATA statements.\r\n  data: any[] = [];\r\n\r\n  // Set of shared variable names. If a string is a property of this object,\r\n  // then the variable with that name is shared.\r\n  shared: IStringDictionary<boolean> = {};\r\n\r\n  // Array of labels.\r\n  labels: Label[] = [];\r\n\r\n  // Map from label name to label id\r\n  labelMap: IStringDictionary<number> = {};\r\n\r\n  loopStack: LoopContext[] = [];\r\n  selectStack: number[] = [];\r\n\r\n  // declared functions map to 1. Array accesses are changed to function\r\n  // calls if they are in this map.\r\n  functionNames: IStringDictionary<number> = {};\r\n\r\n  // map from bytecode instruction to Locus, so that we can keep track of\r\n  // which source lines led to each instruction.\r\n  readonly lineMapping: Location[] = [];\r\n  lastLine = -1; // don't map lines twice in a row\r\n  readonly callMap = new Map<number, { name: string; location: Location }>();\r\n\r\n  constructor() {\r\n    // Array of Instruction objects\r\n    //this.instructions = [];\r\n\r\n    // Array of data from DATA statements.\r\n    // this.data = [];\r\n\r\n    // Set of shared variable names. If a string is a property of this object,\r\n    // then the variable with that name is shared.\r\n    // this.shared = {};\r\n\r\n    // Array of labels.\r\n    // this.labels = [];\r\n\r\n    // Map from label name to label id\r\n    // this.labelMap = {};\r\n\r\n    //this.loopStack = [];\r\n    //this.selectStack = [];\r\n\r\n    // declared functions map to 1. Array accesses are changed to function\r\n    // calls if they are in this map.\r\n    //this.functionNames = {};\r\n\r\n    //// map from bytecode instruction to Locus, so that we can keep track of\r\n    //// which source lines led to each instruction.\r\n    //this.lineMapping = [];\r\n    //this.lastLine = -1; // don't map lines twice in a row\r\n\r\n    // Create a label so RESTORE with no label will work.\r\n    this.getGotoLabel(':top');\r\n  }\r\n\r\n  link() {\r\n    // for each instruction,\r\n    for (let i = 0; i < this.instructions.length; i++) {\r\n      const instr = this.instructions[i];\r\n      // if the instruction has a code label for an argument, change its\r\n      // argument to the associated offset.\r\n      //if (instr.instr.addrLabel) {\r\n      //    instr.arg = this.labels[instr.arg].codeOffset;\r\n      //} else if (instr.instr.dataLabel) {\r\n      //    instr.arg = this.labels[instr.arg].dataOffset;\r\n      //}\r\n      if (instr.addrLabel) {\r\n        instr.arg = this.labels[instr.arg].codeOffset;\r\n      } else if (instr.dataLabel) {\r\n        instr.arg = this.labels[instr.arg].dataOffset;\r\n      }\r\n    }\r\n  }\r\n\r\n  newLabel(basename: string) {\r\n    const id = this.labels.length;\r\n    const name = basename + '_' + id;\r\n    this.labels.push(\r\n      new Label(name, this.instructions.length, this.data.length)\r\n    );\r\n    return id;\r\n  }\r\n\r\n  label(labelid: number) {\r\n    this.labels[labelid].codeOffset = this.instructions.length;\r\n    this.labels[labelid].dataOffset = this.data.length;\r\n  }\r\n\r\n  map(location: Location) {\r\n    // Keep track of which source line maps to which instruction.\r\n    if (location.line === this.lastLine) {\r\n      return;\r\n    }\r\n    this.lastLine = location.line;\r\n    this.lineMapping[this.instructions.length] = location;\r\n  }\r\n\r\n  getGotoLabel(name: string) {\r\n    let labelId;\r\n    if (name in this.labelMap) {\r\n      labelId = this.labelMap[name];\r\n    } else {\r\n      labelId = this.newLabel(name);\r\n      this.labelMap[name] = labelId;\r\n    }\r\n    return labelId;\r\n  }\r\n\r\n  write(name: string, arg?: number | string) {\r\n    const instr = Instructions[name](arg);\r\n    if (instr === undefined) {\r\n      throw 'Bad instruction: ' + name;\r\n    }\r\n    this.instructions.push(/*new Instruction(instr, arg)*/ instr);\r\n  }\r\n\r\n  visitProgram(program: AstProgram) {\r\n    for (let i = 0; i < program.subs.length; i++) {\r\n      program.subs[i].accept(this);\r\n    }\r\n\r\n    this.link();\r\n  }\r\n\r\n  visitDeclareFunction(node: AstDeclareFunction) {\r\n    this.functionNames[node.name] = 1;\r\n  }\r\n\r\n  visitSubroutine(node: AstSubroutine) {\r\n    let skipLabel = null;\r\n    this.map(node.location);\r\n    if (node.name != '_main') {\r\n      skipLabel = this.newLabel('skipsub');\r\n      this.write('JMP', skipLabel);\r\n      this.label(this.getGotoLabel(node.name));\r\n      for (let i = node.args.length - 1; i >= 0; i--) {\r\n        // pop each argument off the stack into a variable. The wantRef\r\n        // parameter of the AST node ensures that these evalauate\r\n        this.write('POPVAR', node.args[i].name);\r\n      }\r\n    }\r\n    node.statements.accept(this);\r\n    if (node.isFunction) {\r\n      // when the function returns, place its return value on the top of\r\n      // the stack.\r\n      this.write('PUSHVALUE', node.name);\r\n    }\r\n\r\n    this.write('RET', null);\r\n    if (skipLabel !== null) {\r\n      this.label(skipLabel);\r\n    } else {\r\n      this.write('END', null);\r\n    }\r\n  }\r\n\r\n  visitCallStatement(node: AstCallStatement) {\r\n    this.map(node.location);\r\n    for (let i = 0; i < node.args.length; i++) {\r\n      // This will push references, since wantRef was set by the type\r\n      // checker.\r\n      node.args[i].accept(this);\r\n    }\r\n\r\n    if (SystemSubroutines[node.name]) {\r\n      // Check if we need to push number of args\r\n      const sub = SystemSubroutines[node.name];\r\n      if (sub.args !== undefined && sub.minArgs !== undefined) {\r\n        this.write('PUSHCONST', node.args.length);\r\n      }\r\n      this.write('SYSCALL', node.name);\r\n    } else if (node.name == 'PRINT') {\r\n      this.write('PUSHCONST', node.args.length);\r\n      this.write('SYSCALL', node.name);\r\n    } else {\r\n      this.write('CALL', this.getGotoLabel(node.name));\r\n      this.callMap.set(this.instructions.length - 1, {\r\n        name: node.name,\r\n        location: node.location\r\n      });\r\n    }\r\n  }\r\n\r\n  visitArgument(_node: AstArgument) {}\r\n\r\n  visitPrintUsingStatement(node: AstPrintUsingStatement) {\r\n    // push format string, followed by all expressions, followed by\r\n    // terminator, followed by total number of arguments, then syscall it.\r\n    for (let i = 0; i < node.exprList.length; i++) {\r\n      node.exprList[i].accept(this);\r\n    }\r\n    this.write('PUSHCONST', node.terminator);\r\n    this.write('PUSHCONST', node.exprList.length + 1);\r\n    this.write('SYSCALL', 'print_using');\r\n  }\r\n\r\n  visitPrintStatement(node: AstPrintStatement) {\r\n    let newline = true;\r\n    this.map(node.location);\r\n    if (node.fileNumber) {\r\n      //   node.printItem.accept(this);\r\n      for (var i = 0; i < node.printItems.length; i++) {\r\n        node.printItems[i].accept(this);\r\n      }\r\n      this.write('PUSHCONST', node.printItems.length);\r\n      this.write('PUSHCONST', node.fileNumber);\r\n      this.write('SYSCALL', 'print_file');\r\n      return;\r\n    }\r\n    for (var i = 0; i < node.printItems.length; i++) {\r\n      node.printItems[i].accept(this);\r\n      if (node.printItems[i].type === AstPrintItem.TAB) {\r\n        this.write('SYSCALL', 'print_tab');\r\n      } else if (node.printItems[i].expr) {\r\n        this.write('SYSCALL', 'print');\r\n      }\r\n\r\n      if (node.printItems[i].terminator == ',') {\r\n        this.write('SYSCALL', 'print_comma');\r\n        newline = false;\r\n      } else if (node.printItems[i].terminator == ';') {\r\n        newline = false;\r\n      } else {\r\n        newline = true;\r\n      }\r\n    }\r\n\r\n    if (newline) {\r\n      this.write('PUSHCONST', '\\n');\r\n      this.write('SYSCALL', 'print');\r\n    }\r\n  }\r\n\r\n  visitPrintItem(node: AstPrintItem) {\r\n    if (node.expr) {\r\n      // if(typeof node.expr === \"string\"){\r\n      //     this.write(\"PUSHCONST\", node.expr);\r\n      //     return;\r\n      // }\r\n      node.expr.accept(this);\r\n    }\r\n  }\r\n\r\n  visitInputStatement(node: AstInputStatement) {\r\n    this.map(node.location);\r\n\r\n    // print the prompt, if any, and question mark, if required.\r\n    if (node.promptExprOrfileNumber) {\r\n      if (typeof node.promptExprOrfileNumber === 'string') {\r\n        const isLine = node.isLine;\r\n        this.write('PUSHCONST', isLine ? 1 : 0);\r\n\r\n        const reference = node.identifiersOrReference as AstVariableReference;\r\n        reference.wantRef = true;\r\n        reference.accept(this);\r\n\r\n        const fileNumber = node.promptExprOrfileNumber as string;\r\n        this.write('PUSHCONST', fileNumber);\r\n\r\n        this.write('SYSCALL', 'INPUT');\r\n        return;\r\n      }\r\n      node.promptExprOrfileNumber.accept(this);\r\n      this.write('SYSCALL', 'print');\r\n    }\r\n\r\n    if (node.printQuestionMark) {\r\n      this.write('PUSHCONST', '? ');\r\n      this.write('SYSCALL', 'print');\r\n    } else {\r\n      this.write('PUSHCONST', ' ');\r\n      this.write('SYSCALL', 'print');\r\n    }\r\n\r\n    // push onto the stack: identifiers\r\n    const identifiers = node.identifiersOrReference as any[];\r\n    for (let i = 0; i < /*node.*/ identifiers.length; i++) {\r\n      this.write('PUSHREF', /*node.*/ identifiers[i]);\r\n    }\r\n\r\n    this.write('PUSHCONST', /*node.*/ identifiers.length);\r\n    this.write('SYSCALL', 'INPUT');\r\n  }\r\n\r\n  visitNullStatement(_node: AstNullStatement) {}\r\n\r\n  visitEndStatement(node: AstEndStatement) {\r\n    this.map(node.location);\r\n    this.write('END', null);\r\n  }\r\n\r\n  visitForLoop(node: AstForLoop) {\r\n    this.map(node.location);\r\n    const forLabel = this.newLabel('for');\r\n    const nextLabel = this.newLabel('next');\r\n    const endLabel = this.newLabel('end_for');\r\n    this.loopStack.push(\r\n      new LoopContext(node.identifier, forLabel, nextLabel, endLabel)\r\n    );\r\n    node.startExpr.accept(this);\r\n    this.write('POPVAR', node.identifier);\r\n    node.endExpr.accept(this);\r\n    node.stepExpr.accept(this);\r\n    this.label(forLabel);\r\n    this.write('PUSHVALUE', node.identifier);\r\n    this.write('FORLOOP', endLabel);\r\n  }\r\n\r\n  visitNextStatement(node: AstNextStatement) {\r\n    this.map(node.location);\r\n    for (let i = 0; i < node.identifiers.length; i++) {\r\n      const ctx = this.loopStack.pop()!;\r\n\r\n      // stack is now:\r\n      // end\r\n      // step\r\n\r\n      this.label(ctx.nextLabel);\r\n      this.write('COPYTOP');\r\n      this.write('PUSHVALUE', ctx.counter);\r\n      this.write('+');\r\n      this.write('POPVAL', ctx.counter);\r\n      this.write('JMP', ctx.forLabel);\r\n      this.label(ctx.endLabel);\r\n    }\r\n  }\r\n\r\n  visitExitStatement(node: any) {\r\n    // Guaranteed to work due to type checker.\r\n    const context = this.loopStack[this.loopStack.length - 1];\r\n\r\n    if (context.counter) {\r\n      // It's a FOR loop. Pop off the step and end value.\r\n      this.write('POP');\r\n      this.write('POP');\r\n    }\r\n\r\n    this.write('JMP', context.endLabel);\r\n  }\r\n\r\n  visitArrayDeref(node: any) {\r\n    this.map(node.location);\r\n    // check if it's really a function call.\r\n    if (\r\n      node.expr instanceof AstVariableReference &&\r\n      this.functionNames[node.expr.name]\r\n    ) {\r\n      node.parameters.accept(this);\r\n      this.write('CALL', this.getGotoLabel(node.expr.name));\r\n    } else if (\r\n      node.expr instanceof AstVariableReference &&\r\n      SystemFunctions[node.expr.name]\r\n    ) {\r\n      const func = SystemFunctions[node.expr.name];\r\n      node.parameters.accept(this);\r\n      if (func.minArgs < func.args.length) {\r\n        // variable number of arguments.\r\n        this.write('PUSHCONST', node.parameters.length);\r\n      }\r\n      node.expr.accept(this);\r\n    } else {\r\n      node.parameters.accept(this);\r\n      node.expr.accept(this);\r\n      if (node.parameters.length > 0) {\r\n        this.write('ARRAY_DEREF', node.wantRef);\r\n      } else {\r\n        // eg, calling a function with an array as a parameter.\r\n      }\r\n    }\r\n  }\r\n\r\n  visitMemberDeref(node: AstMemberDeref) {\r\n    this.map(node.location);\r\n    node.lhs.accept(this);\r\n    if (node.wantRef) {\r\n      this.write('MEMBER_DEREF', node.identifier);\r\n    } else {\r\n      this.write('MEMBER_VALUE', node.identifier);\r\n    }\r\n  }\r\n\r\n  visitVariableReference(node: AstVariableReference) {\r\n    this.map(node.location);\r\n    if (SystemFunctions[node.name]) {\r\n      this.write('SYSCALL', node.name);\r\n    } else if (this.functionNames[node.name]) {\r\n      this.write('CALL', this.getGotoLabel(node.name));\r\n      if (node.wantRef) {\r\n        this.write('NEW', node.type.name);\r\n      }\r\n    } else if (node.wantRef || IsArrayType(node.type)) {\r\n      this.write('PUSHREF', node.name);\r\n    } else {\r\n      this.write('PUSHVALUE', node.name);\r\n    }\r\n  }\r\n\r\n  visitRange(_node: AstRange) {}\r\n\r\n  visitDataStatement(node: AstDataStatement) {\r\n    for (let i = 0; i < node.data.length; i++) {\r\n      // type is constantexpr\r\n      this.data.push(node.data[i].value);\r\n    }\r\n  }\r\n\r\n  visitReturnStatement(node: AstReturnStatement) {\r\n    this.map(node.location);\r\n    this.write('RET');\r\n  }\r\n\r\n  visitRestoreStatement(node: any) {\r\n    this.map(node.location);\r\n    let where = 0;\r\n    if (node.label) {\r\n      where = this.getGotoLabel(node.label);\r\n    } else {\r\n      where = this.getGotoLabel(':top');\r\n    }\r\n    this.write('RESTORE', where);\r\n  }\r\n\r\n  visitConstStatement(constStatement: AstConstStatement) {\r\n    this.shared[constStatement.name] = true;\r\n    constStatement.expr.accept(this);\r\n    this.write('POPVAL', constStatement.name);\r\n  }\r\n\r\n  visitDefTypeStatement(def: any) {}\r\n\r\n  visitDimStatement(node: AstDimStatement) {\r\n    this.map(node.location);\r\n    let typeName;\r\n\r\n    // if there is a typename,\r\n    if (node.typeName) {\r\n      typeName = node.typeName;\r\n    } else {\r\n      // use default type (INTEGER)\r\n      typeName = 'INTEGER';\r\n    }\r\n\r\n    if (node.shared) {\r\n      this.shared[node.name] = true; //1;\r\n    }\r\n\r\n    // if there are ranges,\r\n    if (node.ranges.length > 0) {\r\n      // for each range\r\n      for (let i = 0; i < node.ranges.length; i++) {\r\n        node.ranges[i].lowerExpr.accept(this);\r\n        node.ranges[i].upperExpr.accept(this);\r\n      }\r\n      // push number of ranges.\r\n      this.write('PUSHCONST', node.ranges.length);\r\n      // push typename\r\n      this.write('PUSHTYPE', typeName);\r\n      // syscall alloc.\r\n      this.write('SYSCALL', 'alloc_array');\r\n      // pop it into the variable name.\r\n      this.write('POPVAR', node.name);\r\n    } else {\r\n      // just create a single instance and pop it into the name.\r\n      this.write('PUSHTYPE', typeName);\r\n      this.write('SYSCALL', 'alloc_scalar');\r\n      this.write('POPVAR', node.name);\r\n    }\r\n  }\r\n\r\n  visitDoStatement(node: AstDoStatement) {\r\n    this.map(node.location);\r\n    const top = this.newLabel('do');\r\n    const bottom = this.newLabel('loop');\r\n    this.label(top);\r\n\r\n    this.loopStack.push(new LoopContext(null, null, null, bottom));\r\n    node.statements.accept(this);\r\n    this.loopStack.pop();\r\n    switch (node.type) {\r\n      case AstDoStatement.UNTIL:\r\n        node.expr.accept(this);\r\n        this.write('BZ', top);\r\n        break;\r\n\r\n      case AstDoStatement.WHILE_AT_END:\r\n        node.expr.accept(this);\r\n        this.write('BNZ', top);\r\n        break;\r\n\r\n      case AstDoStatement.INFINITE:\r\n        this.write('JMP', top);\r\n        break;\r\n    }\r\n\r\n    this.label(bottom);\r\n  }\r\n\r\n  visitWhileLoop(node: AstWhileLoop) {\r\n    this.map(node.location);\r\n    const top = this.newLabel('while');\r\n    const bottom = this.newLabel('wend');\r\n    this.label(top);\r\n    node.expr.accept(this);\r\n    this.write('BZ', bottom);\r\n    this.loopStack.push(new LoopContext(null, null, null, bottom));\r\n    node.statements.accept(this);\r\n    this.loopStack.pop();\r\n    this.write('JMP', top);\r\n    this.label(bottom);\r\n  }\r\n\r\n  visitIfStatement(node: AstIfStatement) {\r\n    this.map(node.location);\r\n    const endLabel = this.newLabel('endif');\r\n    const elseLabel = this.newLabel('else');\r\n\r\n    node.expr.accept(this);\r\n    this.write('BZ', elseLabel);\r\n    node.statements.accept(this);\r\n\r\n    // Elseの位置を記録する\r\n    // this.map({ line: this.lastLine + 1, position: 0 });\r\n    this.write('JMP', endLabel);\r\n\r\n    this.label(elseLabel);\r\n\r\n    if (node.elseStatements) {\r\n      node.elseStatements.accept(this);\r\n      // this.map({ line: this.lastLine + 1, position: 0 });\r\n      this.write('JMP', endLabel);\r\n    }\r\n\r\n    this.label(endLabel);\r\n  }\r\n\r\n  visitSelectStatement(node: AstSelectStatement) {\r\n    this.map(node.location);\r\n    const endSelect = this.newLabel('end_select');\r\n    this.selectStack.push(endSelect);\r\n    node.expr.accept(this);\r\n    //node.cases.accept(this);\r\n    for (const _case of node.cases) {\r\n      _case.accept(this);\r\n    }\r\n    this.label(endSelect);\r\n    this.write('POP');\r\n    this.selectStack.pop();\r\n  }\r\n\r\n  visitCaseStatement(node: AstCaseStatement) {\r\n    this.map(node.location);\r\n    if (node.exprList.length > 0) {\r\n      const okayLabel = this.newLabel('case_okay');\r\n      const skipLabel = this.newLabel('case_skip');\r\n      for (let i = 0; i < node.exprList.length; i++) {\r\n        this.write('COPYTOP');\r\n        node.exprList[i].accept(this);\r\n        this.write('=');\r\n        this.write('BNZ', okayLabel);\r\n      }\r\n      this.write('JMP', skipLabel);\r\n      this.label(okayLabel);\r\n\r\n      node.statements.accept(this);\r\n      this.write('JMP', this.selectStack[this.selectStack.length - 1]);\r\n      this.label(skipLabel);\r\n    } else {\r\n      // case else.\r\n      node.statements.accept(this);\r\n    }\r\n  }\r\n\r\n  visitTypeMember(node: any) {}\r\n\r\n  visitUserType(node: UserType) {}\r\n\r\n  visitGotoStatement(node: AstGotoStatement) {\r\n    this.map(node.location);\r\n    const labelId = this.getGotoLabel(node.label);\r\n    this.write('JMP', labelId);\r\n  }\r\n  visitGosub(node: AstGosubStatement) {\r\n    this.map(node.location);\r\n    const labelId = this.getGotoLabel(node.label);\r\n    this.write('GOSUB', labelId);\r\n  }\r\n\r\n  visitLabel(node: any) {\r\n    this.label(this.getGotoLabel(node.label));\r\n  }\r\n\r\n  visitAssignStatement(node: AstAssignStatement) {\r\n    this.map(node.location);\r\n    node.expr.accept(this);\r\n\r\n    if (\r\n      node.lhs instanceof AstVariableReference &&\r\n      this.functionNames[node.lhs.name]\r\n    ) {\r\n      // it was actually a function call.\r\n      this.write('POPVAL', node.lhs.name);\r\n    } else {\r\n      node.lhs.accept(this);\r\n      this.write('ASSIGN');\r\n    }\r\n  }\r\n\r\n  visitBinaryOp(node: AstBinaryOp) {\r\n    this.map(node.location);\r\n    node.lhs.accept(this);\r\n    node.rhs.accept(this);\r\n    this.write(node.op);\r\n    if (node.wantRef) {\r\n      this.write('NEW', node.type.name);\r\n    }\r\n  }\r\n\r\n  visitUnaryOperator(node: AstUnaryOperator) {\r\n    this.map(node.location);\r\n    node.expr.accept(this);\r\n    this.write('UNARY_OP', node.op);\r\n    if (node.wantRef) {\r\n      this.write('NEW', node.type.name);\r\n    }\r\n  }\r\n\r\n  visitConstantExpr(node: AstConstantExpr) {\r\n    this.map(node.location);\r\n    this.write('PUSHCONST', node.value);\r\n    if (node.wantRef) {\r\n      this.write('NEW', node.type.name);\r\n    }\r\n  }\r\n\r\n  visitOpenStatement(node: AstOpenStatement) {\r\n    this.map(node.location);\r\n\r\n    node.expr.accept(this);\r\n\r\n    if (node.mode == 'INPUT') {\r\n      this.write('PUSHCONST', '1');\r\n    } else {\r\n      this.write('PUSHCONST', '0');\r\n    }\r\n\r\n    this.write('PUSHCONST', node.fileNumber);\r\n    // // print the prompt, if any, and question mark, if required.\r\n    // if (node.promptExpr) {\r\n    //     node.promptExpr.accept(this);\r\n    //     this.write(\"SYSCALL\", \"print\");\r\n    // }\r\n\r\n    // if (node.printQuestionMark) {\r\n    //     this.write(\"PUSHCONST\", \"? \");\r\n    //     this.write(\"SYSCALL\", \"print\");\r\n    // } else {\r\n    //     this.write(\"PUSHCONST\", \" \");\r\n    //     this.write(\"SYSCALL\", \"print\");\r\n    // }\r\n\r\n    // // push onto the stack: identifiers\r\n    // for (var i = 0; i < node.identifiers.length; i++) {\r\n    //     this.write(\"PUSHREF\", node.identifiers[i]);\r\n    // }\r\n\r\n    // this.write(\"PUSHCONST\", node.identifiers.length);\r\n    this.write('SYSCALL', 'OPEN');\r\n  }\r\n}\r\n","import { VirtualMachine } from '../VirtualMachine';\r\nimport { SystemFunctions } from '../../SystemFunctions';\r\nimport { SystemSubroutines } from '../../SystemSubroutines';\r\nimport { StackFrame } from '../../StackFrame';\r\nimport { ArrayVariable } from '../../ArrayVariable';\r\nimport { Dimension } from '../../Dimension';\r\nimport { ScalarVariable } from '../../ScalarVariable';\r\nimport { IStringDictionary } from '../../base/common/collections';\r\nimport { Instruction } from './instruction';\r\nimport { setLineContent } from '../../file/file';\r\n\r\n/**\r\n Defines the instruction set of the virtual machine. Each entry is indexed by\r\n the name of the instruction, and consists of a record of the following values:\r\n\r\n name: The name of the instruction for display purposes.\r\n\r\n addrLabel: If present, and set to \"true\", the argument of the instruction is\r\n interpretted as an address during the linking stage.\r\n \r\n dataLabel: If present, and set to \"true\", the argument of the instruction is\r\n the index of a DATA statement.\r\n\r\n numArgs: If present and set to 0, the instruction takes no arguments.\r\n Otherwise, it is assumed to take 1 argument.\r\n\r\n execute: A function taking as its first argument the virtual machine, and as\r\n its second argument the parameter of the instruction. It should manipulate the\r\n virtual machine's stack or program counter to implement the instruction.\r\n */\r\n\r\nclass ForLoop extends Instruction<number> {\r\n  name = 'forloop';\r\n  addrLabel = true;\r\n\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: number) {\r\n    // For loops are tedious to implement in bytecode, because\r\n    // depending on whether STEP is positive or negative we either\r\n    // compare the counter with < or >. To simplify things, we create\r\n    // the forloop instruction to perform this comparison.\r\n\r\n    // argument is the address of the end of the for loop.\r\n\r\n    // stack is:\r\n    // end value\r\n    // step expression\r\n    // loop variable REFERENCE\r\n\r\n    // if the for loop is ended, then all three of its arguments are\r\n    // popped off the stack, and we jump to the end address. Otherwise,\r\n    // only the loop variable is popped and no branch is performed.\r\n\r\n    const counter = vm.stack[vm.stack.length - 1];\r\n    const step = vm.stack[vm.stack.length - 2];\r\n    const end = vm.stack[vm.stack.length - 3];\r\n\r\n    if ((step < 0 && counter < end) || (step > 0 && counter > end)) {\r\n      //vm.stack.length -= 3;\r\n      vm.stack.pop();\r\n      vm.stack.pop();\r\n      vm.stack.pop();\r\n      vm.pc = arg;\r\n    } else {\r\n      vm.stack.pop();\r\n    }\r\n  }\r\n}\r\n\r\nclass CopyTop extends Instruction<any> {\r\n  name = 'copytop';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Duplicates the top of the stack\r\n    vm.stack.push(vm.stack[vm.stack.length - 1]);\r\n  }\r\n}\r\n\r\nclass Restore extends Instruction<number> {\r\n  name = 'restore';\r\n  dataLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Restore the data pointer to the given value.\r\n    if (vm.debug) {\r\n      vm.trace.printf('RESTORE to %s\\n', arg);\r\n    }\r\n    vm.dataPtr = arg;\r\n  }\r\n}\r\n\r\nclass PopVal extends Instruction {\r\n  name = 'popval';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Argument is the name of the variable. Sets that variable's value\r\n    // to the top of the stack.\r\n\r\n    // vm.getVariable(arg).value = <any>vm.stack.pop();\r\n    const variable = vm.getVariable(arg);\r\n    variable.value = <any>vm.stack.pop();\r\n  }\r\n}\r\n\r\nclass Pop extends Instruction {\r\n  name = 'pop';\r\n  numArgs = 0;\r\n  constructor() {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.pop();\r\n  }\r\n}\r\n\r\nclass PushRef extends Instruction {\r\n  name = 'pushref';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // The argument is the name of a variable. Push a reference to that\r\n    // variable onto the top of the stack.\r\n    vm.stack.push(vm.getVariable(arg));\r\n  }\r\n}\r\n\r\nclass PushValue extends Instruction {\r\n  readonly name = 'pushvalue';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: string) {\r\n    // The argument is the name of a variable. Push the value of that\r\n    // variable to the top of the stack.\r\n    vm.stack.push(vm.getVariable(arg).value);\r\n  }\r\n}\r\nclass PushType extends Instruction {\r\n  name = 'pushtype';\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // The argument is the name of a built-in or user defined type.\r\n    // Push the type object onto the stack, for later use in an alloc\r\n    // system call.\r\n    vm.stack.push(vm.types[arg]);\r\n  }\r\n}\r\n\r\nclass PopVar extends Instruction {\r\n  name = 'popvar';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: string) {\r\n    // Sets the given variable to refer to the top of the stack, and\r\n    // pops the top of the stack. The stack top must be a reference.\r\n    vm.setVariable(arg, vm.stack.pop());\r\n  }\r\n}\r\n\r\nclass New extends Instruction {\r\n  name = 'new';\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // The argument is a typename. Replace the top of the stack with a\r\n    // reference to that value, with the given type.\r\n    const type = vm.types[arg];\r\n    vm.stack.push(new ScalarVariable(type, (<any>type).copy(vm.stack.pop())));\r\n  }\r\n}\r\n\r\nclass End extends Instruction {\r\n  name = 'end';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // End the program. The CPU ends the program when the program\r\n    // counter reaches the end of the instructions, so make that happen\r\n    // now.\r\n    vm.pc = vm.instructions.length;\r\n  }\r\n}\r\n\r\nclass UnaryOp extends Instruction {\r\n  name = 'unary_op';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: string) {\r\n    const rhs = vm.stack.pop();\r\n    let value;\r\n    if (arg == 'NOT') {\r\n      // value = ~rhs;\r\n      value = Number(!rhs);\r\n    } else if (arg == '-') {\r\n      value = -rhs;\r\n    } else {\r\n      vm.trace.printf('No such unary operator: %s\\n', arg);\r\n    }\r\n\r\n    vm.stack.push(value);\r\n  }\r\n}\r\nclass OperatorEquality extends Instruction {\r\n  name = '=';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.push(vm.stack.pop() === vm.stack.pop() ? -1 : 0);\r\n  }\r\n}\r\nclass OperatorLessThan extends Instruction {\r\n  name = '<';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = vm.stack.pop();\r\n    const lhs = vm.stack.pop();\r\n    vm.stack.push(lhs < rhs ? -1 : 0);\r\n  }\r\n}\r\nclass OperatorLessThanOrEqual extends Instruction {\r\n  name = '<=';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = vm.stack.pop();\r\n    const lhs = vm.stack.pop();\r\n    vm.stack.push(lhs <= rhs ? -1 : 0);\r\n  }\r\n}\r\n\r\nclass OperatorGreaterThan extends Instruction {\r\n  name = '>';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = vm.stack.pop();\r\n    const lhs = vm.stack.pop();\r\n    vm.stack.push(lhs > rhs ? -1 : 0);\r\n  }\r\n}\r\n\r\nclass OperatorGreaterThanOrEqual extends Instruction {\r\n  name = '>=';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = vm.stack.pop();\r\n    const lhs = vm.stack.pop();\r\n    vm.stack.push(lhs >= rhs ? -1 : 0);\r\n  }\r\n}\r\nclass OperatorNotEquality extends Instruction {\r\n  name = '<>';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.push(vm.stack.pop() !== vm.stack.pop() ? -1 : 0);\r\n  }\r\n}\r\n\r\nclass And extends Instruction {\r\n  name = 'and';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.push((<number>vm.stack.pop()) & (<number>vm.stack.pop()));\r\n  }\r\n}\r\n\r\nclass Or extends Instruction {\r\n  name = 'or';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.push((<number>vm.stack.pop()) | (<number>vm.stack.pop()));\r\n  }\r\n}\r\nclass OperatorPlus extends Instruction {\r\n  name = '+';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = <number>vm.stack.pop();\r\n    const lhs = <number>vm.stack.pop();\r\n    vm.stack.push(lhs + rhs);\r\n  }\r\n}\r\n\r\nclass OperatorMinus extends Instruction {\r\n  name = '-';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    const rhs = <number>vm.stack.pop();\r\n    const lhs = <number>vm.stack.pop();\r\n    vm.stack.push(lhs - rhs);\r\n  }\r\n}\r\n\r\nclass OperatorMultiply extends Instruction {\r\n  name = '*';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    vm.stack.push(<number>vm.stack.pop() * <number>vm.stack.pop());\r\n  }\r\n}\r\nclass OperatorDivide extends Instruction {\r\n  name = '/';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // TODO: Division by 0 error. Javascript simply results in NaN\r\n    // TODO: \\ operator.\r\n    const rhs = <number>vm.stack.pop();\r\n    const lhs = <number>vm.stack.pop();\r\n    vm.stack.push(lhs / rhs);\r\n  }\r\n}\r\n\r\nclass OperatorCaret extends Instruction {\r\n  name = '^';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // TODO: Division by 0 error. Javascript simply results in NaN\r\n    // TODO: \\ operator.\r\n    const rhs = <number>vm.stack.pop();\r\n    const lhs = <number>vm.stack.pop();\r\n    vm.stack.push(lhs ** rhs);\r\n  }\r\n}\r\n\r\nclass MOD extends Instruction {\r\n  name = 'mod';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // TODO: Division by 0 error. Javascript simply results in NaN\r\n    const rhs = <number>vm.stack.pop();\r\n    const lhs = <number>vm.stack.pop();\r\n    vm.stack.push(lhs % rhs);\r\n  }\r\n}\r\n\r\nclass BZ extends Instruction<number> {\r\n  name = 'bz';\r\n  addrLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n    // The “BZ” means “Branch on Condition Zero”.\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Branch on zero. Pop the top of the stack. If zero, jump to\r\n    // the given address.\r\n    const expr = vm.stack.pop();\r\n    if (!expr) {\r\n      vm.pc = arg;\r\n    }\r\n  }\r\n}\r\n\r\nclass BNZ extends Instruction<number> {\r\n  name = 'bnz';\r\n  addrLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Branch on non-zero. Pop the top of the stack. If non-zero, jump\r\n    // to the given address.\r\n    const expr = vm.stack.pop();\r\n    if (expr !== 0) {\r\n      vm.pc = arg;\r\n    }\r\n  }\r\n}\r\n\r\nclass JMP extends Instruction<number> {\r\n  name = 'jmp';\r\n  addrLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Jump to the given address.\r\n    vm.pc = arg;\r\n  }\r\n}\r\n\r\nclass CALL extends Instruction<number> {\r\n  name = 'call';\r\n  addrLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: number) {\r\n    // Call a function or subroutine. This creates a new stackframe\r\n    // with no variables defined.\r\n    vm.frame = new StackFrame(vm.pc);\r\n    vm.callstack.push(vm.frame);\r\n    vm.pc = arg;\r\n  }\r\n}\r\n\r\nclass GOSUB extends Instruction<number> {\r\n  name = 'gosub';\r\n  addrLabel = true;\r\n  constructor(public arg: number) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: number) {\r\n    // like call, but stack frame shares all variables from the old\r\n    // stack frame.\r\n    const oldvariables = vm.frame.variables;\r\n    vm.frame = new StackFrame(vm.pc);\r\n    vm.frame.variables = oldvariables;\r\n    vm.callstack.push(vm.frame);\r\n    vm.pc = arg;\r\n  }\r\n}\r\n\r\nclass RET extends Instruction<any> {\r\n  name = 'ret';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Return from a gosub, function, or subroutine call.\r\n    vm.pc = vm.callstack.pop().pc;\r\n    vm.frame = vm.callstack[vm.callstack.length - 1];\r\n  }\r\n}\r\n\r\nclass PUSHCONST extends Instruction {\r\n  name = 'pushconst';\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Push a constant value onto the stack. The argument is a\r\n    // javascript string or number.\r\n\r\n    vm.stack.push(arg);\r\n  }\r\n}\r\n\r\nclass ARRAY_DEREF extends Instruction {\r\n  name = 'array_deref';\r\n  numArgs = 1;\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Dereference an array. The top of the stack is the variable\r\n    // reference, followed by an integer for each dimension.\r\n\r\n    // Argument is whether we want the reference or value.\r\n\r\n    // get the variable\r\n    const variable = <ArrayVariable>vm.stack.pop();\r\n\r\n    const indexes: any[] = [];\r\n\r\n    // for each dimension,\r\n    for (let i = 0; i < variable.dimensions.length; i++) {\r\n      // pop it off the stack in reverse order.\r\n      indexes.unshift(vm.stack.pop());\r\n    }\r\n\r\n    // TODO: bounds checking.\r\n    if (arg) {\r\n      vm.stack.push(variable.access(indexes));\r\n    } else {\r\n      vm.stack.push(variable.access(indexes).value);\r\n    }\r\n  }\r\n}\r\n\r\nclass MEMBER_DEREF extends Instruction {\r\n  name = 'member_deref';\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Dereference a user defined type member.\r\n    // Argument is the javascript string containing the name of the\r\n    // member. The top of the stack is a reference to the user\r\n    // variable.\r\n\r\n    const userVariable: any = vm.stack.pop();\r\n    const deref = userVariable[arg];\r\n    vm.stack.push(deref);\r\n  }\r\n}\r\n\r\nclass MEMBER_VALUE extends Instruction {\r\n  name = 'member_value';\r\n  constructor(public arg: any) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Dereference a user defined type member.\r\n    // Argument is the javascript string containing the name of the\r\n    // member. The top of the stack is a reference to the user\r\n    // variable.\r\n\r\n    const userVariable: any = vm.stack.pop();\r\n    const deref = userVariable[arg];\r\n    vm.stack.push(deref.value);\r\n  }\r\n}\r\n\r\nclass ASSIGN extends Instruction {\r\n  name = 'assign';\r\n  numArgs = 0;\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    // Copy the value into the variable reference.\r\n    // Stack: left hand side: variable reference\r\n    // right hand side: value to assign.\r\n\r\n    const lhs = <ScalarVariable>vm.stack.pop();\r\n    const rhs = <ScalarVariable>vm.stack.pop();\r\n\r\n    lhs.value = (<any>lhs.type).copy(rhs);\r\n  }\r\n}\r\nclass SYSCALL extends Instruction<string> {\r\n  name = 'syscall';\r\n  constructor(public arg: string) {\r\n    super();\r\n  }\r\n  execute(vm: VirtualMachine, arg: any) {\r\n    let variable;\r\n    let type: any;\r\n    let x;\r\n    let spaces;\r\n    let i;\r\n    // Execute a system function or subroutine. The argument is a\r\n    // javascript string containing the name of the routine.\r\n    if (vm.debug) {\r\n      vm.trace.printf('Execute syscall %s\\n', arg);\r\n    }\r\n\r\n    if (arg === 'print_file') {\r\n      const fileNumber = vm.stack.pop() as string;\r\n      const length = vm.stack.pop() as number;\r\n      let value = '';\r\n      for (let i = 0; i < length; ++i) {\r\n        value = (vm.stack.pop() as string) + value;\r\n      }\r\n\r\n      setLineContent(fileNumber, value);\r\n\r\n      return;\r\n    }\r\n    if (arg == 'print') {\r\n      const num = 1;\r\n      for (i = 0; i < num; i++) {\r\n        const what = vm.stack.pop();\r\n        if (vm.debug) {\r\n          vm.trace.printf('printing %s\\n', what);\r\n        }\r\n        vm.cons.print('' + what);\r\n      }\r\n    } else if (arg == 'alloc_array') {\r\n      type = vm.stack.pop();\r\n      const numDimensions = vm.stack.pop();\r\n      const dimensions = [];\r\n      for (i = 0; i < numDimensions; i++) {\r\n        const upper = <number>vm.stack.pop();\r\n        const lower = <number>vm.stack.pop();\r\n        dimensions.unshift(new Dimension(lower, upper));\r\n      }\r\n\r\n      variable = new ArrayVariable(type, dimensions);\r\n      vm.stack.push(variable);\r\n    } else if (arg == 'print_comma') {\r\n      x = vm.cons.x;\r\n      spaces = '';\r\n      while (++x % 14) {\r\n        spaces += ' ';\r\n      }\r\n      vm.cons.print(spaces);\r\n    } else if (arg == 'print_tab') {\r\n      const col = <number>vm.stack.pop() - 1;\r\n      x = vm.cons.x;\r\n      spaces = '';\r\n      while (++x < col) {\r\n        spaces += ' ';\r\n      }\r\n      vm.cons.print(spaces);\r\n    } else if (arg == 'alloc_scalar') {\r\n      type = vm.stack.pop();\r\n      variable = new ScalarVariable(type, type.createInstance());\r\n      vm.stack.push(variable);\r\n    } else if (SystemFunctions[arg]) {\r\n      SystemFunctions[arg].action(vm);\r\n    } else if (SystemSubroutines[arg]) {\r\n      SystemSubroutines[arg].action(vm);\r\n    } else {\r\n      vm.cons.print('Unknown syscall: ' + arg);\r\n    }\r\n  }\r\n}\r\nexport const Instructions: IStringDictionary<(arg: any) => Instruction<any>> = {\r\n  FORLOOP: (arg: number) => new ForLoop(arg),\r\n  COPYTOP: () => new CopyTop(),\r\n  RESTORE: (arg: number) => new Restore(arg),\r\n  POPVAL: (arg: string) => new PopVal(arg),\r\n  POP: () => new Pop(),\r\n  PUSHREF: (arg: string) => new PushRef(arg),\r\n  PUSHVALUE: (arg: string) => new PushValue(arg),\r\n  PUSHTYPE: (arg: any) => new PushType(arg),\r\n  POPVAR: (arg: string) => new PopVar(arg),\r\n  NEW: (arg: any) => new New(arg),\r\n  END: () => new End(),\r\n  UNARY_OP: (arg: string) => new UnaryOp(arg),\r\n  '=': () => new OperatorEquality(),\r\n  '<': () => new OperatorLessThan(),\r\n  '<=': () => new OperatorLessThanOrEqual(),\r\n  '>': () => new OperatorGreaterThan(),\r\n  '>=': () => new OperatorGreaterThanOrEqual(),\r\n  '<>': () => new OperatorNotEquality(),\r\n  AND: () => new And(),\r\n  OR: () => new Or(),\r\n  '+': () => new OperatorPlus(),\r\n  '-': () => new OperatorMinus(),\r\n  '*': () => new OperatorMultiply(),\r\n  '/': () => new OperatorDivide(),\r\n  '^': () => new OperatorCaret(),\r\n  MOD: () => new MOD(),\r\n  BZ: (arg: number) => new BZ(arg),\r\n  BNZ: (arg: number) => new BNZ(arg),\r\n  JMP: (arg: number) => new JMP(arg),\r\n  CALL: (arg: number) => new CALL(arg),\r\n  GOSUB: (arg: number) => new GOSUB(arg),\r\n  RET: () => new RET(),\r\n  PUSHCONST: (arg: any) => new PUSHCONST(arg),\r\n  ARRAY_DEREF: (arg: any) => new ARRAY_DEREF(arg),\r\n  MEMBER_DEREF: (arg: any) => new MEMBER_DEREF(arg),\r\n  MEMBER_VALUE: (arg: any) => new MEMBER_VALUE(arg),\r\n  ASSIGN: () => new ASSIGN(),\r\n  SYSCALL: (arg: string) => new SYSCALL(arg)\r\n};\r\n","import { Dimension } from './Dimension';\r\nimport { ScalarVariable } from './ScalarVariable';\r\nimport { DoubleType } from './types/DoubleType';\r\nimport { IntegerType } from './types/IntegerType';\r\nimport { NullType } from './types/NullType';\r\nimport { SingleType } from './types/SingleType';\r\nimport { StringType } from './types/StringType';\r\nimport Variable from './Variable';\r\n\r\n/** @constructor */\r\nexport class ArrayVariable extends Variable {\r\n  value?: any; // コンパイルを通すため一時的な措置\r\n  values: ScalarVariable[] = [];\r\n  _values: ScalarVariable[] = [];\r\n  constructor(\r\n    public type: DoubleType | IntegerType | NullType | SingleType | StringType,\r\n    public dimensions: Dimension[]\r\n  ) {\r\n    super();\r\n    // this.type = type;\r\n    // this.dimensions = dimensions;\r\n    // this.values = [];\r\n    let totalSize = 1;\r\n    let i;\r\n\r\n    for (let i = 0; i < this.dimensions.length; i++) {\r\n      totalSize *= this.dimensions[i].upper - this.dimensions[i].lower + 1;\r\n    }\r\n\r\n    for (let i = 0; i < totalSize; i++) {\r\n      this.values.push(\r\n        new ScalarVariable(this.type, this.type.createInstance())\r\n      );\r\n    }\r\n  }\r\n\r\n  copy() {\r\n    return this;\r\n  }\r\n\r\n  getIndex(indexes: number[]) {\r\n    let mult = 1;\r\n    let index = 0;\r\n\r\n    //dbg.printf(\"Access array indexes: %s\\n\", indexes);\r\n    for (let i = this.dimensions.length - 1; i >= 0; i--) {\r\n      index += (indexes[i] - this.dimensions[i].lower) * mult;\r\n      mult *= this.dimensions[i].upper - this.dimensions[i].lower + 1;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  assign(indexes: number[], value: ScalarVariable) {\r\n    let index = this.getIndex(indexes);\r\n    //dbg.printf(\"Assign %s to array index %d\\n\", value, index);\r\n    this.values[index] = value;\r\n  }\r\n\r\n  access(indexes: number[] /*, value*/) {\r\n    let index = this.getIndex(indexes);\r\n    //dbg.printf(\"access array index %d\\n\", index);\r\n\r\n    return this.values[index];\r\n  }\r\n}\r\n","/** @constructor */\r\nexport class Dimension {\r\n  constructor(readonly lower: number, readonly upper: number) {\r\n    //this.lower = lower;\r\n    //this.upper = upper;\r\n  }\r\n}\r\n","import { VirtualMachine } from '../VirtualMachine';\r\n\r\nexport abstract class Instruction<T = any> {\r\n  addrLabel?: boolean;\r\n  dataLabel?: boolean;\r\n  name: string;\r\n  numArgs?: number;\r\n  arg?: T;\r\n\r\n  abstract execute(vm: VirtualMachine, arg: T): void;\r\n\r\n  public toString() {\r\n    if (this.numArgs === 0) {\r\n      return this.name;\r\n    }\r\n    // if (this.arg) {\r\n    return this.name + ' ' + this.arg;\r\n    // }\r\n\r\n    // return this.name;\r\n  }\r\n}\r\n","/** @constructor */\r\nexport class Label {\r\n  constructor(\r\n    public name: string,\r\n    public codeOffset: number,\r\n    public dataOffset: number\r\n  ) {\r\n    // this.name = name;\r\n    // this.codeOffset = codeOffset;\r\n    // this.dataOffset = dataOffset;\r\n  }\r\n}\r\n","/** @constructor */\r\n\r\nexport class LoopContext {\r\n  constructor(\r\n    public counter: number,\r\n    public forLabel: number,\r\n    public nextLabel: number,\r\n    public endLabel: number\r\n  ) {\r\n    // In a DO or WHILE loop, only endLabel is valid.\r\n    //this.counter = counter;\r\n    //this.forLabel = forLabel;\r\n    //this.nextLabel = nextLabel;\r\n    //this.endLabel = endLabel;\r\n  }\r\n}\r\n","import { AstDeclareFunction } from './node/AstDeclareFunction';\r\nimport { AstArgument } from './node/AstArgument';\r\nimport { AstEndStatement } from './node/AstEndStatement';\r\nimport { AstNullStatement } from './node/AstNullStatement';\r\nimport { AstAssignStatement } from './node/AstAssignStatement';\r\nimport { AstBinaryOp } from './node/AstBinaryOp';\r\nimport { AstCallStatement } from './node/AstCallStatement';\r\nimport { AstCaseStatement } from './node/AstCaseStatement';\r\nimport { AstConstStatement } from './node/AstConstStatement';\r\nimport { AstExitStatement } from './node/AstExitStatement';\r\nimport { AstConstantExpr } from './node/AstConstantExpr';\r\nimport { AstGosubStatement } from './node/AstGosubStatement';\r\nimport { AstGotoStatement } from './node/AstGotoStatement';\r\nimport { AstInputStatement } from './node/AstInputStatement';\r\nimport { AstPrintItem } from './node/AstPrintItem';\r\nimport { AstLabel } from './node/AstLabel';\r\nimport { AstDoStatement } from './node/AstDoStatement';\r\nimport { AstTypeMember } from './node/AstTypeMember';\r\nimport { AstNextStatement } from './node/AstNextStatement';\r\nimport { AstSelectStatement } from './node/AstSelectStatement';\r\nimport { AstRestoreStatement } from './node/AstRestoreStatement';\r\nimport { AstVariableReference } from './node/AstVariableReference';\r\nimport { AstPrintStatement } from './node/AstPrintStatement';\r\nimport { AstProgram } from './node/AstProgram';\r\nimport { AstSubroutine } from './node/AstSubroutine';\r\nimport { AstUserType } from './node/AstUserType';\r\nimport { AstPrintUsingStatement } from './node/AstPrintUsingStatement';\r\nimport { AstMemberDeref } from './node/AstMemberDeref';\r\nimport { AstDataStatement } from './node/AstDataStatement';\r\nimport { AstUnaryOperator } from './node/AstUnaryOperator';\r\nimport { AstArrayDeref } from './node/AstArrayDeref';\r\nimport { AstRange } from './node/AstRange';\r\n\r\nimport {\r\n  AreTypesCompatible,\r\n  IsArrayType,\r\n  IsNumericType,\r\n  IsStringType\r\n} from './qb';\r\nimport { dbg, sprintf, DeriveTypeNameFromVariable, IsUserType } from './qb';\r\nimport { SystemFunctions } from './SystemFunctions';\r\nimport { SystemSubroutines } from './SystemSubroutines';\r\nimport { TypeScope } from './TypeScope';\r\nimport { Location } from 'earley';\r\nimport { CheckedLabel } from './CheckedLabel';\r\nimport { CheckedLoopContext } from './CheckedLoopContext';\r\nimport { UserType } from './UserType';\r\nimport { Type } from './types/Type';\r\nimport { IntegerType } from './types/IntegerType';\r\nimport { SingleType } from './types/SingleType';\r\nimport { DoubleType } from './types/DoubleType';\r\nimport { StringType } from './types/StringType';\r\nimport { AnyType } from './types/AnyType';\r\nimport { NullType } from './types/NullType';\r\nimport { ArrayType } from './types/ArrayType';\r\nimport { IStringDictionary } from './base/common/collections';\r\nimport { AstOpenStatement } from './node/AstOpenStatement';\r\n\r\n/** @constructor */\r\nexport class TypeChecker {\r\n  declaredSubs: IStringDictionary<AstDeclareFunction> = {};\r\n  scopes = [new TypeScope()];\r\n  shared = new TypeScope();\r\n  labelsUsed: CheckedLabel[] = [];\r\n  labelsDefined: IStringDictionary<CheckedLabel> = {};\r\n\r\n  readonly types: IStringDictionary<Type> = {\r\n    INTEGER: new IntegerType(),\r\n    SINGLE: new SingleType(),\r\n    DOUBLE: new DoubleType(),\r\n    STRING: new StringType(),\r\n    ANY: new AnyType(),\r\n    ':NULL': new NullType()\r\n  };\r\n\r\n  // Changed to integer if DEFINT is present in the program (hack hack)\r\n  defaultType: Type;\r\n\r\n  // stack of CheckedLoopContext. Most recent is 0.\r\n  loopStack: CheckedLoopContext[] = [];\r\n  constructor(public errors: string[]) {\r\n    // map from name to AstDeclare\r\n    // this.declaredSubs = {};\r\n    this.declaredSubs['_main'] = new AstDeclareFunction(\r\n      new Location(0, 0),\r\n      '_main',\r\n      [],\r\n      false\r\n    );\r\n\r\n    // this.errors = errors;\r\n    // this.scopes = [new TypeScope()];\r\n    // this.shared = new TypeScope();\r\n\r\n    // this.labelsUsed = [];\r\n    // this.labelsDefined = {};\r\n\r\n    //this.types = {\r\n    //    INTEGER: new IntegerType(),\r\n    //    SINGLE: new SingleType(),\r\n    //    DOUBLE: new DoubleType(),\r\n    //    STRING: new StringType(),\r\n    //    ANY: new AnyType(),\r\n    //    \":NULL\": new NullType()\r\n    //};\r\n\r\n    // Changed to integer if DEFINT is present in the program (hack hack)\r\n    this.defaultType = this.types['SINGLE'];\r\n\r\n    // stack of CheckedLoopContext. Most recent is 0.\r\n    // this.loopStack = [];\r\n  }\r\n\r\n  /**\r\n     Parameter 1 must be an ast node.\r\n     Parameter 2 is a format string, eg, as in printf\r\n     Parameters 3... depend on the format string.\r\n     */\r\n  error(...args: any[]) {\r\n    const object = args.shift(); //arguments[0];\r\n    //var args = [];\r\n    //for (var i = 1; i < arguments.length; i++) {\r\n    //    args.push(arguments[i]);\r\n    //}\r\n    const errorStr = 'Error at ' + object.location + ': ' + sprintf(args);\r\n    this.errors.push(errorStr);\r\n    dbg.print(errorStr + '\\n');\r\n  }\r\n\r\n  // _error(node:  AstNode, str: string) {\r\n  //   const object = args.shift(); //arguments[0];\r\n  //   //var args = [];\r\n  //   //for (var i = 1; i < arguments.length; i++) {\r\n  //   //    args.push(arguments[i]);\r\n  //   //}\r\n  //   const errorStr = \"Error at \" + object.locus + \": \" + sprintf(args);\r\n  //   this.errors.push(errorStr);\r\n  //   dbg.print(errorStr + \"\\n\");\r\n  // }\r\n\r\n  /**\r\n     If the variable name includes a type suffix, removes it and returns the\r\n     result.\r\n     */\r\n  removeSuffix(name: string) {\r\n    switch (name[name.length - 1]) {\r\n      case '%':\r\n      case '$':\r\n      case '!':\r\n      case '&':\r\n      case '#':\r\n        return name.substr(0, name.length - 1);\r\n      default:\r\n        return name;\r\n    }\r\n  }\r\n\r\n  /**\r\n     Using the current scope, or the type suffix, determine the type of the\r\n     variable given its name. Returns the type object.\r\n     */\r\n  getTypeFromVariableName(name: any) {\r\n    let type: string | Type = this.scopes[0].names[name];\r\n    if (type !== undefined) {\r\n      return type;\r\n    }\r\n    type = this.shared.names[name];\r\n    if (type !== undefined) {\r\n      return type;\r\n    }\r\n\r\n    type = DeriveTypeNameFromVariable(name);\r\n    if (type !== null) {\r\n      return this.types[type];\r\n    }\r\n\r\n    return this.defaultType;\r\n  }\r\n\r\n  visitProgram(program: AstProgram) {\r\n    let i;\r\n    for (i = 0; i < program.subs.length; i++) {\r\n      program.subs[i].accept(this);\r\n    }\r\n\r\n    // for each label used, if it is not defined, then emit an error.\r\n    for (i = 0; i < this.labelsUsed.length; i++) {\r\n      const label = this.labelsUsed[i];\r\n      if (this.labelsDefined[label.name] === undefined) {\r\n        this.error(label.astNode, 'Label %s is not defined', label.name);\r\n      }\r\n    }\r\n\r\n    // emit an error on any subs not implemented\r\n    for (const name in this.declaredSubs) {\r\n      const func = this.declaredSubs[name];\r\n      if (!func.hasBody && func.used) {\r\n        this.error(func, \"SUB or FUNCTION '%s' has no body\", name);\r\n      }\r\n    }\r\n  }\r\n  accept(nodes: AstArgument[]) {\r\n    // You didn't see that.\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      if (!nodes[i]) {\r\n        continue;\r\n      }\r\n      nodes[i].accept(this);\r\n    }\r\n  }\r\n  visitDeclareFunction(declare: AstDeclareFunction) {\r\n    // error if this name is already declared.\r\n    if (this.declaredSubs[declare.name] !== undefined) {\r\n      this.error(\r\n        declare,\r\n        'Subroutine %s is already declared on line %s',\r\n        declare.name,\r\n        this.declaredSubs[declare.name].location.line + 1\r\n      );\r\n    }\r\n\r\n    this.declaredSubs[declare.name] = declare;\r\n    // declare.args.accept(this);\r\n    this.accept(declare.args);\r\n    if (declare.isFunction) {\r\n      declare.type = this.getTypeFromVariableName(declare.name);\r\n    }\r\n  }\r\n\r\n  visitSubroutine(sub: AstSubroutine) {\r\n    const subError = (declare: AstDeclareFunction) => {\r\n      this.error(\r\n        sub,\r\n        'Sub or function %s does not match declaration on ' + 'line %s',\r\n        sub.name,\r\n        declare.location.line + 1\r\n      );\r\n    };\r\n\r\n    if (this.declaredSubs[sub.name] === undefined) {\r\n      const declare = new AstDeclareFunction(\r\n        sub.location,\r\n        sub.name,\r\n        sub.args,\r\n        false\r\n      );\r\n      this.visitDeclareFunction(declare);\r\n    }\r\n\r\n    // error if the sub has not been declared.\r\n    if (this.declaredSubs[sub.name] === undefined) {\r\n      this.error(sub, 'Subroutine %s is not declared', sub.name);\r\n    } else {\r\n      const declare = this.declaredSubs[sub.name];\r\n\r\n      if (declare.isFunction != sub.isFunction) {\r\n        subError(declare);\r\n      }\r\n\r\n      if (sub.args.length != declare.args.length) {\r\n        subError(declare);\r\n      } else {\r\n        // error if the declaration does not have the same arguments.\r\n        for (let i = 0; i < sub.args.length; i++) {\r\n          // don't compare variable names, it's okay if they differ.\r\n          if (\r\n            (sub.args[i].typeName != declare.args[i].typeName &&\r\n              declare.args[i].typeName != 'ANY') ||\r\n            sub.args[i].isArray != declare.args[i].isArray\r\n          ) {\r\n            subError(declare);\r\n          }\r\n        }\r\n      }\r\n\r\n      declare.hasBody = true;\r\n    }\r\n\r\n    this.scopes.unshift(new TypeScope());\r\n\r\n    // visit arguments\r\n    for (let i = 0; i < sub.args.length; i++) {\r\n      sub.args[i].accept(this);\r\n      this.scopes[0].names[sub.args[i].name] = sub.args[i].type;\r\n    }\r\n\r\n    // visit statements\r\n    for (let i = 0; i < sub.statements.length; i++) {\r\n      if (!sub.statements[i]) {\r\n        continue;\r\n      }\r\n      //dbg.printf(\"Try to visit %s\\n\", getObjectClass( sub.statements[i]) );\r\n      if (sub.statements[i].accept === undefined) {\r\n        dbg.printf(\r\n          'ERROR: Could not visit object of type %s\\n',\r\n          /*getObjectClass*/ sub.statements[i]\r\n        );\r\n      } else {\r\n        sub.statements[i].accept(this);\r\n      }\r\n    }\r\n\r\n    this.scopes.shift();\r\n  }\r\n\r\n  /**\r\n     Check that types of arguments match the ones from the AstDeclareStatement.\r\n     */\r\n  checkCallArguments(declare: any, args: any) {\r\n    declare.used = true;\r\n    if (declare.args.length != args.length) {\r\n      this.error(declare, 'Wrong number of arguments');\r\n    } else {\r\n      for (let i = 0; i < args.length; i++) {\r\n        args[i].wantRef = true;\r\n        args[i].accept(this);\r\n        if (!AreTypesCompatible(args[i].type, declare.args[i].type)) {\r\n          this.error(\r\n            args[i],\r\n            'Type mismatch in argument %d of call to %s.' +\r\n              ' Expected %s but got %s',\r\n            i + 1,\r\n            declare.name,\r\n            declare.args[i].type.name,\r\n            args[i].type.name\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  visitCallStatement(call: AstCallStatement) {\r\n    if (SystemSubroutines[call.name] !== undefined) {\r\n      // TODO: Check args for system parameters.\r\n      for (let i = 0; i < call.args.length; i++) {\r\n        call.args[i].wantRef = true;\r\n        call.args[i].accept(this);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const declare = this.declaredSubs[call.name];\r\n    // sub must exist and argument number and types must be compatible.\r\n    if (declare === undefined) {\r\n      this.error(call, \"Call to undefined sub '%s'\", call.name);\r\n    } else {\r\n      this.checkCallArguments(declare, call.args);\r\n    }\r\n  }\r\n\r\n  visitArgument(argument: AstArgument) {\r\n    let type;\r\n\r\n    // we are about to enter a function, so add this variable to the scope\r\n    if (argument.typeName) {\r\n      // error if the typeName does not exist.\r\n      type = this.types[argument.typeName];\r\n      if (type === undefined) {\r\n        this.error(argument, 'Type %s is not defined', argument.typeName);\r\n        type = new UserType(argument.typeName, {});\r\n        this.types[argument.typeName] = type;\r\n      }\r\n    } else {\r\n      type = this.getTypeFromVariableName(argument.name);\r\n    }\r\n\r\n    if (argument.isArray) {\r\n      type = new ArrayType(<Type>type);\r\n    }\r\n\r\n    argument.type = <Type>type;\r\n  }\r\n\r\n  visitPrintStatement(print: AstPrintStatement) {\r\n    // all arguments must be convertable to strings or single.\r\n    // if (!print.printItems) {\r\n    //     return;\r\n    // }\r\n\r\n    //  print.printItems.accept(this);\r\n    for (const item of print.printItems) {\r\n      item.accept(this);\r\n    }\r\n  }\r\n\r\n  visitPrintUsingStatement(printUsing: AstPrintUsingStatement) {\r\n    for (let i = 0; i < printUsing.exprList.length; i++) {\r\n      printUsing.exprList[i].wantRef = true;\r\n      printUsing.exprList[i].accept(this);\r\n\r\n      if (i === 0 && !IsStringType(printUsing.exprList[i].type)) {\r\n        this.error(\r\n          printUsing.exprList[i],\r\n          'Format string must be STRING, not %s',\r\n          printUsing.exprList[i].type.name\r\n        );\r\n      } else if (\r\n        i > 0 &&\r\n        !IsStringType(printUsing.exprList[i].type) &&\r\n        !IsNumericType(printUsing.exprList[i].type)\r\n      ) {\r\n        this.error(printUsing.exprList[i], 'Type Mismatch Error');\r\n      }\r\n    }\r\n\r\n    if (printUsing.exprList.length === 0) {\r\n      this.error(printUsing, 'PRINT USING requires at least one argument');\r\n    }\r\n  }\r\n\r\n  visitPrintItem(item: AstPrintItem) {\r\n    if (item.expr === null) {\r\n      return;\r\n    }\r\n    // if(typeof item.expr === \"string\"){\r\n    //     return;\r\n    // }\r\n    item.expr.accept(this);\r\n    if (!IsNumericType(item.expr.type) && !IsStringType(item.expr.type)) {\r\n      this.error(\r\n        item.expr,\r\n        \"Expected string or number, but got '%s'\",\r\n        item.expr.type.name\r\n      );\r\n    }\r\n  }\r\n\r\n  visitInputStatement(input: AstInputStatement) {\r\n    // prompt must be null or a string.\r\n    if (input.promptExprOrfileNumber) {\r\n      if (typeof input.promptExprOrfileNumber === 'string') {\r\n        // this.error(input, \"FileNumber must be a string\");\r\n        return;\r\n      }\r\n      input.promptExprOrfileNumber.accept(this);\r\n      if (!IsStringType(input.promptExprOrfileNumber.type)) {\r\n        this.error(input, 'Prompt must be a string');\r\n      }\r\n    }\r\n\r\n    // identifiers must be strings or numbers.\r\n    for (let i = 0; i < input.identifiersOrReference.length; i++) {\r\n      const type = this.getTypeFromVariableName(\r\n        input.identifiersOrReference[i]\r\n      );\r\n      if (!IsNumericType(<Type>type) && !IsStringType(<Type>type)) {\r\n        this.error(\r\n          input,\r\n          \"Identifier '%s' should be string or numeric.\",\r\n          input.identifiersOrReference.type\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  visitNullStatement(argument: AstNullStatement) {}\r\n\r\n  visitEndStatement(argument: AstEndStatement) {}\r\n\r\n  visitForLoop(loop: any) {\r\n    // identifier must be numeric type.\r\n    if (!IsNumericType(this.getTypeFromVariableName(loop.identifier))) {\r\n      this.error(loop, 'Loop counter must be a number');\r\n    }\r\n\r\n    loop.startExpr.wantRef = true;\r\n    loop.startExpr.accept(this);\r\n    loop.endExpr.accept(this);\r\n    loop.stepExpr.accept(this);\r\n\r\n    // startExpr and endExpr and stepExpr must be convertible to single.\r\n    if (\r\n      !IsNumericType(loop.startExpr.type) ||\r\n      !IsNumericType(loop.endExpr.type) ||\r\n      !IsNumericType(loop.stepExpr.type)\r\n    ) {\r\n      this.error(loop, 'Loop expression must be a number.');\r\n    }\r\n\r\n    this.loopStack.unshift(new CheckedLoopContext('FOR', loop.identifier));\r\n  }\r\n\r\n  visitNextStatement(next: AstNextStatement) {\r\n    // pop loops off loopstack in order.\r\n    // identifier must match loops.\r\n    for (let i = 0; i < next.identifiers.length; i++) {\r\n      if (this.loopStack.length === 0) {\r\n        this.error(next, 'NEXT without FOR');\r\n        break;\r\n      }\r\n      if (this.loopStack[0].type !== 'FOR') {\r\n        // NEXT inside a DO loop?\r\n        this.error(next, 'NEXT without FOR');\r\n        break;\r\n      }\r\n      if (next.identifiers[i] != this.loopStack[0].counter) {\r\n        this.error(\r\n          next,\r\n          \"Mismatched loop counter '%s' in NEXT\",\r\n          next.identifiers[i]\r\n        );\r\n      }\r\n      this.loopStack.shift();\r\n    }\r\n\r\n    if (next.identifiers.length === 0) {\r\n      if (this.loopStack.length === 0) {\r\n        this.error(next, 'NEXT without FOR');\r\n      } else {\r\n        this.loopStack.shift();\r\n      }\r\n    }\r\n  }\r\n\r\n  visitExitStatement(exit: AstExitStatement) {\r\n    if (\r\n      exit.what &&\r\n      exit.what != 'FOR' &&\r\n      exit.what != 'DO' &&\r\n      exit.what != 'WHILE'\r\n    ) {\r\n      this.error(exit, 'EXIT %s not supported', exit.what);\r\n    }\r\n    if (this.loopStack.length === 0) {\r\n      this.error(exit, 'EXIT without loop not supported');\r\n    }\r\n    if (exit.what && exit.what != this.loopStack[0].type) {\r\n      this.error(\r\n        exit,\r\n        \"MISMATCHED EXIT. Expected: '%s'\",\r\n        this.loopStack[0].type\r\n      );\r\n    }\r\n  }\r\n\r\n  visitArrayDeref(ref: AstArrayDeref) {\r\n    let i;\r\n    ref.expr.accept(this);\r\n\r\n    if (\r\n      ref.expr instanceof AstVariableReference &&\r\n      this.declaredSubs[ref.expr.name]\r\n    ) {\r\n      const declare = this.declaredSubs[ref.expr.name];\r\n      if (!declare.isFunction) {\r\n        this.error(ref, \"Tried to call non-function '%s'\", ref.expr.name);\r\n      }\r\n\r\n      this.checkCallArguments(declare, ref.parameters);\r\n      ref.type = declare.type;\r\n      return;\r\n    }\r\n    if (\r\n      ref.expr instanceof AstVariableReference &&\r\n      SystemFunctions[ref.expr.name] !== undefined\r\n    ) {\r\n      const func = SystemFunctions[ref.expr.name];\r\n      ref.type = this.types[func.type];\r\n      ref.parameters.accept(this);\r\n\r\n      // verify that parameters are correct type.\r\n      if (\r\n        ref.parameters.length < func.minArgs ||\r\n        ref.parameters.length > func.args.length\r\n      ) {\r\n        this.error(\r\n          ref,\r\n          \"Function '%s' called with wrong number of \" + 'arguments',\r\n          func.name\r\n        );\r\n      } else {\r\n        for (i = 0; i < ref.parameters.length; i++) {\r\n          if (\r\n            !AreTypesCompatible(\r\n              ref.parameters[i].type,\r\n              this.types[func.args[i]]\r\n            )\r\n          ) {\r\n            this.error(\r\n              ref,\r\n              \"Argument %d to '%s' function is of \" +\r\n                \"type '%s', but '%s' expected\",\r\n              i + 1,\r\n              func.name,\r\n              ref.parameters[i].type.name,\r\n              func.args[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // parameters must convert to integers.\r\n    for (i = 0; i < ref.parameters.length; i++) {\r\n      ref.parameters[i].accept(this);\r\n      if (!IsNumericType(ref.parameters[i].type)) {\r\n        this.error(ref.parameters[i], 'Array subscript must be numeric type');\r\n      }\r\n    }\r\n\r\n    // expr must resolve to an array.\r\n    // type becomes type of array elements.\r\n    if (!IsArrayType(ref.expr.type)) {\r\n      this.error(ref, \"Subscript used on non-array '%s'\", ref.expr.name);\r\n      ref.type = this.types['INTEGER'];\r\n    } else if (ref.parameters.length === 0) {\r\n      ref.type = ref.expr.type;\r\n    } else {\r\n      ref.type = ref.expr.type.elementType;\r\n    }\r\n  }\r\n\r\n  visitMemberDeref(ref: AstMemberDeref) {\r\n    // lhs should resolve to a user type.\r\n    ref.lhs.accept(this);\r\n    if (!IsUserType(ref.lhs.type)) {\r\n      this.error(\r\n        ref,\r\n        \"Tried to dereference non-user-type '%s'\",\r\n        ref.lhs.type.name\r\n      );\r\n      ref.type = this.types['SINGLE'];\r\n    } else {\r\n      // user type should contain the given identifier.\r\n      ref.type = ref.lhs.type.members[ref.identifier];\r\n      if (ref.type === undefined) {\r\n        this.error(\r\n          ref,\r\n          \"Type '%s' does not contain member '%s'\",\r\n          ref.lhs.type.name,\r\n          ref.identifier\r\n        );\r\n        ref.type = this.types['SINGLE'];\r\n      }\r\n    }\r\n  }\r\n  visitVariableReference(ref: AstVariableReference) {\r\n    let func;\r\n    if (SystemFunctions[ref.name] !== undefined) {\r\n      func = SystemFunctions[ref.name];\r\n      ref.type = this.types[func.type];\r\n    } else if (this.declaredSubs[ref.name] !== undefined) {\r\n      func = this.declaredSubs[ref.name];\r\n      if (!func.isFunction) {\r\n        this.error(ref, \"SUB '%s' used as a function\", func.name);\r\n        ref.type = this.types['SINGLE'];\r\n      } else {\r\n        ref.type = func.type;\r\n      }\r\n    } else {\r\n      ref.type = this.getTypeFromVariableName(ref.name);\r\n    }\r\n  }\r\n\r\n  visitRange(range: AstRange) {\r\n    range.lowerExpr.accept(this);\r\n    range.upperExpr.accept(this);\r\n\r\n    if (\r\n      !IsNumericType(range.lowerExpr.type) ||\r\n      !IsNumericType(range.upperExpr.type)\r\n    ) {\r\n      this.error(range, 'Expected a number.');\r\n    }\r\n  }\r\n\r\n  visitDataStatement(_argument: AstDataStatement) {}\r\n\r\n  visitReturnStatement(returnStatement: any) {}\r\n\r\n  visitRestoreStatement(restore: AstRestoreStatement) {\r\n    if (restore.label) {\r\n      this.labelsUsed.push(new CheckedLabel(restore.label, restore));\r\n    }\r\n  }\r\n\r\n  visitConstStatement(constStatement: AstConstStatement) {\r\n    // Ensure it's not double defined.\r\n    if (constStatement.name in this.shared.names) {\r\n      this.error(\r\n        constStatement,\r\n        \"Redeclared variable '%s'\",\r\n        constStatement.name\r\n      );\r\n    }\r\n\r\n    // todo: ensure it's a constant calculable at runtime.\r\n    constStatement.expr.accept(this);\r\n\r\n    this.shared.names[constStatement.name] = constStatement.expr.type;\r\n  }\r\n\r\n  visitDefTypeStatement(def: any) {\r\n    this.defaultType = this.types[def.typeName];\r\n  }\r\n\r\n  visitDimStatement(dim: any) {\r\n    // type, if present, must exist.\r\n    let type;\r\n    if (dim.typeName) {\r\n      type = this.types[dim.typeName];\r\n      if (type === undefined) {\r\n        this.error(dim, \"Type '%s' is not defined\", dim.typeName);\r\n      }\r\n    }\r\n\r\n    if (!type) {\r\n      type = this.getTypeFromVariableName(dim.name);\r\n    }\r\n\r\n    for (let i = 0; i < dim.ranges.length; i++) {\r\n      dim.ranges[i].accept(this);\r\n    }\r\n\r\n    if (dim.ranges.length) {\r\n      type = new ArrayType(<Type>type);\r\n    }\r\n\r\n    if (dim.shared) {\r\n      this.shared.names[dim.name] = type;\r\n    } else {\r\n      this.scopes[0].names[dim.name] = type;\r\n    }\r\n  }\r\n\r\n  visitDoStatement(loop: AstDoStatement) {\r\n    if (loop.expr) {\r\n      loop.expr.accept(this);\r\n    }\r\n    if (loop.expr !== null && !IsNumericType(loop.expr.type)) {\r\n      this.error(loop, 'Loop expression must be numeric');\r\n    }\r\n\r\n    this.loopStack.unshift(new CheckedLoopContext('DO', null));\r\n    loop.statements.accept(this);\r\n    this.loopStack.shift();\r\n  }\r\n\r\n  visitWhileLoop(loop: any) {\r\n    loop.expr.accept(this);\r\n    if (!IsNumericType(loop.expr.type)) {\r\n      this.error(loop, 'Loop expression must be numeric');\r\n    }\r\n\r\n    this.loopStack.unshift(new CheckedLoopContext('WHILE', null));\r\n    loop.statements.accept(this);\r\n    this.loopStack.shift();\r\n  }\r\n\r\n  visitIfStatement(ifStatement: any) {\r\n    ifStatement.expr.accept(this);\r\n    if (!IsNumericType(ifStatement.expr.type)) {\r\n      this.error(ifStatement, 'Expected numeric expression');\r\n    }\r\n\r\n    ifStatement.statements.accept(this);\r\n    if (ifStatement.elseStatements) {\r\n      ifStatement.elseStatements.accept(this);\r\n    }\r\n  }\r\n\r\n  visitSelectStatement(select: AstSelectStatement) {\r\n    // expr must be compatible with that of each case.\r\n    select.expr.accept(this);\r\n    if (!IsNumericType(select.expr.type) && !IsStringType(select.expr.type)) {\r\n      this.error(select, 'Select expression must be numeric or string');\r\n    }\r\n\r\n    for (let i = 0; i < select.cases.length; i++) {\r\n      const caseStatement = select.cases[i];\r\n      caseStatement.accept(this);\r\n\r\n      for (let j = 0; j < caseStatement.exprList.length; j++) {\r\n        if (\r\n          !AreTypesCompatible(select.expr.type, caseStatement.exprList[j].type)\r\n        ) {\r\n          this.error(\r\n            caseStatement,\r\n            'CASE expression cannot be compared with SELECT'\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  visitCaseStatement(caseStatement: AstCaseStatement) {\r\n    caseStatement.exprList.accept(this);\r\n    caseStatement.statements.accept(this);\r\n  }\r\n\r\n  visitTypeMember(member: AstTypeMember) {\r\n    let type: Type;\r\n\r\n    // typename must exist.\r\n    if (member.typeName) {\r\n      type = this.types[member.typeName];\r\n      if (type === undefined) {\r\n        this.error(member, \"Undefined type '%s'\", member.typeName);\r\n      }\r\n    }\r\n\r\n    if (type === undefined) {\r\n      type = <Type>this.getTypeFromVariableName(member.name);\r\n    }\r\n    member.type = type;\r\n  }\r\n\r\n  visitUserType(userType: AstUserType) {\r\n    // must not already be declared.\r\n    if (this.types[userType.name] !== undefined) {\r\n      this.error(userType, \"Typename '%s' already defined\", userType.name);\r\n    }\r\n\r\n    // members should be declared only once.\r\n    const members: IStringDictionary<Type> = {};\r\n    for (let i = 0; i < userType.members.length; i++) {\r\n      userType.members[i].accept(this);\r\n      if (members[userType.members[i].name] !== undefined) {\r\n        this.error(\r\n          userType.members[i],\r\n          \"Type member '%s' already defined\",\r\n          userType.members[i].name\r\n        );\r\n      }\r\n\r\n      //dbg.printf(\"Type member name=%s has type %s\\n\",\r\n      //        userType.members[i].name, userType.members[i].type.name);\r\n      members[userType.members[i].name] = userType.members[i].type;\r\n    }\r\n\r\n    this.types[userType.name] = new UserType(userType.name, members);\r\n  }\r\n\r\n  visitGotoStatement(gotoStatement: AstGotoStatement) {\r\n    this.labelsUsed.push(new CheckedLabel(gotoStatement.label, gotoStatement));\r\n  }\r\n\r\n  visitGosub(gosub: AstGosubStatement) {\r\n    this.labelsUsed.push(new CheckedLabel(gosub.label, gosub));\r\n  }\r\n\r\n  visitLabel(label: AstLabel) {\r\n    // label must not already be defined.\r\n    if (this.labelsDefined[label.label] !== undefined) {\r\n      this.error(label, \"Label '%s' is already defined\", label.label);\r\n    }\r\n    // add to labels declared.\r\n    this.labelsDefined[label.label] = new CheckedLabel(label.label, label);\r\n  }\r\n\r\n  visitAssignStatement(assign: AstAssignStatement) {\r\n    // rhs must be compatible with rhs.\r\n    assign.lhs.wantRef = true;\r\n    assign.lhs.accept(this);\r\n    assign.expr.accept(this);\r\n    if (!AreTypesCompatible(assign.lhs.type, assign.expr.type)) {\r\n      this.error(\r\n        assign,\r\n        \"Tried to assign type '%s' to type '%s'\",\r\n        assign.expr.type.name,\r\n        assign.lhs.type.name\r\n      );\r\n    }\r\n  }\r\n\r\n  visitBinaryOp(binary: AstBinaryOp) {\r\n    const op = binary.op;\r\n    binary.lhs.accept(this);\r\n    binary.rhs.accept(this);\r\n    let bad = false; //0;\r\n    let type = binary.lhs.type;\r\n\r\n    // types must be compatible\r\n    if (!AreTypesCompatible(binary.lhs.type, binary.rhs.type)) {\r\n      bad = true; //1;\r\n    }\r\n\r\n    if (IsStringType(binary.lhs.type)) {\r\n      // operator must be +, <, >, <>, '='\r\n      // bad |= op != '+' && op != '<' && op != '>' && op != '<>' && op != '=';\r\n      bad =\r\n        bad || (op != '+' && op != '<' && op != '>' && op != '<>' && op != '=');\r\n    }\r\n\r\n    if (IsUserType(binary.lhs.type)) {\r\n      // bad |= op != '=';\r\n      bad = bad || op != '=';\r\n    }\r\n\r\n    if (op == '=' || op == '<>' || op == '<' || op == '<=' || op == '>=') {\r\n      type = this.types['INTEGER'];\r\n    }\r\n\r\n    if (IsArrayType(binary.lhs.type)) {\r\n      bad = true; //|= 1;\r\n    }\r\n\r\n    // type must support the given operator.\r\n    if (bad) {\r\n      this.error(\r\n        binary,\r\n        \"Incompatible types for '%s' operator: %s,%s\",\r\n        binary.op,\r\n        binary.lhs.type.name,\r\n        binary.rhs.type.name\r\n      );\r\n    }\r\n\r\n    binary.type = type;\r\n  }\r\n\r\n  visitUnaryOperator(unary: AstUnaryOperator) {\r\n    // type must be numeric.\r\n    unary.expr.accept(this);\r\n    if (!IsNumericType(unary.expr.type)) {\r\n      this.error(unary, \"Incompatible type for '%s' operator\", unary.op);\r\n    }\r\n    unary.type = unary.expr.type;\r\n  }\r\n\r\n  visitConstantExpr(expr: AstConstantExpr) {\r\n    if (expr.value === null) {\r\n      expr.type = this.types[':NULL'];\r\n    } else if (expr.value.constructor == String) {\r\n      expr.type = this.types['STRING'];\r\n    } else {\r\n      expr.type = this.types['SINGLE'];\r\n    }\r\n  }\r\n\r\n  visitOpenStatement(node: AstOpenStatement) {}\r\n}\r\n","import { Type } from './types/Type';\r\nimport { IStringDictionary } from './base/common/collections';\r\n/**\r\n    Copyright 2010 Steve Hanov\r\n\r\n    This file is part of qb.js\r\n\r\n    qb.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    qb.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with qb.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n//#include <Tokenizer.js>\r\n//#include <Types.js>\r\n//#include <debug.js>\r\n//#include <qbasic.js>\r\n/** @constructor */\r\nexport class TypeScope {\r\n  names: IStringDictionary<Type> = {};\r\n  constructor() {\r\n    // map from names to type objects.\r\n    // this.names = {};\r\n  }\r\n}\r\n","import { AstLabel } from './node/AstLabel';\r\n\r\n/** @constructor */\r\nexport class CheckedLabel {\r\n  constructor(public name: string, public astNode: AstLabel) {\r\n    // this.name = name;\r\n    // this.astNode = astNode;\r\n  }\r\n}\r\n","/** @constructor */\r\nexport class CheckedLoopContext {\r\n  constructor(public type: 'FOR' | 'DO' | 'WHILE', public counter: string) {\r\n    // \"FOR\", \"DO\"\r\n    // this.type = type;\r\n    // variable name\r\n    // this.counter = counter;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n\r\n/** @constructor */\r\nexport class IntegerType extends Type {\r\n  constructor() {\r\n    super();\r\n    this.name = 'INTEGER';\r\n  }\r\n\r\n  createInstance() {\r\n    return 0;\r\n  }\r\n\r\n  copy(value: number) {\r\n    return (Math.round(value + 32768) & 65535) - 32768;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n/** @constructor */\r\nexport class SingleType extends Type {\r\n  constructor() {\r\n    super();\r\n    this.name = 'SINGLE';\r\n  }\r\n\r\n  createInstance() {\r\n    return 0.0;\r\n  }\r\n\r\n  copy(value: number) {\r\n    return value;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n\r\n/** @constructor */\r\nexport class DoubleType extends Type {\r\n  constructor() {\r\n    super();\r\n    this.name = 'DOUBLE';\r\n  }\r\n  createInstance() {\r\n    return 0.0;\r\n  }\r\n\r\n  copy(value: number) {\r\n    return value;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n\r\n/** @constructor */\r\nexport class StringType extends Type {\r\n  constructor() {\r\n    super();\r\n    this.name = 'STRING';\r\n  }\r\n\r\n  createInstance() {\r\n    return '';\r\n  }\r\n\r\n  copy(value: string) {\r\n    return value;\r\n  }\r\n}\r\n","import { Type } from './Type';\r\n\r\n/** @constructor */\r\nexport class AnyType extends Type {\r\n  constructor() {\r\n    super();\r\n    this.name = 'ANY';\r\n  }\r\n}\r\n","export class DebugConsole {\r\n  // ta: HTMLTextAreaElement;\r\n  private text = '';\r\n  /** @constructor */\r\n  public constructor(textarea: HTMLTextAreaElement) {\r\n    // this.ta = textarea;\r\n  }\r\n  public getText() {\r\n    return this.text;\r\n  }\r\n  public resetText() {\r\n    this.text = '';\r\n  }\r\n  print(str: string) {\r\n    this.text += str;\r\n    //var segments = str.split(\"\\n\");\r\n    //for (var i = 0; i < segments.length; i++) {\r\n    //    // this.ta.appendChild(document.createTextNode(segments[i]));\r\n    //    if (i < segments.length - 1) {\r\n    //        // this.ta.appendChild(document.createElement(\"br\"));\r\n    //    }\r\n    //}\r\n  }\r\n\r\n  printf(...args: any[]) {\r\n    function convert(match: any, nosign = false) {\r\n      if (nosign) {\r\n        match.sign = '';\r\n      } else {\r\n        match.sign = match.negative ? '-' : match.sign;\r\n      }\r\n      var l = match.min - match.argument.length + 1 - match.sign.length;\r\n      var pad = new Array(l < 0 ? 0 : l).join(match.pad);\r\n      if (!match.left) {\r\n        if (match.pad == '0' || nosign) {\r\n          return match.sign + pad + match.argument;\r\n        } else {\r\n          return pad + match.sign + match.argument;\r\n        }\r\n      } else {\r\n        if (match.pad == '0' || nosign) {\r\n          return match.sign + match.argument + pad.replace(/0/g, ' ');\r\n        } else {\r\n          return match.sign + match.argument + pad;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof arguments == 'undefined') {\r\n      return;\r\n    }\r\n    if (arguments.length < 1) {\r\n      return;\r\n    }\r\n    // var args = <any[]>arguments;\r\n    if (args[0] instanceof Array) {\r\n      args = args[0];\r\n    }\r\n    if (typeof args[0] != 'string') {\r\n      return;\r\n    }\r\n    if (typeof RegExp == 'undefined') {\r\n      return;\r\n    }\r\n\r\n    var string = args[0];\r\n    var exp = new RegExp(\r\n      /(%([%]|(\\-)?(\\+|\\x20)?(0)?(\\d+)?(\\.(\\d)?)?([bcdfosxX])))/g\r\n    );\r\n    var matches = [];\r\n    var strings = [];\r\n    var convCount = 0;\r\n    var stringPosStart = 0;\r\n    var stringPosEnd = 0;\r\n    var matchPosEnd = 0;\r\n    var newString = '';\r\n    var match = null;\r\n    var substitution;\r\n\r\n    for (;;) {\r\n      match = exp.exec(string);\r\n      if (!match) {\r\n        break;\r\n      }\r\n      if (match[9]) {\r\n        convCount += 1;\r\n      }\r\n\r\n      stringPosStart = matchPosEnd;\r\n      stringPosEnd = exp.lastIndex - match[0].length;\r\n      strings[strings.length] = string.substring(stringPosStart, stringPosEnd);\r\n\r\n      matchPosEnd = exp.lastIndex;\r\n      matches[matches.length] = {\r\n        match: match[0],\r\n        left: match[3] ? true : false,\r\n        sign: match[4] || '',\r\n        pad: match[5] || ' ',\r\n        min: match[6] || 0,\r\n        precision: match[8],\r\n        code: match[9] || '%',\r\n        negative: parseInt(args[convCount], 10) < 0 ? true : false,\r\n        argument: String(args[convCount])\r\n      };\r\n    }\r\n    strings[strings.length] = string.substring(matchPosEnd);\r\n\r\n    if (args.length - 1 < convCount) {\r\n      return;\r\n    }\r\n\r\n    var i = null;\r\n\r\n    for (i = 0; i < matches.length; i++) {\r\n      if (matches[i].code == '%') {\r\n        substitution = '%';\r\n      } else if (matches[i].code == 'b') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseInt(matches[i].argument, 10)).toString(2)\r\n        );\r\n        substitution = convert(matches[i], true);\r\n      } else if (matches[i].code == 'c') {\r\n        matches[i].argument = String(\r\n          String.fromCharCode(\r\n            /*parseInt(*/ Math.abs(parseInt(matches[i].argument, 10) /*), 10)*/)\r\n          )\r\n        );\r\n        substitution = convert(matches[i], true);\r\n      } else if (matches[i].code == 'd') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseInt(matches[i].argument, 10))\r\n        );\r\n        substitution = convert(matches[i]);\r\n      } else if (matches[i].code == 'f') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseFloat(matches[i].argument)).toFixed(\r\n            matches[i].precision ? <any>matches[i].precision : 6\r\n          )\r\n        );\r\n        substitution = convert(matches[i]);\r\n      } else if (matches[i].code == 'o') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseInt(matches[i].argument, 10)).toString(8)\r\n        );\r\n        substitution = convert(matches[i]);\r\n      } else if (matches[i].code == 's') {\r\n        matches[i].argument = matches[i].argument.substring(\r\n          0,\r\n          matches[i].precision\r\n            ? <any>matches[i].precision\r\n            : matches[i].argument.length\r\n        );\r\n        substitution = convert(matches[i], true);\r\n      } else if (matches[i].code == 'x') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseInt(matches[i].argument, 10)).toString(16)\r\n        );\r\n        substitution = convert(matches[i]);\r\n      } else if (matches[i].code == 'X') {\r\n        matches[i].argument = String(\r\n          Math.abs(parseInt(matches[i].argument, 10)).toString(16)\r\n        );\r\n        substitution = convert(matches[i]).toUpperCase();\r\n      } else {\r\n        substitution = matches[i].match;\r\n      }\r\n\r\n      newString += strings[i];\r\n      newString += substitution;\r\n    }\r\n\r\n    newString += strings[i];\r\n    this.print(newString);\r\n  }\r\n}\r\n","import { Location } from 'earley';\r\n// import { AstConstantExpr } from \"./AstConstantExpr\";\r\n\r\n/** @constructor */\r\nexport class AstOpenStatement {\r\n  constructor(\r\n    public location: Location,\r\n    public expr: any,\r\n    public mode: 'INPUT' | 'OUTPUT',\r\n    public fileNumber: any\r\n  ) {\r\n    // this.locus = locus;\r\n    // this.identifier = identifier;\r\n    // this.startExpr = startExpr;\r\n    // this.endExpr = endExpr;\r\n    // this.stepExpr = stepExpr;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    visitor.visitOpenStatement(this);\r\n  }\r\n}\r\n","import { IStringDictionary } from '../base/common/collections';\r\n\r\nimport { QBasicProgram, DeriveTypeNameFromVariable } from '../qb';\r\nimport { _Console } from '../Console';\r\nimport { Instruction } from './Instructions/Instruction';\r\nimport { TraceBuffer } from '../TraceBuffer';\r\nimport { ArrayVariable } from '../ArrayVariable';\r\nimport { StackFrame } from '../StackFrame';\r\nimport { ScalarVariable } from '../ScalarVariable';\r\nimport { Type } from '../types/Type';\r\nimport IConsole from './IConsole';\r\n\r\n/**\r\n    The global machine variable points to the current virtual machine, so that\r\n    it can be accessed from the javascript setInterval function. Unfortunately,\r\n    this scheme limits us to one machine at a time.\r\n */\r\n// var globalMachine: VirtualMachine;\r\n\r\n/**\r\n The VirtualMachine runs the bytecode given to it. It can run in one of two\r\n modes: Synchronously or Asynchronously.\r\n\r\n In synchronous mode, the program is run to completion before returning from\r\n the run() function. This can cause a browser window to freeze until execution\r\n completes.\r\n\r\n In asynchronous mode, a javascript interval is used. Every so often, we run\r\n some instructions and then stop. That way, the program appears to run while\r\n letting the user use the browser window.\r\n\r\n @param cons A Console object that will be used as the screen.\r\n */\r\n/** @constructor */\r\nexport class VirtualMachine {\r\n  // Stack\r\n  stack: (number | string | ScalarVariable | ArrayVariable | Type)[] = [];\r\n  // program counter.\r\n  pc = 0;\r\n\r\n  // list of StackFrames. The last one is searched for variable references.\r\n  // Failing that, the first one ( the main procedure ) is searched for any\r\n  // shared variables matching the name.\r\n  callstack: StackFrame[] = [];\r\n\r\n  // The bytecode (array of Instruction objects)\r\n  instructions: Instruction[] = [];\r\n  // Array of user defined times.\r\n  types: IStringDictionary<Type> = {}; //[] = [];\r\n\r\n  // set of names of shared variables.\r\n  shared: any = {};\r\n\r\n  // Trace buffer for debugging.\r\n  trace = new TraceBuffer();\r\n\r\n  // Index of next data statement to be read.\r\n  dataPtr = 0;\r\n\r\n  // Array of strings or numbers from the data statements.\r\n  data: any[] = [];\r\n\r\n  // True if we are running asynchronously.\r\n  asyncronous = false;\r\n\r\n  // True if the virtual machine is suspended for some reason (for example,\r\n  // waiting for user input)\r\n  private suspended = false; // eg. for INPUT statement.\r\n\r\n  // The javascript interval used for running asynchronously.\r\n  interval: number | null = null;\r\n\r\n  // Number of milliseconds between intervals\r\n  readonly INTERVAL_MS = 50;\r\n\r\n  // Number of instructions to run in an interval\r\n  instructionsPerInterval = 2048;\r\n\r\n  //this.debug = true;\r\n\r\n  // The last random number generated by a RND function. We have to remember\r\n  // it because RND 0 returns the last one generated.\r\n  lastRandomNumber = 0;\r\n\r\n  frame: StackFrame;\r\n  defaultType: Type;\r\n  debug: boolean; // = true;\r\n  asynchronous: boolean;\r\n\r\n  private breakpoints: number[] = [];\r\n\r\n  constructor(readonly cons: IConsole) {\r\n    // The console.\r\n    // this.cons = cons;\r\n\r\n    if (!this.debug) {\r\n      this.printStack = function() {};\r\n      this.trace = <any>{ printf: function() {} };\r\n    }\r\n\r\n    // globalMachine = this;\r\n  }\r\n\r\n  public isSuspended() {\r\n    return this.suspended;\r\n  }\r\n  /**\r\n   Resets the virtual machine, halting any running program.\r\n   */\r\n  reset(program: QBasicProgram) {\r\n    if (program) {\r\n      this.instructions = program.instructions;\r\n      this.types = program.types;\r\n      this.defaultType = program.defaultType;\r\n      this.data = program.data;\r\n      this.shared = program.shared;\r\n    }\r\n\r\n    this.stack = []; // this.stack.length = 0;\r\n    this.callstack = []; //this.callstack.length = 0;\r\n    this.callstack.push(new StackFrame(this.instructions.length));\r\n    this.frame = this.callstack[0];\r\n    this.dataPtr = 0;\r\n    this.suspended = false;\r\n\r\n    if (this.interval) {\r\n      window.clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n\r\n    this.pc = 0;\r\n    if (program) {\r\n      this.cons.reset(program.testMode);\r\n    } else {\r\n      this.cons.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   Run a program to completion in synchronous mode, or\r\n   Starts running a program in asynchronous mode.\r\n \r\n   In asynchronous mode, it returns immediately.\r\n   */\r\n  run(program: QBasicProgram, synchronous: any) {\r\n    this.breakpoints = program.getBreakpoints();\r\n    this.reset(program);\r\n    this.asynchronous = !synchronous;\r\n\r\n    if (synchronous) {\r\n      while (this.pc < this.instructions.length) {\r\n        this.runOneInstruction();\r\n      }\r\n    } else {\r\n      this.interval = window.setInterval(() => {\r\n        /*globalMachine*/ this.runSome();\r\n      }, this.INTERVAL_MS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   Suspend the CPU, maintaining all state. This happens when the program\r\n   is waiting for user input.\r\n   */\r\n  suspend() {\r\n    this.suspended = true;\r\n    if (this.asynchronous) {\r\n      window.clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   Resume the CPU, after previously being suspended.\r\n   */\r\n  resume() {\r\n    this.suspended = false;\r\n    if (this.asynchronous) {\r\n      this.interval = window.setInterval(() => {\r\n        /*globalMachine.runSome()*/ this.runSome();\r\n      }, this.INTERVAL_MS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   Runs some instructions during asynchronous mode.\r\n   */\r\n  runSome() {\r\n    // var start = (new Date()).getTime();\r\n    try {\r\n      for (\r\n        let i = 0;\r\n        i < this.instructionsPerInterval &&\r\n        this.pc < this.instructions.length &&\r\n        !this.suspended;\r\n        i++\r\n      ) {\r\n        const instr = this.instructions[this.pc++];\r\n        if (this.debug) {\r\n          this.trace.printf('Execute [%s] %s\\n', this.pc - 1, instr);\r\n        }\r\n\r\n        instr.execute(this, instr.arg);\r\n\r\n        if (this.breakpoints.includes(this.pc)) {\r\n          this.suspend();\r\n          return;\r\n        }\r\n      }\r\n    } catch (e) {\r\n      //    this.suspend();\r\n      //    dbg.printf(\"Logic error. VM halted.\\n\");\r\n      //    dbg.print(this.trace.toString());\r\n    }\r\n\r\n    if (this.pc === this.instructions.length) {\r\n      window.clearInterval(this.interval);\r\n    }\r\n\r\n    /*\r\n       // adjusting the speed of the simulation during gameplay is a bad idea\r\n        var actualTime = (new Date()).getTime() - start;\r\n        if ( actualTime > this.INTERVAL_MS && this.instructionsPerInterval >\r\n                100) {\r\n            this.instructionsPerInterval -= 100;\r\n        } else if ( actualTime < this.INTERVAL_MS ) {\r\n            this.instructionsPerInterval += 100;\r\n        }\r\n        if ( Math.random() < 0.2 ) {\r\n            dbg.printf(\"actualTime: %s InstructionsPerInterval=%s\\n\",\r\n                    actualTime, this.instructionsPerInterval);\r\n        }\r\n    */\r\n  }\r\n\r\n  runOneInstruction() {\r\n    const instr = this.instructions[this.pc++];\r\n\r\n    // instr.instr.execute(this, instr.arg);\r\n    instr.execute(this, instr.arg);\r\n  }\r\n\r\n  setVariable(name: string, value: any) {\r\n    if (this.shared[name]) {\r\n      this.callstack[0].variables[name] = value;\r\n    } else {\r\n      this.frame.variables[name] = value;\r\n    }\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    let frame: StackFrame;\r\n    if (this.shared[name]) {\r\n      frame = this.callstack[0];\r\n    } else {\r\n      frame = this.frame;\r\n    }\r\n\r\n    if (frame.variables[name]) {\r\n      return frame.variables[name];\r\n    } else {\r\n      // must create variable\r\n      const typeName = DeriveTypeNameFromVariable(name);\r\n      let type: any;\r\n      if (typeName === null) {\r\n        type = this.defaultType;\r\n      } else {\r\n        type = this.types[typeName];\r\n      }\r\n\r\n      const scalar = new ScalarVariable(type, type.createInstance());\r\n      frame.variables[name] = scalar;\r\n      return scalar;\r\n    }\r\n  }\r\n\r\n  printStack() {\r\n    for (let i = 0; i < this.stack.length; i++) {\r\n      const item = this.stack[i];\r\n      let name = /*getObjectClass*/ item;\r\n      if (name == 'ScalarVariable') {\r\n        name += ' ' + (<any>item).value;\r\n      }\r\n      this.trace.printf('stack[%s]: %s\\n', i, name);\r\n    }\r\n  }\r\n\r\n  pushScalar(value: number, typeName: string) {\r\n    this.stack.push(new ScalarVariable(this.types[typeName], value));\r\n  }\r\n}\r\n","import { dbg, sprintf } from './qb';\r\n/**\r\n    Copyright 2010 Steve Hanov\r\n\r\n    This file is part of qb.js\r\n\r\n    qb.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    qb.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with qb.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n//#include <Types.js>\r\n/** @constructor */\r\nexport class TraceBuffer {\r\n  readonly MAX_LINES = 200;\r\n  lines: string[] = [];\r\n  constructor() {}\r\n\r\n  toString() {\r\n    return this.lines.join('');\r\n  }\r\n\r\n  printf(...args: any[]) {\r\n    //var args = [];\r\n    //for (var i = 0; i < arguments.length; i++) {\r\n    //    args.push(arguments[i]);\r\n    //}\r\n    var str = sprintf(args);\r\n    this.lines.push(str);\r\n    if (this.lines.length > this.MAX_LINES) {\r\n      this.lines.shift();\r\n    }\r\n    dbg.printf('%s', str);\r\n  }\r\n}\r\n","import { dbg /*ScriptSrc*/ } from './qb';\r\nimport { ImageManipulator } from './ImageManipulator';\r\nimport { INumberDictionary } from './base/common/collections';\r\nimport CharacterImageGenerator from './CharacterImageGenerator';\r\nimport IConsole from './virtualMachine/IConsole';\r\n\r\nexport var globalConsole: _Console;\r\n/** @constructor */\r\nexport class _Console implements IConsole {\r\n  ctx: CanvasRenderingContext2D;\r\n  interval = 0;\r\n  cursorEnabled = false;\r\n  cursorShown = false;\r\n  cursorBackground: any = null;\r\n  keyBuffer: number[] = [];\r\n  hasFocus = false;\r\n\r\n  fgcolourNum: number;\r\n  bgcolourNum: number;\r\n  bgcolour: string;\r\n  fgcolour: string;\r\n  curX = 0;\r\n  curY = 0;\r\n  x = 0;\r\n  y = 0;\r\n  rows = 0;\r\n  cols = 0;\r\n  charWidth = 0;\r\n  charHeight = 0;\r\n  inputMode = false;\r\n  onInputDone: any;\r\n  inputStr: number | string = 0;\r\n  inputPos = 0;\r\n\r\n  width: number;\r\n  height: number;\r\n\r\n  recording: boolean;\r\n  recorded = '';\r\n\r\n  readonly characterImageGenerator: CharacterImageGenerator;\r\n  constructor(public canvas: HTMLCanvasElement) {\r\n    this.canvas.width = 640;\r\n    this.canvas.height = 400;\r\n    this.canvas.tabIndex = 0;\r\n    this.ctx = this.canvas.getContext('2d')!;\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    // this.charImg = document.createElement(\"img\");\r\n    // this.charImg.setAttribute(\"src\", ScriptSrc + \"charmap.png\");\r\n\r\n    globalConsole = this;\r\n\r\n    // this.keyBuffer = [];\r\n    this.reset(false);\r\n\r\n    // this.hasFocus = false;\r\n\r\n    var self = this;\r\n\r\n    window.onkeydown = (event: KeyboardEvent) => {\r\n      if (this.hasFocus) {\r\n        this.onKeyDown(event);\r\n        event.preventDefault();\r\n        // return false;\r\n      }\r\n      // return\r\n    };\r\n\r\n    //$(window).keydown(function (event) {\r\n    //    if (self.hasFocus) {\r\n    //        self.onKeyDown(event);\r\n    //        event.preventDefault();\r\n    //        return false;\r\n    //    }\r\n    //});\r\n\r\n    canvas.onclick = event => {\r\n      canvas.style.borderColor = '#008800';\r\n      // $(canvas).focus();\r\n      canvas.focus();\r\n      self.hasFocus = true;\r\n      event.stopPropagation();\r\n    };\r\n    //$(canvas).click(function (event) {\r\n    //    canvas.style.borderColor = \"#008800\";\r\n    //    $(canvas).focus();\r\n    //    self.hasFocus = true;\r\n    //    event.stopPropagation();\r\n    //});\r\n\r\n    window.onclick = (_event: MouseEvent) => {\r\n      this.hasFocus = false;\r\n      canvas.style.borderColor = 'rgba(14,99,156,0.8)';\r\n    };\r\n    //$(window).click(function (event) {\r\n    //    self.hasFocus = false;\r\n    //    canvas.style.borderColor = \"#888888\";\r\n    //});\r\n    canvas.style.borderWidth = '1px';\r\n    // $(canvas).css(\"border-width\", \"5px\");\r\n    canvas.style.borderColor = '#888888';\r\n    // $(canvas).css(\"border-color\", \"#888888\");\r\n    canvas.style.borderStyle = 'solid';\r\n    // $(canvas).css(\"border-style\", \"solid\");\r\n\r\n    this.cls();\r\n\r\n    this.characterImageGenerator = new CharacterImageGenerator(\r\n      this.charWidth,\r\n      this.charHeight\r\n    );\r\n  }\r\n\r\n  Colours = [\r\n    '#000000', // Black\r\n    '#000088', // Dark Blue\r\n    '#008800', // Green\r\n    '#008888', // Dark Cyan\r\n    '#880000', // Dark Red\r\n    '#880088', // Dark Magenta\r\n    '#884400', // Brown\r\n    '#888888', // Grey\r\n    '#444444', // Charcoal\r\n    '#0000ff', // Blue\r\n    '#00ff00', // Green\r\n    '#00ffff', // Cyan\r\n    '#ff0000', // Red\r\n    '#ff00ff', // Magenta\r\n    '#ffff00', // Yellow\r\n    '#ffffff' // White\r\n  ];\r\n\r\n  ScreenDimensions: any = {\r\n    1: { width: 320, height: 200 },\r\n    2: { width: 640, height: 200 },\r\n    3: { width: 720, height: 348 },\r\n    4: { width: 640, height: 400 },\r\n    7: { width: 320, height: 200 },\r\n    8: { width: 640, height: 200 },\r\n    9: { width: 640, height: 350 },\r\n    10: { width: 640, height: 350 },\r\n    11: { width: 640, height: 480 },\r\n    12: { width: 640, height: 480 },\r\n    13: { width: 320, height: 200 }\r\n  };\r\n\r\n  reset(testMode = false) {\r\n    this.fgcolourNum = 7;\r\n    this.bgcolourNum = 0;\r\n    this.bgcolour = this.Colours[this.bgcolourNum];\r\n    this.fgcolour = this.Colours[this.fgcolourNum];\r\n    this.curX = 0;\r\n    this.curY = 0;\r\n    this.x = 0;\r\n    this.y = 0;\r\n\r\n    this.rows = 25;\r\n    this.cols = 80;\r\n    this.charWidth = 8;\r\n    this.charHeight = 16;\r\n\r\n    this.inputMode = false;\r\n    this.onInputDone = null;\r\n    this.inputStr = 0;\r\n    this.inputPos = 0;\r\n    this.width = this.cols * this.charWidth;\r\n    this.height = this.rows * this.charHeight;\r\n\r\n    this.cls();\r\n    this.recording = testMode;\r\n    // this.recorded = \"\";\r\n  }\r\n\r\n  record(str: string) {\r\n    if (this.recording) {\r\n      this.recorded += str;\r\n    }\r\n  }\r\n\r\n  printError(str: string) {\r\n    if (this.recording) {\r\n      return;\r\n    }\r\n    this.print(str);\r\n  }\r\n\r\n  setKeyBuffer(str: string) {\r\n    this.keyBuffer.length = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n      this.keyBuffer.push(str.charCodeAt(i));\r\n    }\r\n  }\r\n\r\n  screen(num: number) {\r\n    var dimensions = this.ScreenDimensions[num];\r\n    if (dimensions === undefined) {\r\n      return false;\r\n    }\r\n\r\n    this.cursor(false);\r\n\r\n    // $(this.canvas).width(dimensions.width);\r\n    this.canvas.width = dimensions.width;\r\n    //$(this.canvas).height(dimensions.height);\r\n    this.canvas.height = dimensions.height;\r\n\r\n    this.ctx.scale(\r\n      this.width / dimensions.width,\r\n      this.height / dimensions.height\r\n    );\r\n\r\n    this.width = dimensions.width;\r\n    this.height = dimensions.height;\r\n\r\n    return true;\r\n  }\r\n\r\n  line(x1: number, y1: number, x2: number, y2: number) {\r\n    this.ctx.strokeStyle = this.fgcolour;\r\n    this.ctx.moveTo(x1, y1);\r\n    this.ctx.lineTo(x2, y2);\r\n    this.ctx.stroke();\r\n\r\n    this.curX = x2;\r\n    this.curY = y2;\r\n  }\r\n\r\n  lineTo(x: number, y: number) {\r\n    this.line(this.curX, this.curY, x, y);\r\n  }\r\n\r\n  circle(\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    colour: any,\r\n    start: any,\r\n    end: any,\r\n    aspect: any,\r\n    step: any\r\n  ) {\r\n    // all parameters are optional except for x, y, radius, and step.\r\n    if (step) {\r\n      x = this.curX + x;\r\n      y = this.curY + y;\r\n    }\r\n\r\n    if (aspect === undefined) {\r\n      aspect = (4 * (this.height / this.width)) / 3;\r\n    }\r\n\r\n    this.ctx.save();\r\n    this.ctx.translate(x, y);\r\n    if (aspect > 0) {\r\n      this.ctx.scale(1.0, aspect);\r\n    } else {\r\n      this.ctx.scale(aspect, 1.0);\r\n    }\r\n\r\n    if (colour) {\r\n      this.ctx.strokeStyle = this.Colours[colour];\r\n    }\r\n\r\n    if (start === undefined) {\r\n      start = 0.0;\r\n    }\r\n\r\n    if (end === undefined) {\r\n      end = 2 * Math.PI;\r\n    }\r\n\r\n    start = 2 * Math.PI - start;\r\n    end = 2 * Math.PI - end;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(0, 0, radius, start, end, true);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  get(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    step1: number,\r\n    step2: number\r\n  ) {\r\n    var temp;\r\n\r\n    if (step1) {\r\n      x1 = this.curX + x1;\r\n      y1 = this.curY + y1;\r\n    }\r\n\r\n    if (step2) {\r\n      x1 = this.curX + x2;\r\n      y2 = this.curY + y2;\r\n    }\r\n\r\n    if (x1 > x2) {\r\n      temp = x1;\r\n      x1 = x2;\r\n      x2 = temp;\r\n    }\r\n\r\n    if (y1 > y2) {\r\n      temp = y1;\r\n      y1 = y2;\r\n      y2 = temp;\r\n    }\r\n\r\n    return this.ctx.getImageData(x1, y1, x2 - x1, y2 - y1);\r\n  }\r\n\r\n  put(data: ImageData, x: number, y: number) {\r\n    this.ctx.putImageData(data, x, y);\r\n  }\r\n\r\n  paint(_x: number, _y: number, colour: any, borderColour: any, _step: number) {\r\n    var image = new ImageManipulator(\r\n      this.ctx.getImageData(0, 0, this.width, this.height)\r\n    );\r\n\r\n    dbg.printf('%s\\n', image.get(10, 10));\r\n  }\r\n\r\n  cls() {\r\n    this.record('[CLS]');\r\n    this.cursor(false);\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.ctx.fillStyle = this.bgcolour;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  locate(row: number, col: number) {\r\n    this.record('[L' + row + ',' + col + ']');\r\n    this.cursor(false);\r\n    this.x = Math.floor(col) - 1;\r\n    this.y = Math.floor(row) - 1;\r\n  }\r\n\r\n  color(fg = this.fgcolourNum, bg = this.bgcolourNum) {\r\n    this.record('[C' + fg);\r\n    this.record(',' + bg);\r\n    this.record(']\\n');\r\n\r\n    this.fgcolourNum = fg;\r\n    this.fgcolour = this.Colours[fg];\r\n    this.bgcolourNum = bg;\r\n    this.bgcolour = this.Colours[bg];\r\n  }\r\n\r\n  scroll() {\r\n    this.cursor(false);\r\n    this.ctx.drawImage(\r\n      this.canvas,\r\n      0,\r\n      this.charHeight,\r\n      this.width,\r\n      this.height - this.charHeight,\r\n      0,\r\n      0,\r\n      this.width,\r\n      this.height - this.charHeight\r\n    );\r\n    this.ctx.fillStyle = this.bgcolour;\r\n    this.ctx.fillRect(\r\n      0,\r\n      this.height - this.charHeight,\r\n      this.width,\r\n      this.charHeight\r\n    );\r\n    this.y -= 1;\r\n  }\r\n\r\n  input(onInputDone: (input: string) => void) {\r\n    if (this.recording) {\r\n      var str = '';\r\n      while (this.keyBuffer.length > 0) {\r\n        str += String.fromCharCode(this.keyBuffer.shift());\r\n      }\r\n\r\n      onInputDone(str);\r\n    } else {\r\n      this.enableCursor(true);\r\n      this.onInputDone = onInputDone;\r\n      this.inputMode = true;\r\n      this.inputStr = '';\r\n      this.inputPos = 0;\r\n    }\r\n  }\r\n\r\n  backup(num: number) {\r\n    this.cursor(false);\r\n\r\n    this.x -= num;\r\n    while (this.x < 0) {\r\n      this.y -= 1;\r\n      this.x += this.cols;\r\n    }\r\n\r\n    if (this.y < 0) {\r\n      this.y = 0;\r\n    }\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    if (this.inputMode) {\r\n      // if input position is at least 1,\r\n      if ((<string>this.inputStr).length > 0) {\r\n        // if it's backspace,\r\n        if (event.keyCode == 8) {\r\n          this.inputStr = (<string>this.inputStr).substr(\r\n            0,\r\n            (<string>this.inputStr).length - 1\r\n          );\r\n          this.backup(1);\r\n          this.print(' ');\r\n          this.backup(1);\r\n        }\r\n      }\r\n\r\n      if (event.keyCode === 13) {\r\n        // done\r\n        this.inputMode = false;\r\n        this.print('\\n');\r\n        this.enableCursor(false);\r\n        this.onInputDone(this.inputStr);\r\n      }\r\n\r\n      if (event.keyCode >= 32 && event.keyCode <= 126) {\r\n        // insert the character at the string position, and increment input\r\n        // position.\r\n        var ch = String.fromCharCode(event.keyCode);\r\n        this.inputStr += ch;\r\n        this.inputPos += 1;\r\n        this.print(ch);\r\n      }\r\n    } else {\r\n      var SpecialChars: INumberDictionary<number> = {\r\n        37: 75, // left\r\n        38: 72, // up\r\n        39: 77, // right\r\n        40: 80 // down\r\n      };\r\n\r\n      if (event.keyCode in SpecialChars) {\r\n        this.keyBuffer.push(0);\r\n        this.keyBuffer.push(SpecialChars[event.keyCode]);\r\n      } else {\r\n        this.keyBuffer.push(event.keyCode);\r\n      }\r\n    }\r\n  }\r\n\r\n  getKeyFromBuffer() {\r\n    if (this.keyBuffer.length > 0) {\r\n      return this.keyBuffer.shift();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  enableCursor(enabled: any) {\r\n    if (enabled && !this.cursorEnabled) {\r\n      this.interval = window.setInterval(() => {\r\n        this.toggleCursor();\r\n      }, 500);\r\n      this.cursor(true);\r\n    } else {\r\n      window.clearInterval(this.interval);\r\n      this.cursor(false);\r\n    }\r\n\r\n    this.cursorEnabled = enabled;\r\n  }\r\n\r\n  toggleCursor() {\r\n    this.cursor(!this.cursorShown);\r\n  }\r\n\r\n  cursor(show: boolean) {\r\n    const ctx = this.ctx;\r\n    if (show == this.cursorShown) {\r\n      return;\r\n    }\r\n\r\n    ctx.save();\r\n    {\r\n      if (show) {\r\n        this.ctx.fillStyle = this.fgcolour;\r\n        this.ctx.fillRect(\r\n          this.x * this.charWidth,\r\n          this.y * this.charHeight + this.charHeight - 2,\r\n          this.charWidth,\r\n          2\r\n        );\r\n      } else {\r\n        this.ctx.fillStyle = this.bgcolour;\r\n        this.ctx.fillRect(\r\n          this.x * this.charWidth,\r\n          this.y * this.charHeight + this.charHeight - 2,\r\n          this.charWidth,\r\n          2\r\n        );\r\n      }\r\n    }\r\n    ctx.restore();\r\n    this.cursorShown = show;\r\n  }\r\n\r\n  newline() {\r\n    this.x = 0;\r\n    this.y += 1;\r\n  }\r\n\r\n  print(str: string) {\r\n    if (this.recording) {\r\n      this.recorded += str;\r\n    }\r\n\r\n    this.cursor(false);\r\n\r\n    const bgcolour = this.bgcolour;\r\n    const fgcolour = this.fgcolour;\r\n    const ctx = this.ctx;\r\n    ctx.fillStyle = bgcolour;\r\n    ctx.font = '16px Consolas';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'center';\r\n\r\n    const characterImageGenerator = this.characterImageGenerator;\r\n    for (var i = 0; i < str.length; i++) {\r\n      if (this.y == this.rows) {\r\n        this.scroll();\r\n      }\r\n\r\n      if (str[i] == '\\n') {\r\n        this.newline();\r\n      } else {\r\n        ctx.fillStyle = bgcolour;\r\n\r\n        ctx.drawImage(\r\n          characterImageGenerator.toImage(' ', fgcolour, bgcolour),\r\n          this.x * this.charWidth,\r\n          this.y * this.charHeight\r\n        );\r\n\r\n        ctx.fillStyle = fgcolour;\r\n        {\r\n          ctx.drawImage(\r\n            characterImageGenerator.toImage(str[i], fgcolour, bgcolour),\r\n            this.x * this.charWidth,\r\n            this.y * this.charHeight\r\n          );\r\n        }\r\n        ctx.fillStyle = bgcolour;\r\n\r\n        this.x += 1;\r\n        if (this.x == this.cols) {\r\n          this.newline();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n    Copyright 2010 Steve Hanov\r\n\r\n    This file is part of qb.js\r\n\r\n    qb.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    qb.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with qb.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nexport class ImageManipulator {\r\n  image: ImageData;\r\n  /** @constructor */\r\n  constructor(imageData: ImageData) {\r\n    this.image = imageData;\r\n  }\r\n\r\n  public get(x: number, y: number) {\r\n    return this.image.data[this.image.width * y + x];\r\n  }\r\n\r\n  public put(x: number, y: number, clr: number) {\r\n    this.image.data[this.image.width * y + x] = clr;\r\n  }\r\n}\r\n","export default class CharacterImageGenerator {\r\n  readonly canvas = document.createElement('canvas');\r\n  readonly context: CanvasRenderingContext2D;\r\n  constructor(readonly charWidth: number, readonly charHeight: number) {\r\n    const canvas = this.canvas;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.top = '-9999px';\r\n    canvas.style.left = '-9999px';\r\n    canvas.style.fontFamily = '16px Consolas';\r\n\r\n    canvas.width = charWidth;\r\n    canvas.height = charHeight;\r\n    canvas.tabIndex = 0;\r\n\r\n    this.context = canvas.getContext('2d');\r\n    const context = this.context;\r\n\r\n    context.setTransform(1, 0, 0, 1, 0, 0);\r\n    context.font = '16px Consolas';\r\n    context.textBaseline = 'middle';\r\n    context.textAlign = 'center';\r\n  }\r\n\r\n  //   public clear(backgroundColor: string) {\r\n  //     const context = this.context;\r\n  //     context.fillStyle = backgroundColor;\r\n  //     context.fillRect(0, 0, this.charWidth, this.charHeight);\r\n  //   }\r\n  public toImage(char: string, color: string, backgroundColor: string) {\r\n    const { context, charWidth, charHeight } = this;\r\n    if (char === ' ') {\r\n      context.fillStyle = backgroundColor;\r\n      context.fillRect(0, 0, charWidth, charHeight);\r\n      return this.canvas;\r\n    }\r\n    context.fillStyle = color;\r\n    context.fillText(char, charWidth * 0.5, charHeight * 0.5);\r\n    return this.canvas;\r\n  }\r\n}\r\n"],"sourceRoot":""}